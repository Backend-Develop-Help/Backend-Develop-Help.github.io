(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,i,s=e[0],c=e[1],l=e[2],p=0,d=[];p<s.length;p++)i=s[p],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&d.push(a[i][0]),a[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(n[r]=c[r]);for(u&&u(e);d.length;)d.shift()();return o.push.apply(o,l||[]),t()}function t(){for(var n,e=0;e<o.length;e++){for(var t=o[e],r=!0,s=1;s<t.length;s++){var c=t[s];0!==a[c]&&(r=!1)}r&&(o.splice(e--,1),n=i(i.s=t[0]))}return n}var r={},a={1:0},o=[];function i(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}i.e=function(n){var e=[],t=a[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=a[n]=[e,r]}));e.push(t[2]=r);var o,s=document.createElement("script");s.charset="utf-8",s.timeout=120,i.nc&&s.setAttribute("nonce",i.nc),s.src=function(n){return i.p+"assets/js/"+({}[n]||n)+"."+{2:"388f75b7",3:"f554136f",4:"aa385005",5:"bb37d451",6:"c033c22d",7:"9d22425d",8:"1e827847",9:"9e0bffeb",10:"a3a8b7e9",11:"3a4b3a6f",12:"4b94c69a",13:"0fc92fed",14:"0e142cb8",15:"52ed5af4",16:"d7fb812a",17:"b615de32",18:"10aa16c6",19:"891a786d",20:"dc6a720f",21:"d47ab2e2",22:"d0bd460c",23:"af8c6314",24:"0b7170dd",25:"996d2c16",26:"31b97e81",27:"9273c2dd",28:"e2987f11",29:"062c29f8",30:"8095effc",31:"f0d92c2e",32:"2a0247ac",33:"9a1e6a1a",34:"341333e7",35:"3a407794",36:"d75b1111",37:"27191033",38:"63d6e3be",39:"3a70cb1f"}[n]+".js"}(n);var c=new Error;o=function(e){s.onerror=s.onload=null,clearTimeout(l);var t=a[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;c.message="Loading chunk "+n+" failed.\n("+r+": "+o+")",c.name="ChunkLoadError",c.type=r,c.request=o,t[1](c)}a[n]=void 0}};var l=setTimeout((function(){o({type:"timeout",target:s})}),12e4);s.onerror=s.onload=o,document.head.appendChild(s)}return Promise.all(e)},i.m=n,i.c=r,i.d=function(n,e,t){i.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},i.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},i.t=function(n,e){if(1&e&&(n=i(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(i.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)i.d(t,r,function(e){return n[e]}.bind(null,r));return t},i.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return i.d(e,"a",e),e},i.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},i.p="/",i.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=e,s=s.slice();for(var l=0;l<s.length;l++)e(s[l]);var u=c;o.push([104,0]),t()}([function(n,e,t){"use strict";var r=function(n){return n&&n.Math===Math&&n};n.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof global&&global)||r("object"==typeof this&&this)||function(){return this}()||Function("return this")()},function(n,e,t){"use strict";var r="object"==typeof document&&document.all;n.exports=void 0===r&&void 0!==r?function(n){return"function"==typeof n||n===r}:function(n){return"function"==typeof n}},function(n,e,t){"use strict";var r=t(26),a=Function.prototype,o=a.call,i=r&&a.bind.bind(o,o);n.exports=r?i:function(n){return function(){return o.apply(n,arguments)}}},function(n,e,t){"use strict";n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){"use strict";var r=t(3);n.exports=!r((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){"use strict";var r=t(1);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(68),a="object"==typeof self&&self&&self.Object===Object&&self,o=r||a||Function("return this")();n.exports=o},function(n,e,t){"use strict";function r(n,e,t,r,a,o,i,s){var c,l="function"==typeof n?n.options:n;if(e&&(l.render=e,l.staticRenderFns=t,l._compiled=!0),r&&(l.functional=!0),o&&(l._scopeId="data-v-"+o),i?(c=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),a&&a.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(i)},l._ssrRegister=c):a&&(c=s?function(){a.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:a),c)if(l.functional){l._injectStyles=c;var u=l.render;l.render=function(n,e){return c.call(e),u(n,e)}}else{var p=l.beforeCreate;l.beforeCreate=p?[].concat(p,c):[c]}return{exports:n,options:l}}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(2),a=t(31),o=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return o(a(n),e)}},function(n,e,t){var r=t(163),a=t(166);n.exports=function(n,e){var t=a(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return o})),t.d(e,"j",(function(){return i})),t.d(e,"g",(function(){return c})),t.d(e,"h",(function(){return l})),t.d(e,"i",(function(){return u})),t.d(e,"c",(function(){return p})),t.d(e,"f",(function(){return d})),t.d(e,"l",(function(){return f})),t.d(e,"m",(function(){return m})),t.d(e,"d",(function(){return g})),t.d(e,"k",(function(){return v})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return k}));t(16);const r=/#.*$/,a=/\.(md|html)$/,o=/\/$/,i=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(a,"")}function c(n){return i.test(n)}function l(n){return/^mailto:/.test(n)}function u(n){return/^tel:/.test(n)}function p(n){if(c(n))return n;if(!n)return"404";const e=n.match(r),t=e?e[0]:"",a=s(n);return o.test(a)?n:a+".html"+t}function d(n,e){const t=n.hash,a=function(n){const e=n&&n.match(r);if(e)return e[0]}(e);if(a&&t!==a)return!1;return s(n.path)===s(e)}function f(n,e,t){if(c(e))return{type:"external",path:e};t&&(e=function(n,e,t){const r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;const a=e.split("/");t&&a[a.length-1]||a.pop();const o=n.replace(/^\//,"").split("/");for(let n=0;n<o.length;n++){const e=o[n];".."===e?a.pop():"."!==e&&a.push(e)}""!==a[0]&&a.unshift("");return a.join("/")}(e,t));const r=s(e);for(let e=0;e<n.length;e++)if(s(n[e].regularPath)===r)return Object.assign({},n[e],{type:"page",path:p(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function m(n,e,t,r){const{pages:a,themeConfig:o}=t,i=r&&o.locales&&o.locales[r]||o;if("auto"===(n.frontmatter.sidebar||i.sidebar||o.sidebar))return h(n);const s=i.sidebar||o.sidebar;if(s){const{base:t,config:r}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const r in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(r)))return{base:r,config:e[r]};var t;return{}}(e,s);return"auto"===r?h(n):r?r.map(n=>function n(e,t,r,a=1){if("string"==typeof e)return f(t,e,r);if(Array.isArray(e))return Object.assign(f(t,e[0],r),{title:e[1]});{a>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const o=e.children||[];return 0===o.length&&e.path?Object.assign(f(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:o.map(e=>n(e,t,r,a+1)),collapsable:!1!==e.collapsable}}}(n,a,t)):[]}return[]}function h(n){const e=g(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function g(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function v(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function k(n,e){return y(e)-y(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r=t(15),a=t(148),o=t(149),i=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":i&&i in Object(n)?a(n):o(n)}},function(n,e,t){"use strict";var r=t(4),a=t(17),o=t(34);n.exports=r?function(n,e,t){return a.f(n,e,o(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(7).Symbol;n.exports=r},function(n,e,t){"use strict";var r=t(25),a=t(31),o=t(32),i=t(142),s=t(144);r({target:"Array",proto:!0,arity:1,forced:t(3)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(n){return n instanceof TypeError}}()},{push:function(n){var e=a(this),t=o(e),r=arguments.length;s(t+r);for(var c=0;c<r;c++)e[t]=arguments[c],t++;return i(e,t),t}})},function(n,e,t){"use strict";var r=t(4),a=t(63),o=t(99),i=t(47),s=t(54),c=TypeError,l=Object.defineProperty,u=Object.getOwnPropertyDescriptor;e.f=r?o?function(n,e,t){if(i(n),e=s(e),i(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=u(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return l(n,e,t)}:l:function(n,e,t){if(i(n),e=s(e),i(t),a)try{return l(n,e,t)}catch(n){}if("get"in t||"set"in t)throw new c("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){"use strict";var r=t(2),a=r({}.toString),o=r("".slice);n.exports=function(n){return o(a(n),8,-1)}},function(n,e,t){var r=t(153),a=t(154),o=t(155),i=t(156),s=t(157);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=o,c.prototype.has=i,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(70);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(10)(Object,"create");n.exports=r},function(n,e,t){var r=t(175);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(45);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(n,e,t){return n<e?e:n>t?t:n}function o(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=a(n,r.minimum,1),t.status=1===n?null:n;var c=t.render(!e),l=c.querySelector(r.barSelector),u=r.speed,p=r.easing;return c.offsetWidth,i((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(l,function(n,e,t){var a;return(a="translate3d"===r.positionUsing?{transform:"translate3d("+o(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+o(n)+"%,0)"}:{"margin-left":o(n)+"%"}).transition="all "+e+"ms "+t,a}(n,u,p)),1===n?(s(c,{transition:"none",opacity:1}),c.offsetWidth,setTimeout((function(){s(c,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),u)}),u)):setTimeout(e,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*a(Math.random()*e,.1,.95)),e=a(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");l(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var a,i=e.querySelector(r.barSelector),c=n?"-100":o(t.status||0),u=document.querySelector(r.parent);return s(i,{transition:"all 0 linear",transform:"translate3d("+c+"%,0,0)"}),r.showSpinner||(a=e.querySelector(r.spinnerSelector))&&d(a),u!=document.body&&l(u,"nprogress-custom-parent"),u.appendChild(e),e},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var i=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,a=n.length,o=e.charAt(0).toUpperCase()+e.slice(1);a--;)if((r=n[a]+o)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,a,o=arguments;if(2==o.length)for(t in e)void 0!==(a=e[t])&&e.hasOwnProperty(t)&&r(n,t,a);else r(n,o[1],o[2])}}();function c(n,e){return("string"==typeof n?n:p(n)).indexOf(" "+e+" ")>=0}function l(n,e){var t=p(n),r=t+e;c(t,e)||(n.className=r.substring(1))}function u(n,e){var t,r=p(n);c(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=a)},function(n,e,t){"use strict";var r=t(0),a=t(52).f,o=t(14),i=t(95),s=t(37),c=t(64),l=t(123);n.exports=function(n,e){var t,u,p,d,f,m=n.target,h=n.global,g=n.stat;if(t=h?r:g?r[m]||s(m,{}):r[m]&&r[m].prototype)for(u in e){if(d=e[u],p=n.dontCallGetSet?(f=a(t,u))&&f.value:t[u],!l(h?u:m+(g?".":"#")+u,n.forced)&&void 0!==p){if(typeof d==typeof p)continue;c(d,p)}(n.sham||p&&p.sham)&&o(d,"sham",!0),i(t,u,d,n)}}},function(n,e,t){"use strict";var r=t(3);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){"use strict";var r=t(48),a=t(35);n.exports=function(n){return r(a(n))}},function(n,e,t){"use strict";var r=t(0),a=t(1),o=function(n){return a(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?o(r[n]):r[n]&&r[n][e]}},function(n,e,t){"use strict";var r=t(1),a=t(110),o=TypeError;n.exports=function(n){if(r(n))return n;throw new o(a(n)+" is not a function")}},function(n,e,t){"use strict";var r=t(0),a=t(60),o=t(9),i=t(62),s=t(58),c=t(57),l=r.Symbol,u=a("wks"),p=c?l.for||l:l&&l.withoutSetter||i;n.exports=function(n){return o(u,n)||(u[n]=s&&o(l,n)?l[n]:p("Symbol."+n)),u[n]}},function(n,e,t){"use strict";var r=t(35),a=Object;n.exports=function(n){return a(r(n))}},function(n,e,t){"use strict";var r=t(121);n.exports=function(n){return r(n.length)}},function(n,e,t){"use strict";var r=t(26),a=Function.prototype.call;n.exports=r?a.bind(a):function(){return a.apply(a,arguments)}},function(n,e,t){"use strict";n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){"use strict";var r=t(53),a=TypeError;n.exports=function(n){if(r(n))throw new a("Can't call method on "+n);return n}},function(n,e,t){"use strict";var r=t(61),a=t(0),o=t(37),i=n.exports=a["__core-js_shared__"]||o("__core-js_shared__",{});(i.versions||(i.versions=[])).push({version:"3.37.0",mode:r?"pure":"global",copyright:"© 2014-2024 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.37.0/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){"use strict";var r=t(0),a=Object.defineProperty;n.exports=function(n,e){try{a(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(147),a=t(12),o=Object.prototype,i=o.hasOwnProperty,s=o.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(n){return a(n)&&i.call(n,"callee")&&!s.call(n,"callee")};n.exports=c},function(n,e,t){var r=t(10)(t(7),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(167),a=t(174),o=t(176),i=t(177),s=t(178);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=o,c.prototype.has=i,c.prototype.set=s,n.exports=c},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(5),a=t(45),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!a(n))||(i.test(n)||!o.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(13),a=t(12);n.exports=function(n){return"symbol"==typeof n||a(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){"use strict";var r=t(6),a=String,o=TypeError;n.exports=function(n){if(r(n))return n;throw new o(a(n)+" is not an object")}},function(n,e,t){"use strict";var r=t(2),a=t(3),o=t(18),i=Object,s=r("".split);n.exports=a((function(){return!i("z").propertyIsEnumerable(0)}))?function(n){return"String"===o(n)?s(n,""):i(n)}:i},function(n,e,t){"use strict";n.exports={}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,o=/^0o[0-7]+$/i,i=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,c="object"==typeof self&&self&&self.Object===Object&&self,l=s||c||Function("return this")(),u=Object.prototype.toString,p=Math.max,d=Math.min,f=function(){return l.Date.now()};function m(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function h(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==u.call(n)}(n))return NaN;if(m(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=m(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=a.test(n);return s||o.test(n)?i(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,a,o,i,s,c,l=0,u=!1,g=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,o=a;return r=a=void 0,l=e,i=n.apply(o,t)}function y(n){return l=n,s=setTimeout(x,e),u?b(n):i}function k(n){var t=n-c;return void 0===c||t>=e||t<0||g&&n-l>=o}function x(){var n=f();if(k(n))return _(n);s=setTimeout(x,function(n){var t=e-(n-c);return g?d(t,o-(n-l)):t}(n))}function _(n){return s=void 0,v&&r?b(n):(r=a=void 0,i)}function w(){var n=f(),t=k(n);if(r=arguments,a=this,c=n,t){if(void 0===s)return y(c);if(g)return s=setTimeout(x,e),b(c)}return void 0===s&&(s=setTimeout(x,e)),i}return e=h(e)||0,m(t)&&(u=!!t.leading,o=(g="maxWait"in t)?p(h(t.maxWait)||0,e):o,v="trailing"in t?!!t.trailing:v),w.cancel=function(){void 0!==s&&clearTimeout(s),l=0,r=c=a=s=void 0},w.flush=function(){return void 0===s?i:_(f())},w}},function(n,e,t){"use strict";var r=t(4),a=t(33),o=t(106),i=t(34),s=t(27),c=t(54),l=t(9),u=t(63),p=Object.getOwnPropertyDescriptor;e.f=r?p:function(n,e){if(n=s(n),e=c(e),u)try{return p(n,e)}catch(n){}if(l(n,e))return i(!a(o.f,n,e),n[e])}},function(n,e,t){"use strict";n.exports=function(n){return null==n}},function(n,e,t){"use strict";var r=t(107),a=t(55);n.exports=function(n){var e=r(n,"string");return a(e)?e:e+""}},function(n,e,t){"use strict";var r=t(28),a=t(1),o=t(56),i=t(57),s=Object;n.exports=i?function(n){return"symbol"==typeof n}:function(n){var e=r("Symbol");return a(e)&&o(e.prototype,s(n))}},function(n,e,t){"use strict";var r=t(2);n.exports=r({}.isPrototypeOf)},function(n,e,t){"use strict";var r=t(58);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){"use strict";var r=t(59),a=t(3),o=t(0).String;n.exports=!!Object.getOwnPropertySymbols&&!a((function(){var n=Symbol("symbol detection");return!o(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){"use strict";var r,a,o=t(0),i=t(108),s=o.process,c=o.Deno,l=s&&s.versions||c&&c.version,u=l&&l.v8;u&&(a=(r=u.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!a&&i&&(!(r=i.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=i.match(/Chrome\/(\d+)/))&&(a=+r[1]),n.exports=a},function(n,e,t){"use strict";var r=t(36);n.exports=function(n,e){return r[n]||(r[n]=e||{})}},function(n,e,t){"use strict";n.exports=!1},function(n,e,t){"use strict";var r=t(2),a=0,o=Math.random(),i=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+i(++a+o,36)}},function(n,e,t){"use strict";var r=t(4),a=t(3),o=t(98);n.exports=!r&&!a((function(){return 7!==Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){"use strict";var r=t(9),a=t(116),o=t(52),i=t(17);n.exports=function(n,e,t){for(var s=a(e),c=i.f,l=o.f,u=0;u<s.length;u++){var p=s[u];r(n,p)||t&&r(t,p)||c(n,p,l(e,p))}}},function(n,e,t){"use strict";var r=t(120);n.exports=function(n){var e=+n;return e!=e||0===e?0:r(e)}},function(n,e,t){"use strict";var r=t(130),a=t(6),o=t(35),i=t(131);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.prototype,"__proto__","set"))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return o(t),i(r),a(t)?(e?n(t,r):t.__proto__=r,t):t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,a=n.length;++t<r;)n[a+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(19),a=t(158),o=t(159),i=t(160),s=t(161),c=t(162);function l(n){var e=this.__data__=new r(n);this.size=e.size}l.prototype.clear=a,l.prototype.delete=o,l.prototype.get=i,l.prototype.has=s,l.prototype.set=c,n.exports=l},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(13),a=t(40);n.exports=function(n){if(!a(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(179),a=t(12);n.exports=function n(e,t,o,i,s){return e===t||(null==e||null==t||!a(e)&&!a(t)?e!=e&&t!=t:r(e,t,o,i,n,s))}},function(n,e,t){var r=t(75),a=t(182),o=t(76);n.exports=function(n,e,t,i,s,c){var l=1&t,u=n.length,p=e.length;if(u!=p&&!(l&&p>u))return!1;var d=c.get(n),f=c.get(e);if(d&&f)return d==e&&f==n;var m=-1,h=!0,g=2&t?new r:void 0;for(c.set(n,e),c.set(e,n);++m<u;){var v=n[m],b=e[m];if(i)var y=l?i(b,v,m,e,n,c):i(v,b,m,n,e,c);if(void 0!==y){if(y)continue;h=!1;break}if(g){if(!a(e,(function(n,e){if(!o(g,e)&&(v===n||s(v,n,t,i,c)))return g.push(e)}))){h=!1;break}}else if(v!==b&&!s(v,b,t,i,c)){h=!1;break}}return c.delete(n),c.delete(e),h}},function(n,e,t){var r=t(41),a=t(180),o=t(181);function i(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}i.prototype.add=i.prototype.push=a,i.prototype.has=o,n.exports=i},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(192),a=t(198),o=t(81);n.exports=function(n){return o(n)?r(n):a(n)}},function(n,e,t){(function(n){var r=t(7),a=t(194),o=e&&!e.nodeType&&e,i=o&&"object"==typeof n&&n&&!n.nodeType&&n,s=i&&i.exports===o?r.Buffer:void 0,c=(s?s.isBuffer:void 0)||a;n.exports=c}).call(this,t(50)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(195),a=t(196),o=t(197),i=o&&o.isTypedArray,s=i?a(i):r;n.exports=s},function(n,e,t){var r=t(71),a=t(43);n.exports=function(n){return null!=n&&a(n.length)&&!r(n)}},function(n,e,t){var r=t(10)(t(7),"Set");n.exports=r},function(n,e,t){var r=t(40);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(86),a=t(23);n.exports=function(n,e){for(var t=0,o=(e=r(e,n)).length;null!=n&&t<o;)n=n[a(e[t++])];return t&&t==o?n:void 0}},function(n,e,t){var r=t(5),a=t(44),o=t(209),i=t(212);n.exports=function(n,e){return r(n)?n:a(n,e)?[n]:o(i(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(145),a=t(150),o=t(221),i=t(229),s=t(238),c=t(103),l=o((function(n){var e=c(n);return s(e)&&(e=void 0),i(r(n,1,s,!0),a(e,2))}));n.exports=l},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,a=r.exec(t);if(!a)return t;var o="",i=0,s=0;for(i=a.index;i<t.length;i++){switch(t.charCodeAt(i)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==i&&(o+=t.substring(s,i)),s=i+1,o+=e}return s!==i?o+t.substring(s,i):o}},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},a=(t(242),t(8)),o=Object(a.a)(r,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=o.exports},function(n,e,t){"use strict";t.r(e);var r={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},a=(t(243),t(8)),o=Object(a.a)(r,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,r){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=o.exports},function(n,e,t){"use strict";var r=t(1),a=t(17),o=t(100),i=t(37);n.exports=function(n,e,t,s){s||(s={});var c=s.enumerable,l=void 0!==s.name?s.name:e;if(r(t)&&o(t,l,s),s.global)c?n[e]=t:i(e,t);else{try{s.unsafe?n[e]&&(c=!0):delete n[e]}catch(n){}c?n[e]=t:a.f(n,e,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return n}},function(n,e,t){"use strict";n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var r=t(136),a=String;n.exports=function(n){if("Symbol"===r(n))throw new TypeError("Cannot convert a Symbol value to a string");return a(n)}},function(n,e,t){"use strict";var r=t(0),a=t(6),o=r.document,i=a(o)&&a(o.createElement);n.exports=function(n){return i?o.createElement(n):{}}},function(n,e,t){"use strict";var r=t(4),a=t(3);n.exports=r&&a((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){"use strict";var r=t(2),a=t(3),o=t(1),i=t(9),s=t(4),c=t(112).CONFIGURABLE,l=t(113),u=t(114),p=u.enforce,d=u.get,f=String,m=Object.defineProperty,h=r("".slice),g=r("".replace),v=r([].join),b=s&&!a((function(){return 8!==m((function(){}),"length",{value:8}).length})),y=String(String).split("String"),k=n.exports=function(n,e,t){"Symbol("===h(f(e),0,7)&&(e="["+g(f(e),/^Symbol\(([^)]*)\).*$/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!i(n,"name")||c&&n.name!==e)&&(s?m(n,"name",{value:e,configurable:!0}):n.name=e),b&&t&&i(t,"arity")&&n.length!==t.arity&&m(n,"length",{value:t.arity});try{t&&i(t,"constructor")&&t.constructor?s&&m(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var r=p(n);return i(r,"source")||(r.source=v(y,"string"==typeof e?e:"")),n};Function.prototype.toString=k((function(){return o(this)&&d(this).source||l(this)}),"toString")},function(n,e,t){"use strict";var r=t(60),a=t(62),o=r("keys");n.exports=function(n){return o[n]||(o[n]=a(n))}},function(n,e,t){"use strict";var r=t(2),a=t(9),o=t(27),i=t(118).indexOf,s=t(49),c=r([].push);n.exports=function(n,e){var t,r=o(n),l=0,u=[];for(t in r)!a(s,t)&&a(r,t)&&c(u,t);for(;e.length>l;)a(r,t=e[l++])&&(~i(u,t)||c(u,t));return u}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(248)},function(n,e,t){"use strict";var r=t(25),a=t(124).left,o=t(125),i=t(59);r({target:"Array",proto:!0,forced:!t(126)&&i>79&&i<83||!o("reduce")},{reduce:function(n){var e=arguments.length;return a(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,o=a&&!r.call({1:2},1);e.f=o?function(n){var e=a(this,n);return!!e&&e.enumerable}:r},function(n,e,t){"use strict";var r=t(33),a=t(6),o=t(55),i=t(109),s=t(111),c=t(30),l=TypeError,u=c("toPrimitive");n.exports=function(n,e){if(!a(n)||o(n))return n;var t,c=i(n,u);if(c){if(void 0===e&&(e="default"),t=r(c,n,e),!a(t)||o(t))return t;throw new l("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(n,e)}},function(n,e,t){"use strict";n.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(n,e,t){"use strict";var r=t(29),a=t(53);n.exports=function(n,e){var t=n[e];return a(t)?void 0:r(t)}},function(n,e,t){"use strict";var r=String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e,t){"use strict";var r=t(33),a=t(1),o=t(6),i=TypeError;n.exports=function(n,e){var t,s;if("string"===e&&a(t=n.toString)&&!o(s=r(t,n)))return s;if(a(t=n.valueOf)&&!o(s=r(t,n)))return s;if("string"!==e&&a(t=n.toString)&&!o(s=r(t,n)))return s;throw new i("Can't convert object to primitive value")}},function(n,e,t){"use strict";var r=t(4),a=t(9),o=Function.prototype,i=r&&Object.getOwnPropertyDescriptor,s=a(o,"name"),c=s&&"something"===function(){}.name,l=s&&(!r||r&&i(o,"name").configurable);n.exports={EXISTS:s,PROPER:c,CONFIGURABLE:l}},function(n,e,t){"use strict";var r=t(2),a=t(1),o=t(36),i=r(Function.toString);a(o.inspectSource)||(o.inspectSource=function(n){return i(n)}),n.exports=o.inspectSource},function(n,e,t){"use strict";var r,a,o,i=t(115),s=t(0),c=t(6),l=t(14),u=t(9),p=t(36),d=t(101),f=t(49),m=s.TypeError,h=s.WeakMap;if(i||p.state){var g=p.state||(p.state=new h);g.get=g.get,g.has=g.has,g.set=g.set,r=function(n,e){if(g.has(n))throw new m("Object already initialized");return e.facade=n,g.set(n,e),e},a=function(n){return g.get(n)||{}},o=function(n){return g.has(n)}}else{var v=d("state");f[v]=!0,r=function(n,e){if(u(n,v))throw new m("Object already initialized");return e.facade=n,l(n,v,e),e},a=function(n){return u(n,v)?n[v]:{}},o=function(n){return u(n,v)}}n.exports={set:r,get:a,has:o,enforce:function(n){return o(n)?a(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!c(e)||(t=a(e)).type!==n)throw new m("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){"use strict";var r=t(0),a=t(1),o=r.WeakMap;n.exports=a(o)&&/native code/.test(String(o))},function(n,e,t){"use strict";var r=t(28),a=t(2),o=t(117),i=t(122),s=t(47),c=a([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=o.f(s(n)),t=i.f;return t?c(e,t(n)):e}},function(n,e,t){"use strict";var r=t(102),a=t(96).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,a)}},function(n,e,t){"use strict";var r=t(27),a=t(119),o=t(32),i=function(n){return function(e,t,i){var s=r(e),c=o(s);if(0===c)return!n&&-1;var l,u=a(i,c);if(n&&t!=t){for(;c>u;)if((l=s[u++])!=l)return!0}else for(;c>u;u++)if((n||u in s)&&s[u]===t)return n||u||0;return!n&&-1}};n.exports={includes:i(!0),indexOf:i(!1)}},function(n,e,t){"use strict";var r=t(65),a=Math.max,o=Math.min;n.exports=function(n,e){var t=r(n);return t<0?a(t+e,0):o(t,e)}},function(n,e,t){"use strict";var r=Math.ceil,a=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?a:r)(e)}},function(n,e,t){"use strict";var r=t(65),a=Math.min;n.exports=function(n){var e=r(n);return e>0?a(e,9007199254740991):0}},function(n,e,t){"use strict";e.f=Object.getOwnPropertySymbols},function(n,e,t){"use strict";var r=t(3),a=t(1),o=/#|\.prototype\./,i=function(n,e){var t=c[s(n)];return t===u||t!==l&&(a(e)?r(e):!!e)},s=i.normalize=function(n){return String(n).replace(o,".").toLowerCase()},c=i.data={},l=i.NATIVE="N",u=i.POLYFILL="P";n.exports=i},function(n,e,t){"use strict";var r=t(29),a=t(31),o=t(48),i=t(32),s=TypeError,c="Reduce of empty array with no initial value",l=function(n){return function(e,t,l,u){var p=a(e),d=o(p),f=i(p);if(r(t),0===f&&l<2)throw new s(c);var m=n?f-1:0,h=n?-1:1;if(l<2)for(;;){if(m in d){u=d[m],m+=h;break}if(m+=h,n?m<0:f<=m)throw new s(c)}for(;n?m>=0:f>m;m+=h)m in d&&(u=t(u,d[m],m,p));return u}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){"use strict";var r=t(0),a=t(18);n.exports="process"===a(r.process)},function(n,e,t){"use strict";var r=t(25),a=t(0),o=t(128),i=t(129),s=a.WebAssembly,c=7!==new Error("e",{cause:7}).cause,l=function(n,e){var t={};t[n]=i(n,e,c),r({global:!0,constructor:!0,arity:1,forced:c},t)},u=function(n,e){if(s&&s[n]){var t={};t[n]=i("WebAssembly."+n,e,c),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:c},t)}};l("Error",(function(n){return function(e){return o(n,this,arguments)}})),l("EvalError",(function(n){return function(e){return o(n,this,arguments)}})),l("RangeError",(function(n){return function(e){return o(n,this,arguments)}})),l("ReferenceError",(function(n){return function(e){return o(n,this,arguments)}})),l("SyntaxError",(function(n){return function(e){return o(n,this,arguments)}})),l("TypeError",(function(n){return function(e){return o(n,this,arguments)}})),l("URIError",(function(n){return function(e){return o(n,this,arguments)}})),u("CompileError",(function(n){return function(e){return o(n,this,arguments)}})),u("LinkError",(function(n){return function(e){return o(n,this,arguments)}})),u("RuntimeError",(function(n){return function(e){return o(n,this,arguments)}}))},function(n,e,t){"use strict";var r=t(26),a=Function.prototype,o=a.apply,i=a.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?i.bind(o):function(){return i.apply(o,arguments)})},function(n,e,t){"use strict";var r=t(28),a=t(9),o=t(14),i=t(56),s=t(66),c=t(64),l=t(133),u=t(134),p=t(135),d=t(138),f=t(139),m=t(4),h=t(61);n.exports=function(n,e,t,g){var v=g?2:1,b=n.split("."),y=b[b.length-1],k=r.apply(null,b);if(k){var x=k.prototype;if(!h&&a(x,"cause")&&delete x.cause,!t)return k;var _=r("Error"),w=e((function(n,e){var t=p(g?e:n,void 0),r=g?new k(n):new k;return void 0!==t&&o(r,"message",t),f(r,w,r.stack,2),this&&i(x,this)&&u(r,this,w),arguments.length>v&&d(r,arguments[v]),r}));if(w.prototype=x,"Error"!==y?s?s(w,_):c(w,_,{name:!0}):m&&"stackTraceLimit"in k&&(l(w,k,"stackTraceLimit"),l(w,k,"prepareStackTrace")),c(w,k),!h)try{x.name!==y&&o(x,"name",y),x.constructor=w}catch(n){}return w}}},function(n,e,t){"use strict";var r=t(2),a=t(29);n.exports=function(n,e,t){try{return r(a(Object.getOwnPropertyDescriptor(n,e)[t]))}catch(n){}}},function(n,e,t){"use strict";var r=t(132),a=String,o=TypeError;n.exports=function(n){if(r(n))return n;throw new o("Can't set "+a(n)+" as a prototype")}},function(n,e,t){"use strict";var r=t(6);n.exports=function(n){return r(n)||null===n}},function(n,e,t){"use strict";var r=t(17).f;n.exports=function(n,e,t){t in n||r(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){"use strict";var r=t(1),a=t(6),o=t(66);n.exports=function(n,e,t){var i,s;return o&&r(i=e.constructor)&&i!==t&&a(s=i.prototype)&&s!==t.prototype&&o(n,s),n}},function(n,e,t){"use strict";var r=t(97);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){"use strict";var r=t(137),a=t(1),o=t(18),i=t(30)("toStringTag"),s=Object,c="Arguments"===o(function(){return arguments}());n.exports=r?o:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=s(n),i))?t:c?o(e):"Object"===(r=o(e))&&a(e.callee)?"Arguments":r}},function(n,e,t){"use strict";var r={};r[t(30)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){"use strict";var r=t(6),a=t(14);n.exports=function(n,e){r(e)&&"cause"in e&&a(n,"cause",e.cause)}},function(n,e,t){"use strict";var r=t(14),a=t(140),o=t(141),i=Error.captureStackTrace;n.exports=function(n,e,t,s){o&&(i?i(n,e):r(n,"stack",a(t,s)))}},function(n,e,t){"use strict";var r=t(2),a=Error,o=r("".replace),i=String(new a("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,c=s.test(i);n.exports=function(n,e){if(c&&"string"==typeof n&&!a.prepareStackTrace)for(;e--;)n=o(n,s,"");return n}},function(n,e,t){"use strict";var r=t(3),a=t(34);n.exports=!r((function(){var n=new Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",a(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var r=t(4),a=t(143),o=TypeError,i=Object.getOwnPropertyDescriptor,s=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(n){return n instanceof TypeError}}();n.exports=s?function(n,e){if(a(n)&&!i(n,"length").writable)throw new o("Cannot set read only .length");return n.length=e}:function(n,e){return n.length=e}},function(n,e,t){"use strict";var r=t(18);n.exports=Array.isArray||function(n){return"Array"===r(n)}},function(n,e,t){"use strict";var r=TypeError;n.exports=function(n){if(n>9007199254740991)throw r("Maximum allowed index exceeded");return n}},function(n,e,t){var r=t(67),a=t(146);n.exports=function n(e,t,o,i,s){var c=-1,l=e.length;for(o||(o=a),s||(s=[]);++c<l;){var u=e[c];t>0&&o(u)?t>1?n(u,t-1,o,i,s):r(s,u):i||(s[s.length]=u)}return s}},function(n,e,t){var r=t(15),a=t(38),o=t(5),i=r?r.isConcatSpreadable:void 0;n.exports=function(n){return o(n)||a(n)||!!(i&&n&&n[i])}},function(n,e,t){var r=t(13),a=t(12);n.exports=function(n){return a(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(15),a=Object.prototype,o=a.hasOwnProperty,i=a.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=o.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var a=i.call(n);return r&&(e?n[s]=t:delete n[s]),a}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(151),a=t(207),o=t(46),i=t(5),s=t(218);n.exports=function(n){return"function"==typeof n?n:null==n?o:"object"==typeof n?i(n)?a(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(152),a=t(206),o=t(84);n.exports=function(n){var e=a(n);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(69),a=t(73);n.exports=function(n,e,t,o){var i=t.length,s=i,c=!o;if(null==n)return!s;for(n=Object(n);i--;){var l=t[i];if(c&&l[2]?l[1]!==n[l[0]]:!(l[0]in n))return!1}for(;++i<s;){var u=(l=t[i])[0],p=n[u],d=l[1];if(c&&l[2]){if(void 0===p&&!(u in n))return!1}else{var f=new r;if(o)var m=o(p,d,u,n,e,f);if(!(void 0===m?a(d,p,3,o,f):m))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(20),a=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():a.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(20);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(20);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(20);n.exports=function(n,e){var t=this.__data__,a=r(t,n);return a<0?(++this.size,t.push([n,e])):t[a][1]=e,this}},function(n,e,t){var r=t(19);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(19),a=t(39),o=t(41);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var i=t.__data__;if(!a||i.length<199)return i.push([n,e]),this.size=++t.size,this;t=this.__data__=new o(i)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(71),a=t(164),o=t(40),i=t(72),s=/^\[object .+?Constructor\]$/,c=Function.prototype,l=Object.prototype,u=c.toString,p=l.hasOwnProperty,d=RegExp("^"+u.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!o(n)||a(n))&&(r(n)?d:s).test(i(n))}},function(n,e,t){var r,a=t(165),o=(r=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!o&&o in n}},function(n,e,t){var r=t(7)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(168),a=t(19),o=t(39);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||a),string:new r}}},function(n,e,t){var r=t(169),a=t(170),o=t(171),i=t(172),s=t(173);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=o,c.prototype.has=i,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(21);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(21),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return a.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(21),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:a.call(e,n)}},function(n,e,t){var r=t(21);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(22);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(22);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(22);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(22);n.exports=function(n,e){var t=r(this,n),a=t.size;return t.set(n,e),this.size+=t.size==a?0:1,this}},function(n,e,t){var r=t(69),a=t(74),o=t(183),i=t(186),s=t(202),c=t(5),l=t(78),u=t(80),p="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,f,m,h){var g=c(n),v=c(e),b=g?"[object Array]":s(n),y=v?"[object Array]":s(e),k=(b="[object Arguments]"==b?p:b)==p,x=(y="[object Arguments]"==y?p:y)==p,_=b==y;if(_&&l(n)){if(!l(e))return!1;g=!0,k=!1}if(_&&!k)return h||(h=new r),g||u(n)?a(n,e,t,f,m,h):o(n,e,b,t,f,m,h);if(!(1&t)){var w=k&&d.call(n,"__wrapped__"),E=x&&d.call(e,"__wrapped__");if(w||E){var T=w?n.value():n,C=E?e.value():e;return h||(h=new r),m(T,C,t,f,h)}}return!!_&&(h||(h=new r),i(n,e,t,f,m,h))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(15),a=t(184),o=t(70),i=t(74),s=t(185),c=t(42),l=r?r.prototype:void 0,u=l?l.valueOf:void 0;n.exports=function(n,e,t,r,l,p,d){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!p(new a(n),new a(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var f=s;case"[object Set]":var m=1&r;if(f||(f=c),n.size!=e.size&&!m)return!1;var h=d.get(n);if(h)return h==e;r|=2,d.set(n,e);var g=i(f(n),f(e),r,l,p,d);return d.delete(n),g;case"[object Symbol]":if(u)return u.call(n)==u.call(e)}return!1}},function(n,e,t){var r=t(7).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(187),a=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,o,i,s){var c=1&t,l=r(n),u=l.length;if(u!=r(e).length&&!c)return!1;for(var p=u;p--;){var d=l[p];if(!(c?d in e:a.call(e,d)))return!1}var f=s.get(n),m=s.get(e);if(f&&m)return f==e&&m==n;var h=!0;s.set(n,e),s.set(e,n);for(var g=c;++p<u;){var v=n[d=l[p]],b=e[d];if(o)var y=c?o(b,v,d,e,n,s):o(v,b,d,n,e,s);if(!(void 0===y?v===b||i(v,b,t,o,s):y)){h=!1;break}g||(g="constructor"==d)}if(h&&!g){var k=n.constructor,x=e.constructor;k==x||!("constructor"in n)||!("constructor"in e)||"function"==typeof k&&k instanceof k&&"function"==typeof x&&x instanceof x||(h=!1)}return s.delete(n),s.delete(e),h}},function(n,e,t){var r=t(188),a=t(189),o=t(77);n.exports=function(n){return r(n,o,a)}},function(n,e,t){var r=t(67),a=t(5);n.exports=function(n,e,t){var o=e(n);return a(n)?o:r(o,t(n))}},function(n,e,t){var r=t(190),a=t(191),o=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,s=i?function(n){return null==n?[]:(n=Object(n),r(i(n),(function(e){return o.call(n,e)})))}:a;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=0,o=[];++t<r;){var i=n[t];e(i,t,n)&&(o[a++]=i)}return o}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(193),a=t(38),o=t(5),i=t(78),s=t(79),c=t(80),l=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=o(n),u=!t&&a(n),p=!t&&!u&&i(n),d=!t&&!u&&!p&&c(n),f=t||u||p||d,m=f?r(n.length,String):[],h=m.length;for(var g in n)!e&&!l.call(n,g)||f&&("length"==g||p&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||s(g,h))||m.push(g);return m}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(13),a=t(43),o=t(12),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,n.exports=function(n){return o(n)&&a(n.length)&&!!i[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(68),a=e&&!e.nodeType&&e,o=a&&"object"==typeof n&&n&&!n.nodeType&&n,i=o&&o.exports===a&&r.process,s=function(){try{var n=o&&o.require&&o.require("util").types;return n||i&&i.binding&&i.binding("util")}catch(n){}}();n.exports=s}).call(this,t(50)(n))},function(n,e,t){var r=t(199),a=t(200),o=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return a(n);var e=[];for(var t in Object(n))o.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(201)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(203),a=t(39),o=t(204),i=t(82),s=t(205),c=t(13),l=t(72),u=l(r),p=l(a),d=l(o),f=l(i),m=l(s),h=c;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||a&&"[object Map]"!=h(new a)||o&&"[object Promise]"!=h(o.resolve())||i&&"[object Set]"!=h(new i)||s&&"[object WeakMap]"!=h(new s))&&(h=function(n){var e=c(n),t="[object Object]"==e?n.constructor:void 0,r=t?l(t):"";if(r)switch(r){case u:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case f:return"[object Set]";case m:return"[object WeakMap]"}return e}),n.exports=h},function(n,e,t){var r=t(10)(t(7),"DataView");n.exports=r},function(n,e,t){var r=t(10)(t(7),"Promise");n.exports=r},function(n,e,t){var r=t(10)(t(7),"WeakMap");n.exports=r},function(n,e,t){var r=t(83),a=t(77);n.exports=function(n){for(var e=a(n),t=e.length;t--;){var o=e[t],i=n[o];e[t]=[o,i,r(i)]}return e}},function(n,e,t){var r=t(73),a=t(208),o=t(215),i=t(44),s=t(83),c=t(84),l=t(23);n.exports=function(n,e){return i(n)&&s(e)?c(l(n),e):function(t){var i=a(t,n);return void 0===i&&i===e?o(t,n):r(e,i,3)}}},function(n,e,t){var r=t(85);n.exports=function(n,e,t){var a=null==n?void 0:r(n,e);return void 0===a?t:a}},function(n,e,t){var r=t(210),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,i=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(a,(function(n,t,r,a){e.push(r?a.replace(o,"$1"):t||n)})),e}));n.exports=i},function(n,e,t){var r=t(211);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(41);function a(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,a=e?e.apply(this,r):r[0],o=t.cache;if(o.has(a))return o.get(a);var i=n.apply(this,r);return t.cache=o.set(a,i)||o,i};return t.cache=new(a.Cache||r),t}a.Cache=r,n.exports=a},function(n,e,t){var r=t(213);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(15),a=t(214),o=t(5),i=t(45),s=r?r.prototype:void 0,c=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(o(e))return a(e,n)+"";if(i(e))return c?c.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=Array(r);++t<r;)a[t]=e(n[t],t,n);return a}},function(n,e,t){var r=t(216),a=t(217);n.exports=function(n,e){return null!=n&&a(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(86),a=t(38),o=t(5),i=t(79),s=t(43),c=t(23);n.exports=function(n,e,t){for(var l=-1,u=(e=r(e,n)).length,p=!1;++l<u;){var d=c(e[l]);if(!(p=null!=n&&t(n,d)))break;n=n[d]}return p||++l!=u?p:!!(u=null==n?0:n.length)&&s(u)&&i(d,u)&&(o(n)||a(n))}},function(n,e,t){var r=t(219),a=t(220),o=t(44),i=t(23);n.exports=function(n){return o(n)?r(i(n)):a(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(85);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(46),a=t(222),o=t(224);n.exports=function(n,e){return o(a(n,e,r),n+"")}},function(n,e,t){var r=t(223),a=Math.max;n.exports=function(n,e,t){return e=a(void 0===e?n.length-1:e,0),function(){for(var o=arguments,i=-1,s=a(o.length-e,0),c=Array(s);++i<s;)c[i]=o[e+i];i=-1;for(var l=Array(e+1);++i<e;)l[i]=o[i];return l[e]=t(c),r(n,this,l)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(225),a=t(228)(r);n.exports=a},function(n,e,t){var r=t(226),a=t(227),o=t(46),i=a?function(n,e){return a(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:o;n.exports=i},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(10),a=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=a},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var a=t(),o=16-(a-r);if(r=a,o>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(75),a=t(230),o=t(235),i=t(76),s=t(236),c=t(42);n.exports=function(n,e,t){var l=-1,u=a,p=n.length,d=!0,f=[],m=f;if(t)d=!1,u=o;else if(p>=200){var h=e?null:s(n);if(h)return c(h);d=!1,u=i,m=new r}else m=e?[]:f;n:for(;++l<p;){var g=n[l],v=e?e(g):g;if(g=t||0!==g?g:0,d&&v==v){for(var b=m.length;b--;)if(m[b]===v)continue n;e&&m.push(v),f.push(g)}else u(m,v,t)||(m!==f&&m.push(v),f.push(g))}return f}},function(n,e,t){var r=t(231);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(232),a=t(233),o=t(234);n.exports=function(n,e,t){return e==e?o(n,e,t):r(n,a,t)}},function(n,e){n.exports=function(n,e,t,r){for(var a=n.length,o=t+(r?1:-1);r?o--:++o<a;)if(e(n[o],o,n))return o;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,a=n.length;++r<a;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,a=null==n?0:n.length;++r<a;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(82),a=t(237),o=t(42),i=r&&1/o(new r([,-0]))[1]==1/0?function(n){return new r(n)}:a;n.exports=i},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(81),a=t(12);n.exports=function(n){return a(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e){},function(n,e,t){"use strict";t(87)},function(n,e,t){"use strict";t(88)},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(89)},function(n,e,t){"use strict";t(90)},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.7.16
 * (c) 2014-2023 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({}),a=Array.isArray;function o(n){return null==n}function i(n){return null!=n}function s(n){return!0===n}function c(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function l(n){return"function"==typeof n}function u(n){return null!==n&&"object"==typeof n}var p=Object.prototype.toString;function d(n){return"[object Object]"===p.call(n)}function f(n){return"[object RegExp]"===p.call(n)}function m(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function h(n){return i(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function g(n){return null==n?"":Array.isArray(n)||d(n)&&n.toString===p?JSON.stringify(n,v,2):String(n)}function v(n,e){return e&&e.__v_isRef?e.value:e}function b(n){var e=parseFloat(n);return isNaN(e)?n:e}function y(n,e){for(var t=Object.create(null),r=n.split(","),a=0;a<r.length;a++)t[r[a]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}y("slot,component",!0);var k=y("key,ref,slot,slot-scope,is");function x(n,e){var t=n.length;if(t){if(e===n[t-1])return void(n.length=t-1);var r=n.indexOf(e);if(r>-1)return n.splice(r,1)}}var _=Object.prototype.hasOwnProperty;function w(n,e){return _.call(n,e)}function E(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var T=/-(\w)/g,C=E((function(n){return n.replace(T,(function(n,e){return e?e.toUpperCase():""}))})),A=E((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),O=/\B([A-Z])/g,j=E((function(n){return n.replace(O,"-$1").toLowerCase()}));var S=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function P(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function I(n,e){for(var t in e)n[t]=e[t];return n}function z(n){for(var e={},t=0;t<n.length;t++)n[t]&&I(e,n[t]);return e}function L(n,e,t){}var M=function(n,e,t){return!1},N=function(n){return n};function D(n,e){if(n===e)return!0;var t=u(n),r=u(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var a=Array.isArray(n),o=Array.isArray(e);if(a&&o)return n.length===e.length&&n.every((function(n,t){return D(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(a||o)return!1;var i=Object.keys(n),s=Object.keys(e);return i.length===s.length&&i.every((function(t){return D(n[t],e[t])}))}catch(n){return!1}}function B(n,e){for(var t=0;t<n.length;t++)if(D(n[t],e))return t;return-1}function U(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function $(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var R=["component","directive","filter"],G=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],q={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:M,isReservedAttr:M,isUnknownElement:M,getTagNamespace:L,parsePlatformTagName:N,mustUseProp:M,async:!0,_lifecycleHooks:G},F=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function V(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var W=new RegExp("[^".concat(F.source,".$_\\d]"));var Y="__proto__"in{},Q="undefined"!=typeof window,J=Q&&window.navigator.userAgent.toLowerCase(),K=J&&/msie|trident/.test(J),X=J&&J.indexOf("msie 9.0")>0,Z=J&&J.indexOf("edge/")>0;J&&J.indexOf("android");var nn=J&&/iphone|ipad|ipod|ios/.test(J);J&&/chrome\/\d+/.test(J),J&&/phantomjs/.test(J);var en,tn=J&&J.match(/firefox\/(\d+)/),rn={}.watch,an=!1;if(Q)try{var on={};Object.defineProperty(on,"passive",{get:function(){an=!0}}),window.addEventListener("test-passive",null,on)}catch(n){}var sn=function(){return void 0===en&&(en=!Q&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),en},cn=Q&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ln(n){return"function"==typeof n&&/native code/.test(n.toString())}var un,pn="undefined"!=typeof Symbol&&ln(Symbol)&&"undefined"!=typeof Reflect&&ln(Reflect.ownKeys);un="undefined"!=typeof Set&&ln(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var dn=null;function fn(n){void 0===n&&(n=null),n||dn&&dn._scope.off(),dn=n,n&&n._scope.on()}var mn=function(){function n(n,e,t,r,a,o,i,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=a,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),hn=function(n){void 0===n&&(n="");var e=new mn;return e.text=n,e.isComment=!0,e};function gn(n){return new mn(void 0,void 0,void 0,String(n))}function vn(n){var e=new mn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}"function"==typeof SuppressedError&&SuppressedError;var bn=0,yn=[],kn=function(){function n(){this._pending=!1,this.id=bn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){this.subs[this.subs.indexOf(n)]=null,this._pending||(this._pending=!0,yn.push(this))},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.filter((function(n){return n}));for(var t=0,r=e.length;t<r;t++){0,e[t].update()}},n}();kn.target=null;var xn=[];function _n(n){xn.push(n),kn.target=n}function wn(){xn.pop(),kn.target=xn[xn.length-1]}var En=Array.prototype,Tn=Object.create(En);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=En[n];V(Tn,n,(function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var a,o=e.apply(this,t),i=this.__ob__;switch(n){case"push":case"unshift":a=t;break;case"splice":a=t.slice(2)}return a&&i.observeArray(a),i.dep.notify(),o}))}));var Cn=Object.getOwnPropertyNames(Tn),An={},On=!0;function jn(n){On=n}var Sn={notify:L,depend:L,addSub:L,removeSub:L},Pn=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?Sn:new kn,this.vmCount=0,V(n,"__ob__",this),a(n)){if(!t)if(Y)n.__proto__=Tn;else for(var r=0,o=Cn.length;r<o;r++){V(n,s=Cn[r],Tn[s])}e||this.observeArray(n)}else{var i=Object.keys(n);for(r=0;r<i.length;r++){var s;zn(n,s=i[r],An,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)In(n[e],!1,this.mock)},n}();function In(n,e,t){return n&&w(n,"__ob__")&&n.__ob__ instanceof Pn?n.__ob__:!On||!t&&sn()||!a(n)&&!d(n)||!Object.isExtensible(n)||n.__v_skip||$n(n)||n instanceof mn?void 0:new Pn(n,e,t)}function zn(n,e,t,r,o,i,s){void 0===s&&(s=!1);var c=new kn,l=Object.getOwnPropertyDescriptor(n,e);if(!l||!1!==l.configurable){var u=l&&l.get,p=l&&l.set;u&&!p||t!==An&&2!==arguments.length||(t=n[e]);var d=o?t&&t.__ob__:In(t,!1,i);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=u?u.call(n):t;return kn.target&&(c.depend(),d&&(d.dep.depend(),a(e)&&Nn(e))),$n(e)&&!o?e.value:e},set:function(e){var r=u?u.call(n):t;if($(r,e)){if(p)p.call(n,e);else{if(u)return;if(!o&&$n(r)&&!$n(e))return void(r.value=e);t=e}d=o?e&&e.__ob__:In(e,!1,i),c.notify()}}}),c}}function Ln(n,e,t){if(!Un(n)){var r=n.__ob__;return a(n)&&m(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),r&&!r.shallow&&r.mock&&In(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||r&&r.vmCount?t:r?(zn(r.value,e,t,void 0,r.shallow,r.mock),r.dep.notify(),t):(n[e]=t,t)}}function Mn(n,e){if(a(n)&&m(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||Un(n)||w(n,e)&&(delete n[e],t&&t.dep.notify())}}function Nn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),a(e)&&Nn(e)}function Dn(n){return Bn(n,!0),V(n,"__v_isShallow",!0),n}function Bn(n,e){if(!Un(n)){In(n,e,sn());0}}function Un(n){return!(!n||!n.__v_isReadonly)}function $n(n){return!(!n||!0!==n.__v_isRef)}function Rn(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if($n(n))return n.value;var r=n&&n.__ob__;return r&&r.dep.depend(),n},set:function(n){var r=e[t];$n(r)&&!$n(n)?r.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Gn;var qn=function(){function n(n){void 0===n&&(n=!1),this.detached=n,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Gn,!n&&Gn&&(this.index=(Gn.scopes||(Gn.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=Gn;try{return Gn=this,n()}finally{Gn=e}}else 0},n.prototype.on=function(){Gn=this},n.prototype.off=function(){Gn=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!n){var r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.parent=void 0,this.active=!1}},n}();function Fn(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Hn=E((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function Vn(n,e){function t(){var n=t.fns;if(!a(n))return Oe(n,null,arguments,e,"v-on handler");for(var r=n.slice(),o=0;o<r.length;o++)Oe(r[o],null,arguments,e,"v-on handler")}return t.fns=n,t}function Wn(n,e,t,r,a,i){var c,l,u,p;for(c in n)l=n[c],u=e[c],p=Hn(c),o(l)||(o(u)?(o(l.fns)&&(l=n[c]=Vn(l,i)),s(p.once)&&(l=n[c]=a(p.name,l,p.capture)),t(p.name,l,p.capture,p.passive,p.params)):l!==u&&(u.fns=l,n[c]=u));for(c in e)o(n[c])&&r((p=Hn(c)).name,e[c],p.capture)}function Yn(n,e,t){var r;n instanceof mn&&(n=n.data.hook||(n.data.hook={}));var a=n[e];function c(){t.apply(this,arguments),x(r.fns,c)}o(a)?r=Vn([c]):i(a.fns)&&s(a.merged)?(r=a).fns.push(c):r=Vn([a,c]),r.merged=!0,n[e]=r}function Qn(n,e,t,r,a){if(i(e)){if(w(e,t))return n[t]=e[t],a||delete e[t],!0;if(w(e,r))return n[t]=e[r],a||delete e[r],!0}return!1}function Jn(n){return c(n)?[gn(n)]:a(n)?function n(e,t){var r,l,u,p,d=[];for(r=0;r<e.length;r++)o(l=e[r])||"boolean"==typeof l||(u=d.length-1,p=d[u],a(l)?l.length>0&&(Kn((l=n(l,"".concat(t||"","_").concat(r)))[0])&&Kn(p)&&(d[u]=gn(p.text+l[0].text),l.shift()),d.push.apply(d,l)):c(l)?Kn(p)?d[u]=gn(p.text+l):""!==l&&d.push(gn(l)):Kn(l)&&Kn(p)?d[u]=gn(p.text+l.text):(s(e._isVList)&&i(l.tag)&&o(l.key)&&i(t)&&(l.key="__vlist".concat(t,"_").concat(r,"__")),d.push(l)));return d}(n):void 0}function Kn(n){return i(n)&&i(n.text)&&!1===n.isComment}function Xn(n,e){var t,r,o,s,c=null;if(a(n)||"string"==typeof n)for(c=new Array(n.length),t=0,r=n.length;t<r;t++)c[t]=e(n[t],t);else if("number"==typeof n)for(c=new Array(n),t=0;t<n;t++)c[t]=e(t+1,t);else if(u(n))if(pn&&n[Symbol.iterator]){c=[];for(var l=n[Symbol.iterator](),p=l.next();!p.done;)c.push(e(p.value,c.length)),p=l.next()}else for(o=Object.keys(n),c=new Array(o.length),t=0,r=o.length;t<r;t++)s=o[t],c[t]=e(n[s],s,t);return i(c)||(c=[]),c._isVList=!0,c}function Zn(n,e,t,r){var a,o=this.$scopedSlots[n];o?(t=t||{},r&&(t=I(I({},r),t)),a=o(t)||(l(e)?e():e)):a=this.$slots[n]||(l(e)?e():e);var i=t&&t.slot;return i?this.$createElement("template",{slot:i},a):a}function ne(n){return Pt(this.$options,"filters",n,!0)||N}function ee(n,e){return a(n)?-1===n.indexOf(e):n!==e}function te(n,e,t,r,a){var o=q.keyCodes[e]||t;return a&&r&&!q.keyCodes[e]?ee(a,r):o?ee(o,n):r?j(r)!==e:void 0===n}function re(n,e,t,r,o){if(t)if(u(t)){a(t)&&(t=z(t));var i=void 0,s=function(a){if("class"===a||"style"===a||k(a))i=n;else{var s=n.attrs&&n.attrs.type;i=r||q.mustUseProp(e,s,a)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var c=C(a),l=j(a);c in i||l in i||(i[a]=t[a],o&&((n.on||(n.on={}))["update:".concat(a)]=function(n){t[a]=n}))};for(var c in t)s(c)}else;return n}function ae(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||ie(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),r}function oe(n,e,t){return ie(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function ie(n,e,t){if(a(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&se(n[r],"".concat(e,"_").concat(r),t);else se(n,e,t)}function se(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function ce(n,e){if(e)if(d(e)){var t=n.on=n.on?I({},n.on):{};for(var r in e){var a=t[r],o=e[r];t[r]=a?[].concat(a,o):o}}else;return n}function le(n,e,t,r){e=e||{$stable:!t};for(var o=0;o<n.length;o++){var i=n[o];a(i)?le(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function ue(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function pe(n,e){return"string"==typeof n?e+n:n}function de(n){n._o=oe,n._n=b,n._s=g,n._l=Xn,n._t=Zn,n._q=D,n._i=B,n._m=ae,n._f=ne,n._k=te,n._b=re,n._v=gn,n._e=hn,n._u=le,n._g=ce,n._d=ue,n._p=pe}function fe(n,e){if(!n||!n.length)return{};for(var t={},r=0,a=n.length;r<a;r++){var o=n[r],i=o.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,o.context!==e&&o.fnContext!==e||!i||null==i.slot)(t.default||(t.default=[])).push(o);else{var s=i.slot,c=t[s]||(t[s]=[]);"template"===o.tag?c.push.apply(c,o.children||[]):c.push(o)}}for(var l in t)t[l].every(me)&&delete t[l];return t}function me(n){return n.isComment&&!n.asyncFactory||" "===n.text}function he(n){return n.isComment&&n.asyncFactory}function ge(n,e,t,a){var o,i=Object.keys(t).length>0,s=e?!!e.$stable:!i,c=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(s&&a&&a!==r&&c===a.$key&&!i&&!a.$hasNormal)return a;for(var l in o={},e)e[l]&&"$"!==l[0]&&(o[l]=ve(n,t,l,e[l]))}else o={};for(var u in t)u in o||(o[u]=be(t,u));return e&&Object.isExtensible(e)&&(e._normalized=o),V(o,"$stable",s),V(o,"$key",c),V(o,"$hasNormal",i),o}function ve(n,e,t,r){var o=function(){var e=dn;fn(n);var t=arguments.length?r.apply(null,arguments):r({}),o=(t=t&&"object"==typeof t&&!a(t)?[t]:Jn(t))&&t[0];return fn(e),t&&(!o||1===t.length&&o.isComment&&!he(o))?void 0:t};return r.proxy&&Object.defineProperty(e,t,{get:o,enumerable:!0,configurable:!0}),o}function be(n,e){return function(){return n[e]}}function ye(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};V(e,"_v_attr_proxy",!0),ke(e,n.$attrs,r,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||ke(n._listenersProxy={},n.$listeners,r,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||_e(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:S(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return Rn(n,e,t)}))}}}function ke(n,e,t,r,a){var o=!1;for(var i in e)i in n?e[i]!==t[i]&&(o=!0):(o=!0,xe(n,i,r,a));for(var i in n)i in e||(o=!0,delete n[i]);return o}function xe(n,e,t,r){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[r][e]}})}function _e(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var we=null;function Ee(n,e){return(n.__esModule||pn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),u(n)?e.extend(n):n}function Te(n){if(a(n))for(var e=0;e<n.length;e++){var t=n[e];if(i(t)&&(i(t.componentOptions)||he(t)))return t}}function Ce(n,e,t,r,p,d){return(a(t)||c(t))&&(p=r,r=t,t=void 0),s(d)&&(p=2),function(n,e,t,r,c){if(i(t)&&i(t.__ob__))return hn();i(t)&&i(t.is)&&(e=t.is);if(!e)return hn();0;a(r)&&l(r[0])&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===c?r=Jn(r):1===c&&(r=function(n){for(var e=0;e<n.length;e++)if(a(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var p,d;if("string"==typeof e){var f=void 0;d=n.$vnode&&n.$vnode.ns||q.getTagNamespace(e),p=q.isReservedTag(e)?new mn(q.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!i(f=Pt(n.$options,"components",e))?new mn(e,t,r,void 0,void 0,n):xt(f,t,n,r,e)}else p=xt(e,t,n,r);return a(p)?p:i(p)?(i(d)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(i(e.children))for(var a=0,c=e.children.length;a<c;a++){var l=e.children[a];i(l.tag)&&(o(l.ns)||s(r)&&"svg"!==l.tag)&&n(l,t,r)}}(p,d),i(t)&&function(n){u(n.style)&&qe(n.style);u(n.class)&&qe(n.class)}(t),p):hn()}(n,e,t,r,p)}function Ae(n,e,t){_n();try{if(e)for(var r=e;r=r.$parent;){var a=r.$options.errorCaptured;if(a)for(var o=0;o<a.length;o++)try{if(!1===a[o].call(r,n,e,t))return}catch(n){je(n,r,"errorCaptured hook")}}je(n,e,t)}finally{wn()}}function Oe(n,e,t,r,a){var o;try{(o=t?n.apply(e,t):n.call(e))&&!o._isVue&&h(o)&&!o._handled&&(o.catch((function(n){return Ae(n,r,a+" (Promise/async)")})),o._handled=!0)}catch(n){Ae(n,r,a)}return o}function je(n,e,t){if(q.errorHandler)try{return q.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Se(e,null,"config.errorHandler")}Se(n,e,t)}function Se(n,e,t){if(!Q||"undefined"==typeof console)throw n;console.error(n)}var Pe,Ie=!1,ze=[],Le=!1;function Me(){Le=!1;var n=ze.slice(0);ze.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&ln(Promise)){var Ne=Promise.resolve();Pe=function(){Ne.then(Me),nn&&setTimeout(L)},Ie=!0}else if(K||"undefined"==typeof MutationObserver||!ln(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Pe="undefined"!=typeof setImmediate&&ln(setImmediate)?function(){setImmediate(Me)}:function(){setTimeout(Me,0)};else{var De=1,Be=new MutationObserver(Me),Ue=document.createTextNode(String(De));Be.observe(Ue,{characterData:!0}),Pe=function(){De=(De+1)%2,Ue.data=String(De)},Ie=!0}function $e(n,e){var t;if(ze.push((function(){if(n)try{n.call(e)}catch(n){Ae(n,e,"nextTick")}else t&&t(e)})),Le||(Le=!0,Pe()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function Re(n){return function(e,t){if(void 0===t&&(t=dn),t)return function(n,e,t){var r=n.$options;r[e]=At(r[e],t)}(t,n,e)}}Re("beforeMount"),Re("mounted"),Re("beforeUpdate"),Re("updated"),Re("beforeDestroy"),Re("destroyed"),Re("activated"),Re("deactivated"),Re("serverPrefetch"),Re("renderTracked"),Re("renderTriggered"),Re("errorCaptured");var Ge=new un;function qe(n){return function n(e,t){var r,o,i=a(e);if(!i&&!u(e)||e.__v_skip||Object.isFrozen(e)||e instanceof mn)return;if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(i)for(r=e.length;r--;)n(e[r],t);else if($n(e))n(e.value,t);else for(o=Object.keys(e),r=o.length;r--;)n(e[o[r]],t)}(n,Ge),Ge.clear(),n}var Fe,He=0,Ve=function(){function n(n,e,t,r,a){var o,i;o=this,void 0===(i=Gn&&!Gn._vm?Gn:n?n._scope:void 0)&&(i=Gn),i&&i.active&&i.effects.push(o),(this.vm=n)&&a&&(n._watcher=this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++He,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new un,this.newDepIds=new un,this.expression="",l(e)?this.getter=e:(this.getter=function(n){if(!W.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=L)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;_n(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Ae(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&qe(n),wn(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():ft(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||u(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Oe(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&x(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function We(n,e){Fe.$on(n,e)}function Ye(n,e){Fe.$off(n,e)}function Qe(n,e){var t=Fe;return function r(){var a=e.apply(null,arguments);null!==a&&t.$off(n,r)}}function Je(n,e,t){Fe=n,Wn(e,t||{},We,Ye,Qe,n),Fe=void 0}var Ke=null;function Xe(n){var e=Ke;return Ke=n,function(){Ke=e}}function Ze(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function nt(n,e){if(e){if(n._directInactive=!1,Ze(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)nt(n.$children[t]);et(n,"activated")}}function et(n,e,t,r){void 0===r&&(r=!0),_n();var a=dn,o=Gn;r&&fn(n);var i=n.$options[e],s="".concat(e," hook");if(i)for(var c=0,l=i.length;c<l;c++)Oe(i[c],n,t||null,n,s);n._hasHookEvent&&n.$emit("hook:"+e),r&&(fn(a),o&&o.on()),wn()}var tt=[],rt=[],at={},ot=!1,it=!1,st=0;var ct=0,lt=Date.now;if(Q&&!K){var ut=window.performance;ut&&"function"==typeof ut.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return ut.now()})}var pt=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function dt(){var n,e;for(ct=lt(),it=!0,tt.sort(pt),st=0;st<tt.length;st++)(n=tt[st]).before&&n.before(),e=n.id,at[e]=null,n.run();var t=rt.slice(),r=tt.slice();st=tt.length=rt.length=0,at={},ot=it=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,nt(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r&&r._watcher===t&&r._isMounted&&!r._isDestroyed&&et(r,"updated")}}(r),function(){for(var n=0;n<yn.length;n++){var e=yn[n];e.subs=e.subs.filter((function(n){return n})),e._pending=!1}yn.length=0}(),cn&&q.devtools&&cn.emit("flush")}function ft(n){var e=n.id;if(null==at[e]&&(n!==kn.target||!n.noRecurse)){if(at[e]=!0,it){for(var t=tt.length-1;t>st&&tt[t].id>n.id;)t--;tt.splice(t+1,0,n)}else tt.push(n);ot||(ot=!0,$e(dt))}}function mt(n,e){if(n){for(var t=Object.create(null),r=pn?Reflect.ownKeys(n):Object.keys(n),a=0;a<r.length;a++){var o=r[a];if("__ob__"!==o){var i=n[o].from;if(i in e._provided)t[o]=e._provided[i];else if("default"in n[o]){var s=n[o].default;t[o]=l(s)?s.call(e):s}else 0}}return t}}function ht(n,e,t,o,i){var c,l=this,u=i.options;w(o,"_uid")?(c=Object.create(o))._original=o:(c=o,o=o._original);var p=s(u._compiled),d=!p;this.data=n,this.props=e,this.children=t,this.parent=o,this.listeners=n.on||r,this.injections=mt(u.inject,o),this.slots=function(){return l.$slots||ge(o,n.scopedSlots,l.$slots=fe(t,o)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ge(o,n.scopedSlots,this.slots())}}),p&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=ge(o,n.scopedSlots,this.$slots)),u._scopeId?this._c=function(n,e,t,r){var i=Ce(c,n,e,t,r,d);return i&&!a(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(n,e,t,r){return Ce(c,n,e,t,r,d)}}function gt(n,e,t,r,a){var o=vn(n);return o.fnContext=t,o.fnOptions=r,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function vt(n,e){for(var t in e)n[C(t)]=e[t]}function bt(n){return n.name||n.__name||n._componentTag}de(ht.prototype);var yt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;yt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;i(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ke)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,a,o){var i=a.data.scopedSlots,s=n.$scopedSlots,c=!!(i&&!i.$stable||s!==r&&!s.$stable||i&&n.$scopedSlots.$key!==i.$key||!i&&n.$scopedSlots.$key),l=!!(o||n.$options._renderChildren||c),u=n.$vnode;n.$options._parentVnode=a,n.$vnode=a,n._vnode&&(n._vnode.parent=a),n.$options._renderChildren=o;var p=a.data.attrs||r;n._attrsProxy&&ke(n._attrsProxy,p,u.data&&u.data.attrs||r,n,"$attrs")&&(l=!0),n.$attrs=p,t=t||r;var d=n.$options._parentListeners;if(n._listenersProxy&&ke(n._listenersProxy,t,d||r,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,Je(n,t,d),e&&n.$options.props){jn(!1);for(var f=n._props,m=n.$options._propKeys||[],h=0;h<m.length;h++){var g=m[h],v=n.$options.props;f[g]=It(g,v,e,n)}jn(!0),n.$options.propsData=e}l&&(n.$slots=fe(o,a.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,et(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,rt.push(e)):nt(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Ze(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);et(e,"deactivated")}}(e,!0):e.$destroy())}},kt=Object.keys(yt);function xt(n,e,t,c,l){if(!o(n)){var p=t.$options._base;if(u(n)&&(n=p.extend(n)),"function"==typeof n){var d;if(o(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&i(n.errorComp))return n.errorComp;if(i(n.resolved))return n.resolved;var t=we;if(t&&i(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),s(n.loading)&&i(n.loadingComp))return n.loadingComp;if(t&&!i(n.owners)){var r=n.owners=[t],a=!0,c=null,l=null;t.$on("hook:destroyed",(function(){return x(r,t)}));var p=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==c&&(clearTimeout(c),c=null),null!==l&&(clearTimeout(l),l=null))},d=U((function(t){n.resolved=Ee(t,e),a?r.length=0:p(!0)})),f=U((function(e){i(n.errorComp)&&(n.error=!0,p(!0))})),m=n(d,f);return u(m)&&(h(m)?o(n.resolved)&&m.then(d,f):h(m.component)&&(m.component.then(d,f),i(m.error)&&(n.errorComp=Ee(m.error,e)),i(m.loading)&&(n.loadingComp=Ee(m.loading,e),0===m.delay?n.loading=!0:c=setTimeout((function(){c=null,o(n.resolved)&&o(n.error)&&(n.loading=!0,p(!1))}),m.delay||200)),i(m.timeout)&&(l=setTimeout((function(){l=null,o(n.resolved)&&f(null)}),m.timeout)))),a=!1,n.loading?n.loadingComp:n.resolved}}(d=n,p)))return function(n,e,t,r,a){var o=hn();return o.asyncFactory=n,o.asyncMeta={data:e,context:t,children:r,tag:a},o}(d,e,t,c,l);e=e||{},Vt(n),i(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var o=e.on||(e.on={}),s=o[r],c=e.model.callback;i(s)?(a(s)?-1===s.indexOf(c):s!==c)&&(o[r]=[c].concat(s)):o[r]=c}(n.options,e);var f=function(n,e,t){var r=e.options.props;if(!o(r)){var a={},s=n.attrs,c=n.props;if(i(s)||i(c))for(var l in r){var u=j(l);Qn(a,c,l,u,!0)||Qn(a,s,l,u,!1)}return a}}(e,n);if(s(n.options.functional))return function(n,e,t,o,s){var c=n.options,l={},u=c.props;if(i(u))for(var p in u)l[p]=It(p,u,e||r);else i(t.attrs)&&vt(l,t.attrs),i(t.props)&&vt(l,t.props);var d=new ht(t,l,s,o,n),f=c.render.call(null,d._c,d);if(f instanceof mn)return gt(f,t,d.parent,c,d);if(a(f)){for(var m=Jn(f)||[],h=new Array(m.length),g=0;g<m.length;g++)h[g]=gt(m[g],t,d.parent,c,d);return h}}(n,f,e,t,c);var m=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var g=e.slot;e={},g&&(e.slot=g)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<kt.length;t++){var r=kt[t],a=e[r],o=yt[r];a===o||a&&a._merged||(e[r]=a?_t(o,a):o)}}(e);var v=bt(n.options)||l;return new mn("vue-component-".concat(n.cid).concat(v?"-".concat(v):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:f,listeners:m,tag:l,children:c},d)}}}function _t(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}var wt=L,Et=q.optionMergeStrategies;function Tt(n,e,t){if(void 0===t&&(t=!0),!e)return n;for(var r,a,o,i=pn?Reflect.ownKeys(e):Object.keys(e),s=0;s<i.length;s++)"__ob__"!==(r=i[s])&&(a=n[r],o=e[r],t&&w(n,r)?a!==o&&d(a)&&d(o)&&Tt(a,o):Ln(n,r,o));return n}function Ct(n,e,t){return t?function(){var r=l(e)?e.call(t,t):e,a=l(n)?n.call(t,t):n;return r?Tt(r,a):a}:e?n?function(){return Tt(l(e)?e.call(this,this):e,l(n)?n.call(this,this):n)}:e:n}function At(n,e){var t=e?n?n.concat(e):a(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function Ot(n,e,t,r){var a=Object.create(n||null);return e?I(a,e):a}Et.data=function(n,e,t){return t?Ct(n,e,t):e&&"function"!=typeof e?n:Ct(n,e)},G.forEach((function(n){Et[n]=At})),R.forEach((function(n){Et[n+"s"]=Ot})),Et.watch=function(n,e,t,r){if(n===rn&&(n=void 0),e===rn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var o={};for(var i in I(o,n),e){var s=o[i],c=e[i];s&&!a(s)&&(s=[s]),o[i]=s?s.concat(c):a(c)?c:[c]}return o},Et.props=Et.methods=Et.inject=Et.computed=function(n,e,t,r){if(!n)return e;var a=Object.create(null);return I(a,n),e&&I(a,e),a},Et.provide=function(n,e){return n?function(){var t=Object.create(null);return Tt(t,l(n)?n.call(this):n),e&&Tt(t,l(e)?e.call(this):e,!1),t}:e};var jt=function(n,e){return void 0===e?n:e};function St(n,e,t){if(l(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var r,o,i={};if(a(t))for(r=t.length;r--;)"string"==typeof(o=t[r])&&(i[C(o)]={type:null});else if(d(t))for(var s in t)o=t[s],i[C(s)]=d(o)?o:{type:o};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(a(t))for(var o=0;o<t.length;o++)r[t[o]]={from:t[o]};else if(d(t))for(var i in t){var s=t[i];r[i]=d(s)?I({from:i},s):{from:s}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];l(r)&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=St(n,e.extends,t)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)n=St(n,e.mixins[r],t);var i,s={};for(i in n)c(i);for(i in e)w(n,i)||c(i);function c(r){var a=Et[r]||jt;s[r]=a(n[r],e[r],t,r)}return s}function Pt(n,e,t,r){if("string"==typeof t){var a=n[e];if(w(a,t))return a[t];var o=C(t);if(w(a,o))return a[o];var i=A(o);return w(a,i)?a[i]:a[t]||a[o]||a[i]}}function It(n,e,t,r){var a=e[n],o=!w(t,n),i=t[n],s=Nt(Boolean,a.type);if(s>-1)if(o&&!w(a,"default"))i=!1;else if(""===i||i===j(n)){var c=Nt(String,a.type);(c<0||s<c)&&(i=!0)}if(void 0===i){i=function(n,e,t){if(!w(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return l(r)&&"Function"!==Lt(e.type)?r.call(n):r}(r,a,n);var u=On;jn(!0),In(i),jn(u)}return i}var zt=/^\s*function (\w+)/;function Lt(n){var e=n&&n.toString().match(zt);return e?e[1]:""}function Mt(n,e){return Lt(n)===Lt(e)}function Nt(n,e){if(!a(e))return Mt(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Mt(e[t],n))return t;return-1}var Dt={enumerable:!0,configurable:!0,get:L,set:L};function Bt(n,e,t){Dt.get=function(){return this[e][t]},Dt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,Dt)}function Ut(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props=Dn({}),a=n.$options._propKeys=[];n.$parent&&jn(!1);var o=function(o){a.push(o);var i=It(o,e,t,n);zn(r,o,i,void 0,!0),o in n||Bt(n,"_props",o)};for(var i in e)o(i);jn(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var r=n._setupContext=ye(n);fn(n),_n();var a=Oe(t,null,[n._props||Dn({}),r],n,"setup");if(wn(),fn(),l(a))e.render=a;else if(u(a))if(n._setupState=a,a.__sfc){var o=n._setupProxy={};for(var i in a)"__sfc"!==i&&Rn(o,a,i)}else for(var i in a)H(i)||Rn(n,a,i);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?L:S(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;d(e=n._data=l(e)?function(n,e){_n();try{return n.call(e,e)}catch(n){return Ae(n,e,"data()"),{}}finally{wn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,a=(n.$options.methods,t.length);for(;a--;){var o=t[a];0,r&&w(r,o)||H(o)||Bt(n,"_data",o)}var i=In(e);i&&i.vmCount++}(n);else{var t=In(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=sn();for(var a in e){var o=e[a],i=l(o)?o:o.get;0,r||(t[a]=new Ve(n,i||L,L,$t)),a in n||Rt(n,a,o)}}(n,e.computed),e.watch&&e.watch!==rn&&function(n,e){for(var t in e){var r=e[t];if(a(r))for(var o=0;o<r.length;o++)Ft(n,t,r[o]);else Ft(n,t,r)}}(n,e.watch)}var $t={lazy:!0};function Rt(n,e,t){var r=!sn();l(t)?(Dt.get=r?Gt(e):qt(t),Dt.set=L):(Dt.get=t.get?r&&!1!==t.cache?Gt(e):qt(t.get):L,Dt.set=t.set||L),Object.defineProperty(n,e,Dt)}function Gt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),kn.target&&e.depend(),e.value}}function qt(n){return function(){return n.call(this,this)}}function Ft(n,e,t,r){return d(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Ht=0;function Vt(n){var e=n.options;if(n.super){var t=Vt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var a in t)t[a]!==r[a]&&(e||(e={}),e[a]=t[a]);return e}(n);r&&I(n.extendOptions,r),(e=n.options=St(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Wt(n){this._init(n)}function Yt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,a=n._Ctor||(n._Ctor={});if(a[r])return a[r];var o=bt(n)||bt(t.options);var i=function(n){this._init(n)};return(i.prototype=Object.create(t.prototype)).constructor=i,i.cid=e++,i.options=St(t.options,n),i.super=t,i.options.props&&function(n){var e=n.options.props;for(var t in e)Bt(n.prototype,"_props",t)}(i),i.options.computed&&function(n){var e=n.options.computed;for(var t in e)Rt(n.prototype,t,e[t])}(i),i.extend=t.extend,i.mixin=t.mixin,i.use=t.use,R.forEach((function(n){i[n]=t[n]})),o&&(i.options.components[o]=i),i.superOptions=t.options,i.extendOptions=n,i.sealedOptions=I({},i.options),a[r]=i,i}}function Qt(n){return n&&(bt(n.Ctor.options)||n.tag)}function Jt(n,e){return a(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!f(n)&&n.test(e)}function Kt(n,e){var t=n.cache,r=n.keys,a=n._vnode,o=n.$vnode;for(var i in t){var s=t[i];if(s){var c=s.name;c&&!e(c)&&Xt(t,i,r,a)}}o.componentOptions.children=void 0}function Xt(n,e,t,r){var a=n[e];!a||r&&a.tag===r.tag||a.componentInstance.$destroy(),n[e]=null,x(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=Ht++,e._isVue=!0,e.__v_skip=!0,e._scope=new qn(!0),e._scope.parent=void 0,e._scope._vm=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var a=r.componentOptions;t.propsData=a.propsData,t._parentListeners=a.listeners,t._renderChildren=a.children,t._componentTag=a.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=St(Vt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Je(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,a=t&&t.context;n.$slots=fe(e._renderChildren,a),n.$scopedSlots=t?ge(n.$parent,t.data.scopedSlots,n.$slots):r,n._c=function(e,t,r,a){return Ce(n,e,t,r,a,!1)},n.$createElement=function(e,t,r,a){return Ce(n,e,t,r,a,!0)};var o=t&&t.data;zn(n,"$attrs",o&&o.attrs||r,null,!0),zn(n,"$listeners",e._parentListeners||r,null,!0)}(e),et(e,"beforeCreate",void 0,!1),function(n){var e=mt(n.$options.inject,n);e&&(jn(!1),Object.keys(e).forEach((function(t){zn(n,t,e[t])})),jn(!0))}(e),Ut(e),function(n){var e=n.$options.provide;if(e){var t=l(e)?e.call(n):e;if(!u(t))return;for(var r=Fn(n),a=pn?Reflect.ownKeys(t):Object.keys(t),o=0;o<a.length;o++){var i=a[o];Object.defineProperty(r,i,Object.getOwnPropertyDescriptor(t,i))}}}(e),et(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(Wt),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=Ln,n.prototype.$delete=Mn,n.prototype.$watch=function(n,e,t){if(d(e))return Ft(this,n,e,t);(t=t||{}).user=!0;var r=new Ve(this,n,e,t);if(t.immediate){var a='callback for immediate watcher "'.concat(r.expression,'"');_n(),Oe(e,this,[r.value],this,a),wn()}return function(){r.teardown()}}}(Wt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(a(n))for(var o=0,i=n.length;o<i;o++)r.$on(n[o],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(a(n)){for(var r=0,o=n.length;r<o;r++)t.$off(n[r],e);return t}var i,s=t._events[n];if(!s)return t;if(!e)return t._events[n]=null,t;for(var c=s.length;c--;)if((i=s[c])===e||i.fn===e){s.splice(c,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?P(t):t;for(var r=P(arguments,1),a='event handler for "'.concat(n,'"'),o=0,i=t.length;o<i;o++)Oe(t[o],e,r,e,a)}return e}}(Wt),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,a=t._vnode,o=Xe(t);t._vnode=n,t.$el=a?t.__patch__(a,n):t.__patch__(t.$el,n,e,!1),o(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var i=t;i&&i.$vnode&&i.$parent&&i.$vnode===i.$parent._vnode;)i.$parent.$el=i.$el,i=i.$parent},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){et(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||x(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),et(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Wt),function(n){de(n.prototype),n.prototype.$nextTick=function(n){return $e(n,this)},n.prototype._render=function(){var n=this,e=n.$options,t=e.render,r=e._parentVnode;r&&n._isMounted&&(n.$scopedSlots=ge(n.$parent,r.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&_e(n._slotsProxy,n.$scopedSlots)),n.$vnode=r;var o,i=dn,s=we;try{fn(n),we=n,o=t.call(n._renderProxy,n.$createElement)}catch(e){Ae(e,n,"render"),o=n._vnode}finally{we=s,fn(i)}return a(o)&&1===o.length&&(o=o[0]),o instanceof mn||(o=hn()),o.parent=r,o}}(Wt);var Zt=[String,RegExp,Array],nr={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Zt,exclude:Zt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var a=t.tag,o=t.componentInstance,i=t.componentOptions;n[r]={name:Qt(i),tag:a,componentInstance:o},e.push(r),this.max&&e.length>parseInt(this.max)&&Xt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Xt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Kt(n,(function(n){return Jt(e,n)}))})),this.$watch("exclude",(function(e){Kt(n,(function(n){return!Jt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Te(n),t=e&&e.componentOptions;if(t){var r=Qt(t),a=this.include,o=this.exclude;if(a&&(!r||!Jt(a,r))||o&&r&&Jt(o,r))return e;var i=this.cache,s=this.keys,c=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;i[c]?(e.componentInstance=i[c].componentInstance,x(s,c),s.push(c)):(this.vnodeToCache=e,this.keyToCache=c),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return q}};Object.defineProperty(n,"config",e),n.util={warn:wt,extend:I,mergeOptions:St,defineReactive:zn},n.set=Ln,n.delete=Mn,n.nextTick=$e,n.observable=function(n){return In(n),n},n.options=Object.create(null),R.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,I(n.options.components,nr),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=P(arguments,1);return t.unshift(this),l(n.install)?n.install.apply(n,t):l(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=St(this.options,n),this}}(n),Yt(n),function(n){R.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&d(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&l(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Wt),Object.defineProperty(Wt.prototype,"$isServer",{get:sn}),Object.defineProperty(Wt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Wt,"FunctionalRenderContext",{value:ht}),Wt.version="2.7.16";var er=y("style,class"),tr=y("input,textarea,option,select,progress"),rr=y("contenteditable,draggable,spellcheck"),ar=y("events,caret,typing,plaintext-only"),or=y("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ir="http://www.w3.org/1999/xlink",sr=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},cr=function(n){return sr(n)?n.slice(6,n.length):""},lr=function(n){return null==n||!1===n};function ur(n){for(var e=n.data,t=n,r=n;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=pr(r.data,e));for(;i(t=t.parent);)t&&t.data&&(e=pr(e,t.data));return function(n,e){if(i(n)||i(e))return dr(n,fr(e));return""}(e.staticClass,e.class)}function pr(n,e){return{staticClass:dr(n.staticClass,e.staticClass),class:i(n.class)?[n.class,e.class]:e.class}}function dr(n,e){return n?e?n+" "+e:n:e||""}function fr(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,a=n.length;r<a;r++)i(e=fr(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):u(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var mr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},hr=y("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),gr=y("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),vr=function(n){return hr(n)||gr(n)};var br=Object.create(null);var yr=y("text,number,password,search,email,tel,url");var kr=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(mr[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),xr={create:function(n,e){_r(e)},update:function(n,e){n.data.ref!==e.data.ref&&(_r(n,!0),_r(e))},destroy:function(n){_r(n,!0)}};function _r(n,e){var t=n.data.ref;if(i(t)){var r=n.context,o=n.componentInstance||n.elm,s=e?null:o,c=e?void 0:o;if(l(t))Oe(t,r,[s],r,"template ref function");else{var u=n.data.refInFor,p="string"==typeof t||"number"==typeof t,d=$n(t),f=r.$refs;if(p||d)if(u){var m=p?f[t]:t.value;e?a(m)&&x(m,o):a(m)?m.includes(o)||m.push(o):p?(f[t]=[o],wr(r,t,f[t])):t.value=[o]}else if(p){if(e&&f[t]!==o)return;f[t]=c,wr(r,t,s)}else if(d){if(e&&t.value!==o)return;t.value=s}else 0}}}function wr(n,e,t){var r=n._setupState;r&&w(r,e)&&($n(r[e])?r[e].value=t:r[e]=t)}var Er=new mn("",{},[]),Tr=["create","activate","update","remove","destroy"];function Cr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&i(n.data)===i(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=i(t=n.data)&&i(t=t.attrs)&&t.type,a=i(t=e.data)&&i(t=t.attrs)&&t.type;return r===a||yr(r)&&yr(a)}(n,e)||s(n.isAsyncPlaceholder)&&o(e.asyncFactory.error))}function Ar(n,e,t){var r,a,o={};for(r=e;r<=t;++r)i(a=n[r].key)&&(o[a]=r);return o}var Or={create:jr,update:jr,destroy:function(n){jr(n,Er)}};function jr(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,a,o=n===Er,i=e===Er,s=Pr(n.data.directives,n.context),c=Pr(e.data.directives,e.context),l=[],u=[];for(t in c)r=s[t],a=c[t],r?(a.oldValue=r.value,a.oldArg=r.arg,zr(a,"update",e,n),a.def&&a.def.componentUpdated&&u.push(a)):(zr(a,"bind",e,n),a.def&&a.def.inserted&&l.push(a));if(l.length){var p=function(){for(var t=0;t<l.length;t++)zr(l[t],"inserted",e,n)};o?Yn(e,"insert",p):p()}u.length&&Yn(e,"postpatch",(function(){for(var t=0;t<u.length;t++)zr(u[t],"componentUpdated",e,n)}));if(!o)for(t in s)c[t]||zr(s[t],"unbind",n,n,i)}(n,e)}var Sr=Object.create(null);function Pr(n,e){var t,r,a=Object.create(null);if(!n)return a;for(t=0;t<n.length;t++){if((r=n[t]).modifiers||(r.modifiers=Sr),a[Ir(r)]=r,e._setupState&&e._setupState.__sfc){var o=r.def||Pt(e,"_setupState","v-"+r.name);r.def="function"==typeof o?{bind:o,update:o}:o}r.def=r.def||Pt(e.$options,"directives",r.name)}return a}function Ir(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function zr(n,e,t,r,a){var o=n.def&&n.def[e];if(o)try{o(t.elm,n,t,r,a)}catch(r){Ae(r,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var Lr=[xr,Or];function Mr(n,e){var t=e.componentOptions;if(!(i(t)&&!1===t.Ctor.options.inheritAttrs||o(n.data.attrs)&&o(e.data.attrs))){var r,a,c=e.elm,l=n.data.attrs||{},u=e.data.attrs||{};for(r in(i(u.__ob__)||s(u._v_attr_proxy))&&(u=e.data.attrs=I({},u)),u)a=u[r],l[r]!==a&&Nr(c,r,a,e.data.pre);for(r in(K||Z)&&u.value!==l.value&&Nr(c,"value",u.value),l)o(u[r])&&(sr(r)?c.removeAttributeNS(ir,cr(r)):rr(r)||c.removeAttribute(r))}}function Nr(n,e,t,r){r||n.tagName.indexOf("-")>-1?Dr(n,e,t):or(e)?lr(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):rr(e)?n.setAttribute(e,function(n,e){return lr(e)||"false"===e?"false":"contenteditable"===n&&ar(e)?e:"true"}(e,t)):sr(e)?lr(t)?n.removeAttributeNS(ir,cr(e)):n.setAttributeNS(ir,e,t):Dr(n,e,t)}function Dr(n,e,t){if(lr(t))n.removeAttribute(e);else{if(K&&!X&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var Br={create:Mr,update:Mr};function Ur(n,e){var t=e.elm,r=e.data,a=n.data;if(!(o(r.staticClass)&&o(r.class)&&(o(a)||o(a.staticClass)&&o(a.class)))){var s=ur(e),c=t._transitionClasses;i(c)&&(s=dr(s,fr(c))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var $r,Rr={create:Ur,update:Ur};function Gr(n,e,t){var r=$r;return function a(){var o=e.apply(null,arguments);null!==o&&Hr(n,a,t,r)}}var qr=Ie&&!(tn&&Number(tn[1])<=53);function Fr(n,e,t,r){if(qr){var a=ct,o=e;e=o._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=a||n.timeStamp<=0||n.target.ownerDocument!==document)return o.apply(this,arguments)}}$r.addEventListener(n,e,an?{capture:t,passive:r}:t)}function Hr(n,e,t,r){(r||$r).removeEventListener(n,e._wrapper||e,t)}function Vr(n,e){if(!o(n.data.on)||!o(e.data.on)){var t=e.data.on||{},r=n.data.on||{};$r=e.elm||n.elm,function(n){if(i(n.__r)){var e=K?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}i(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Wn(t,r,Fr,Hr,Gr,e.context),$r=void 0}}var Wr,Yr={create:Vr,update:Vr,destroy:function(n){return Vr(n,Er)}};function Qr(n,e){if(!o(n.data.domProps)||!o(e.data.domProps)){var t,r,a=e.elm,c=n.data.domProps||{},l=e.data.domProps||{};for(t in(i(l.__ob__)||s(l._v_attr_proxy))&&(l=e.data.domProps=I({},l)),c)t in l||(a[t]="");for(t in l){if(r=l[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===c[t])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===t&&"PROGRESS"!==a.tagName){a._value=r;var u=o(r)?"":String(r);Jr(a,u)&&(a.value=u)}else if("innerHTML"===t&&gr(a.tagName)&&o(a.innerHTML)){(Wr=Wr||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var p=Wr.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;p.firstChild;)a.appendChild(p.firstChild)}else if(r!==c[t])try{a[t]=r}catch(n){}}}}function Jr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(i(r)){if(r.number)return b(t)!==b(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Kr={create:Qr,update:Qr},Xr=E((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Zr(n){var e=na(n.style);return n.staticStyle?I(n.staticStyle,e):e}function na(n){return Array.isArray(n)?z(n):"string"==typeof n?Xr(n):n}var ea,ta=/^--/,ra=/\s*!important$/,aa=function(n,e,t){if(ta.test(e))n.style.setProperty(e,t);else if(ra.test(t))n.style.setProperty(j(e),t.replace(ra,""),"important");else{var r=ia(e);if(Array.isArray(t))for(var a=0,o=t.length;a<o;a++)n.style[r]=t[a];else n.style[r]=t}},oa=["Webkit","Moz","ms"],ia=E((function(n){if(ea=ea||document.createElement("div").style,"filter"!==(n=C(n))&&n in ea)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<oa.length;t++){var r=oa[t]+e;if(r in ea)return r}}));function sa(n,e){var t=e.data,r=n.data;if(!(o(t.staticStyle)&&o(t.style)&&o(r.staticStyle)&&o(r.style))){var a,s,c=e.elm,l=r.staticStyle,u=r.normalizedStyle||r.style||{},p=l||u,d=na(e.data.style)||{};e.data.normalizedStyle=i(d.__ob__)?I({},d):d;var f=function(n,e){var t,r={};if(e)for(var a=n;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(t=Zr(a.data))&&I(r,t);(t=Zr(n.data))&&I(r,t);for(var o=n;o=o.parent;)o.data&&(t=Zr(o.data))&&I(r,t);return r}(e,!0);for(s in p)o(f[s])&&aa(c,s,"");for(s in f)a=f[s],aa(c,s,null==a?"":a)}}var ca={create:sa,update:sa},la=/\s+/;function ua(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(la).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function pa(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(la).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function da(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&I(e,fa(n.name||"v")),I(e,n),e}return"string"==typeof n?fa(n):void 0}}var fa=E((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),ma=Q&&!X,ha="transition",ga="transitionend",va="animation",ba="animationend";ma&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ha="WebkitTransition",ga="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(va="WebkitAnimation",ba="webkitAnimationEnd"));var ya=Q?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function ka(n){ya((function(){ya(n)}))}function xa(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),ua(n,e))}function _a(n,e){n._transitionClasses&&x(n._transitionClasses,e),pa(n,e)}function wa(n,e,t){var r=Ta(n,e),a=r.type,o=r.timeout,i=r.propCount;if(!a)return t();var s="transition"===a?ga:ba,c=0,l=function(){n.removeEventListener(s,u),t()},u=function(e){e.target===n&&++c>=i&&l()};setTimeout((function(){c<i&&l()}),o+1),n.addEventListener(s,u)}var Ea=/\b(transform|all)(,|$)/;function Ta(n,e){var t,r=window.getComputedStyle(n),a=(r[ha+"Delay"]||"").split(", "),o=(r[ha+"Duration"]||"").split(", "),i=Ca(a,o),s=(r[va+"Delay"]||"").split(", "),c=(r[va+"Duration"]||"").split(", "),l=Ca(s,c),u=0,p=0;return"transition"===e?i>0&&(t="transition",u=i,p=o.length):"animation"===e?l>0&&(t="animation",u=l,p=c.length):p=(t=(u=Math.max(i,l))>0?i>l?"transition":"animation":null)?"transition"===t?o.length:c.length:0,{type:t,timeout:u,propCount:p,hasTransform:"transition"===t&&Ea.test(r[ha+"Property"])}}function Ca(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return Aa(e)+Aa(n[t])})))}function Aa(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function Oa(n,e){var t=n.elm;i(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=da(n.data.transition);if(!o(r)&&!i(t._enterCb)&&1===t.nodeType){for(var a=r.css,s=r.type,c=r.enterClass,p=r.enterToClass,d=r.enterActiveClass,f=r.appearClass,m=r.appearToClass,h=r.appearActiveClass,g=r.beforeEnter,v=r.enter,y=r.afterEnter,k=r.enterCancelled,x=r.beforeAppear,_=r.appear,w=r.afterAppear,E=r.appearCancelled,T=r.duration,C=Ke,A=Ke.$vnode;A&&A.parent;)C=A.context,A=A.parent;var O=!C._isMounted||!n.isRootInsert;if(!O||_||""===_){var j=O&&f?f:c,S=O&&h?h:d,P=O&&m?m:p,I=O&&x||g,z=O&&l(_)?_:v,L=O&&w||y,M=O&&E||k,N=b(u(T)?T.enter:T);0;var D=!1!==a&&!X,B=Pa(z),$=t._enterCb=U((function(){D&&(_a(t,P),_a(t,S)),$.cancelled?(D&&_a(t,j),M&&M(t)):L&&L(t),t._enterCb=null}));n.data.show||Yn(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),z&&z(t,$)})),I&&I(t),D&&(xa(t,j),xa(t,S),ka((function(){_a(t,j),$.cancelled||(xa(t,P),B||(Sa(N)?setTimeout($,N):wa(t,s,$)))}))),n.data.show&&(e&&e(),z&&z(t,$)),D||B||$()}}}function ja(n,e){var t=n.elm;i(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=da(n.data.transition);if(o(r)||1!==t.nodeType)return e();if(!i(t._leaveCb)){var a=r.css,s=r.type,c=r.leaveClass,l=r.leaveToClass,p=r.leaveActiveClass,d=r.beforeLeave,f=r.leave,m=r.afterLeave,h=r.leaveCancelled,g=r.delayLeave,v=r.duration,y=!1!==a&&!X,k=Pa(f),x=b(u(v)?v.leave:v);0;var _=t._leaveCb=U((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(_a(t,l),_a(t,p)),_.cancelled?(y&&_a(t,c),h&&h(t)):(e(),m&&m(t)),t._leaveCb=null}));g?g(w):w()}function w(){_.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),y&&(xa(t,c),xa(t,p),ka((function(){_a(t,c),_.cancelled||(xa(t,l),k||(Sa(x)?setTimeout(_,x):wa(t,s,_)))}))),f&&f(t,_),y||k||_())}}function Sa(n){return"number"==typeof n&&!isNaN(n)}function Pa(n){if(o(n))return!1;var e=n.fns;return i(e)?Pa(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function Ia(n,e){!0!==e.data.show&&Oa(e)}var za=function(n){var e,t,r={},l=n.modules,u=n.nodeOps;for(e=0;e<Tr.length;++e)for(r[Tr[e]]=[],t=0;t<l.length;++t)i(l[t][Tr[e]])&&r[Tr[e]].push(l[t][Tr[e]]);function p(n){var e=u.parentNode(n);i(e)&&u.removeChild(e,n)}function d(n,e,t,a,o,c,l){if(i(n.elm)&&i(c)&&(n=c[l]=vn(n)),n.isRootInsert=!o,!function(n,e,t,a){var o=n.data;if(i(o)){var c=i(n.componentInstance)&&o.keepAlive;if(i(o=o.hook)&&i(o=o.init)&&o(n,!1),i(n.componentInstance))return f(n,e),m(t,n.elm,a),s(c)&&function(n,e,t,a){var o,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,i(o=s.data)&&i(o=o.transition)){for(o=0;o<r.activate.length;++o)r.activate[o](Er,s);e.push(s);break}m(t,n.elm,a)}(n,e,t,a),!0}}(n,e,t,a)){var p=n.data,d=n.children,g=n.tag;i(g)?(n.elm=n.ns?u.createElementNS(n.ns,g):u.createElement(g,n),b(n),h(n,d,e),i(p)&&v(n,e),m(t,n.elm,a)):s(n.isComment)?(n.elm=u.createComment(n.text),m(t,n.elm,a)):(n.elm=u.createTextNode(n.text),m(t,n.elm,a))}}function f(n,e){i(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,g(n)?(v(n,e),b(n)):(_r(n),e.push(n))}function m(n,e,t){i(n)&&(i(t)?u.parentNode(t)===n&&u.insertBefore(n,e,t):u.appendChild(n,e))}function h(n,e,t){if(a(e)){0;for(var r=0;r<e.length;++r)d(e[r],t,n.elm,null,!0,e,r)}else c(n.text)&&u.appendChild(n.elm,u.createTextNode(String(n.text)))}function g(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return i(n.tag)}function v(n,t){for(var a=0;a<r.create.length;++a)r.create[a](Er,n);i(e=n.data.hook)&&(i(e.create)&&e.create(Er,n),i(e.insert)&&t.push(n))}function b(n){var e;if(i(e=n.fnScopeId))u.setStyleScope(n.elm,e);else for(var t=n;t;)i(e=t.context)&&i(e=e.$options._scopeId)&&u.setStyleScope(n.elm,e),t=t.parent;i(e=Ke)&&e!==n.context&&e!==n.fnContext&&i(e=e.$options._scopeId)&&u.setStyleScope(n.elm,e)}function k(n,e,t,r,a,o){for(;r<=a;++r)d(t[r],o,n,e,!1,t,r)}function x(n){var e,t,a=n.data;if(i(a))for(i(e=a.hook)&&i(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(i(e=n.children))for(t=0;t<n.children.length;++t)x(n.children[t])}function _(n,e,t){for(;e<=t;++e){var r=n[e];i(r)&&(i(r.tag)?(w(r),x(r)):p(r.elm))}}function w(n,e){if(i(e)||i(n.data)){var t,a=r.remove.length+1;for(i(e)?e.listeners+=a:e=function(n,e){function t(){0==--t.listeners&&p(n)}return t.listeners=e,t}(n.elm,a),i(t=n.componentInstance)&&i(t=t._vnode)&&i(t.data)&&w(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);i(t=n.data.hook)&&i(t=t.remove)?t(n,e):e()}else p(n.elm)}function E(n,e,t,r){for(var a=t;a<r;a++){var o=e[a];if(i(o)&&Cr(n,o))return a}}function T(n,e,t,a,c,l){if(n!==e){i(e.elm)&&i(a)&&(e=a[c]=vn(e));var p=e.elm=n.elm;if(s(n.isAsyncPlaceholder))i(e.asyncFactory.resolved)?O(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var f,m=e.data;i(m)&&i(f=m.hook)&&i(f=f.prepatch)&&f(n,e);var h=n.children,v=e.children;if(i(m)&&g(e)){for(f=0;f<r.update.length;++f)r.update[f](n,e);i(f=m.hook)&&i(f=f.update)&&f(n,e)}o(e.text)?i(h)&&i(v)?h!==v&&function(n,e,t,r,a){var s,c,l,p=0,f=0,m=e.length-1,h=e[0],g=e[m],v=t.length-1,b=t[0],y=t[v],x=!a;for(0;p<=m&&f<=v;)o(h)?h=e[++p]:o(g)?g=e[--m]:Cr(h,b)?(T(h,b,r,t,f),h=e[++p],b=t[++f]):Cr(g,y)?(T(g,y,r,t,v),g=e[--m],y=t[--v]):Cr(h,y)?(T(h,y,r,t,v),x&&u.insertBefore(n,h.elm,u.nextSibling(g.elm)),h=e[++p],y=t[--v]):Cr(g,b)?(T(g,b,r,t,f),x&&u.insertBefore(n,g.elm,h.elm),g=e[--m],b=t[++f]):(o(s)&&(s=Ar(e,p,m)),o(c=i(b.key)?s[b.key]:E(b,e,p,m))?d(b,r,n,h.elm,!1,t,f):Cr(l=e[c],b)?(T(l,b,r,t,f),e[c]=void 0,x&&u.insertBefore(n,l.elm,h.elm)):d(b,r,n,h.elm,!1,t,f),b=t[++f]);p>m?k(n,o(t[v+1])?null:t[v+1].elm,t,f,v,r):f>v&&_(e,p,m)}(p,h,v,t,l):i(v)?(i(n.text)&&u.setTextContent(p,""),k(p,null,v,0,v.length-1,t)):i(h)?_(h,0,h.length-1):i(n.text)&&u.setTextContent(p,""):n.text!==e.text&&u.setTextContent(p,e.text),i(m)&&i(f=m.hook)&&i(f=f.postpatch)&&f(n,e)}}}function C(n,e,t){if(s(t)&&i(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var A=y("attrs,class,staticClass,staticStyle,key");function O(n,e,t,r){var a,o=e.tag,c=e.data,l=e.children;if(r=r||c&&c.pre,e.elm=n,s(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(c)&&(i(a=c.hook)&&i(a=a.init)&&a(e,!0),i(a=e.componentInstance)))return f(e,t),!0;if(i(o)){if(i(l))if(n.hasChildNodes())if(i(a=c)&&i(a=a.domProps)&&i(a=a.innerHTML)){if(a!==n.innerHTML)return!1}else{for(var u=!0,p=n.firstChild,d=0;d<l.length;d++){if(!p||!O(p,l[d],t,r)){u=!1;break}p=p.nextSibling}if(!u||p)return!1}else h(e,l,t);if(i(c)){var m=!1;for(var g in c)if(!A(g)){m=!0,v(e,t);break}!m&&c.class&&qe(c.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,a){if(!o(e)){var c,l=!1,p=[];if(o(n))l=!0,d(e,p);else{var f=i(n.nodeType);if(!f&&Cr(n,e))T(n,e,p,null,null,a);else{if(f){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&O(n,e,p))return C(e,p,!0),n;c=n,n=new mn(u.tagName(c).toLowerCase(),{},[],void 0,c)}var m=n.elm,h=u.parentNode(m);if(d(e,p,m._leaveCb?null:h,u.nextSibling(m)),i(e.parent))for(var v=e.parent,b=g(e);v;){for(var y=0;y<r.destroy.length;++y)r.destroy[y](v);if(v.elm=e.elm,b){for(var k=0;k<r.create.length;++k)r.create[k](Er,v);var w=v.data.hook.insert;if(w.merged)for(var E=w.fns.slice(1),A=0;A<E.length;A++)E[A]()}else _r(v);v=v.parent}i(h)?_([n],0,0):i(n.tag)&&x(n)}}return C(e,p,l),e.elm}i(n)&&x(n)}}({nodeOps:kr,modules:[Br,Rr,Yr,Kr,ca,Q?{create:Ia,activate:Ia,remove:function(n,e){!0!==n.data.show?ja(n,e):e()}}:{}].concat(Lr)});X&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&Ra(n,"input")}));var La={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?Yn(t,"postpatch",(function(){La.componentUpdated(n,e,t)})):Ma(n,e,t.context),n._vOptions=[].map.call(n.options,Ba)):("textarea"===t.tag||yr(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",Ua),n.addEventListener("compositionend",$a),n.addEventListener("change",$a),X&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){Ma(n,e,t.context);var r=n._vOptions,a=n._vOptions=[].map.call(n.options,Ba);if(a.some((function(n,e){return!D(n,r[e])})))(n.multiple?e.value.some((function(n){return Da(n,a)})):e.value!==e.oldValue&&Da(e.value,a))&&Ra(n,"change")}}};function Ma(n,e,t){Na(n,e,t),(K||Z)&&setTimeout((function(){Na(n,e,t)}),0)}function Na(n,e,t){var r=e.value,a=n.multiple;if(!a||Array.isArray(r)){for(var o,i,s=0,c=n.options.length;s<c;s++)if(i=n.options[s],a)o=B(r,Ba(i))>-1,i.selected!==o&&(i.selected=o);else if(D(Ba(i),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));a||(n.selectedIndex=-1)}}function Da(n,e){return e.every((function(e){return!D(e,n)}))}function Ba(n){return"_value"in n?n._value:n.value}function Ua(n){n.target.composing=!0}function $a(n){n.target.composing&&(n.target.composing=!1,Ra(n.target,"input"))}function Ra(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function Ga(n){return!n.componentInstance||n.data&&n.data.transition?n:Ga(n.componentInstance._vnode)}var qa={model:La,show:{bind:function(n,e,t){var r=e.value,a=(t=Ga(t)).data&&t.data.transition,o=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&a?(t.data.show=!0,Oa(t,(function(){n.style.display=o}))):n.style.display=r?o:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=Ga(t)).data&&t.data.transition?(t.data.show=!0,r?Oa(t,(function(){n.style.display=n.__vOriginalDisplay})):ja(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,a){a||(n.style.display=n.__vOriginalDisplay)}}},Fa={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Ha(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Ha(Te(e.children)):n}function Va(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var a=t._parentListeners;for(var r in a)e[C(r)]=a[r];return e}function Wa(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Ya=function(n){return n.tag||he(n)},Qa=function(n){return"show"===n.name},Ja={name:"transition",props:Fa,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Ya)).length){0;var r=this.mode;0;var a=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return a;var o=Ha(a);if(!o)return a;if(this._leaving)return Wa(n,a);var i="__transition-".concat(this._uid,"-");o.key=null==o.key?o.isComment?i+"comment":i+o.tag:c(o.key)?0===String(o.key).indexOf(i)?o.key:i+o.key:o.key;var s=(o.data||(o.data={})).transition=Va(this),l=this._vnode,u=Ha(l);if(o.data.directives&&o.data.directives.some(Qa)&&(o.data.show=!0),u&&u.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(o,u)&&!he(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var p=u.data.transition=I({},s);if("out-in"===r)return this._leaving=!0,Yn(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Wa(n,a);if("in-out"===r){if(he(o))return l;var d,f=function(){d()};Yn(s,"afterEnter",f),Yn(s,"enterCancelled",f),Yn(p,"delayLeave",(function(n){d=n}))}}return a}}},Ka=I({tag:String,moveClass:String},Fa);function Xa(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Za(n){n.data.newPos=n.elm.getBoundingClientRect()}function no(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,a=e.top-t.top;if(r||a){n.data.moved=!0;var o=n.elm.style;o.transform=o.WebkitTransform="translate(".concat(r,"px,").concat(a,"px)"),o.transitionDuration="0s"}}delete Ka.mode;var eo={Transition:Ja,TransitionGroup:{props:Ka,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var a=Xe(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,a(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,a=this.$slots.default||[],o=this.children=[],i=Va(this),s=0;s<a.length;s++){if((u=a[s]).tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))o.push(u),t[u.key]=u,(u.data||(u.data={})).transition=i;else;}if(r){var c=[],l=[];for(s=0;s<r.length;s++){var u;(u=r[s]).data.transition=i,u.data.pos=u.elm.getBoundingClientRect(),t[u.key]?c.push(u):l.push(u)}this.kept=n(e,null,c),this.removed=l}return n(e,null,o)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Xa),n.forEach(Za),n.forEach(no),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;xa(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(ga,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(ga,n),t._moveCb=null,_a(t,e))})}})))},methods:{hasMove:function(n,e){if(!ma)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){pa(t,n)})),ua(t,e),t.style.display="none",this.$el.appendChild(t);var r=Ta(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};function to(n,e){for(var t in e)n[t]=e[t];return n}Wt.config.mustUseProp=function(n,e,t){return"value"===t&&tr(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Wt.config.isReservedTag=vr,Wt.config.isReservedAttr=er,Wt.config.getTagNamespace=function(n){return gr(n)?"svg":"math"===n?"math":void 0},Wt.config.isUnknownElement=function(n){if(!Q)return!0;if(vr(n))return!1;if(n=n.toLowerCase(),null!=br[n])return br[n];var e=document.createElement(n);return n.indexOf("-")>-1?br[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:br[n]=/HTMLUnknownElement/.test(e.toString())},I(Wt.options.directives,qa),I(Wt.options.components,eo),Wt.prototype.__patch__=Q?za:L,Wt.prototype.$mount=function(n,e){return function(n,e,t){var r;n.$el=e,n.$options.render||(n.$options.render=hn),et(n,"beforeMount"),r=function(){n._update(n._render(),t)},new Ve(n,r,L,{before:function(){n._isMounted&&!n._isDestroyed&&et(n,"beforeUpdate")}},!0),t=!1;var a=n._preWatchers;if(a)for(var o=0;o<a.length;o++)a[o].run();return null==n.$vnode&&(n._isMounted=!0,et(n,"mounted")),n}(this,n=n&&Q?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},Q&&setTimeout((function(){q.devtools&&cn&&cn.emit("init",Wt)}),0);var ro=/[!'()*]/g,ao=function(n){return"%"+n.charCodeAt(0).toString(16)},oo=/%2C/g,io=function(n){return encodeURIComponent(n).replace(ro,ao).replace(oo,",")};function so(n){try{return decodeURIComponent(n)}catch(n){0}return n}var co=function(n){return null==n||"object"==typeof n?n:String(n)};function lo(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=so(t.shift()),a=t.length>0?so(t.join("=")):null;void 0===e[r]?e[r]=a:Array.isArray(e[r])?e[r].push(a):e[r]=[e[r],a]})),e):e}function uo(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return io(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(io(e)):r.push(io(e)+"="+io(n)))})),r.join("&")}return io(e)+"="+io(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var po=/\/?$/;function fo(n,e,t,r){var a=r&&r.options.stringifyQuery,o=e.query||{};try{o=mo(o)}catch(n){}var i={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:o,params:e.params||{},fullPath:vo(e,a),matched:n?go(n):[]};return t&&(i.redirectedFrom=vo(t,a)),Object.freeze(i)}function mo(n){if(Array.isArray(n))return n.map(mo);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=mo(n[t]);return e}return n}var ho=fo(null,{path:"/"});function go(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function vo(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var a=n.hash;return void 0===a&&(a=""),(t||"/")+(e||uo)(r)+a}function bo(n,e,t){return e===ho?n===e:!!e&&(n.path&&e.path?n.path.replace(po,"")===e.path.replace(po,"")&&(t||n.hash===e.hash&&yo(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&yo(n.query,e.query)&&yo(n.params,e.params))))}function yo(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,a){var o=n[t];if(r[a]!==t)return!1;var i=e[t];return null==o||null==i?o===i:"object"==typeof o&&"object"==typeof i?yo(o,i):String(o)===String(i)}))}function ko(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var a=t.instances[r],o=t.enteredCbs[r];if(a&&o){delete t.enteredCbs[r];for(var i=0;i<o.length;i++)a._isBeingDestroyed||o[i](a)}}}}var xo={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,a=e.parent,o=e.data;o.routerView=!0;for(var i=a.$createElement,s=t.name,c=a.$route,l=a._routerViewCache||(a._routerViewCache={}),u=0,p=!1;a&&a._routerRoot!==a;){var d=a.$vnode?a.$vnode.data:{};d.routerView&&u++,d.keepAlive&&a._directInactive&&a._inactive&&(p=!0),a=a.$parent}if(o.routerViewDepth=u,p){var f=l[s],m=f&&f.component;return m?(f.configProps&&_o(m,o,f.route,f.configProps),i(m,o,r)):i()}var h=c.matched[u],g=h&&h.components[s];if(!h||!g)return l[s]=null,i();l[s]={component:g},o.registerRouteInstance=function(n,e){var t=h.instances[s];(e&&t!==n||!e&&t===n)&&(h.instances[s]=e)},(o.hook||(o.hook={})).prepatch=function(n,e){h.instances[s]=e.componentInstance},o.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==h.instances[s]&&(h.instances[s]=n.componentInstance),ko(c)};var v=h.props&&h.props[s];return v&&(to(l[s],{route:c,configProps:v}),_o(g,o,c,v)),i(g,o,r)}};function _o(n,e,t,r){var a=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(a){a=e.props=to({},a);var o=e.attrs=e.attrs||{};for(var i in a)n.props&&i in n.props||(o[i]=a[i],delete a[i])}}function wo(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var o=n.replace(/^\//,"").split("/"),i=0;i<o.length;i++){var s=o[i];".."===s?a.pop():"."!==s&&a.push(s)}return""!==a[0]&&a.unshift(""),a.join("/")}function Eo(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var To=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},Co=$o,Ao=Io,Oo=function(n,e){return Lo(Io(n,e),e)},jo=Lo,So=Uo,Po=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Io(n,e){for(var t,r=[],a=0,o=0,i="",s=e&&e.delimiter||"/";null!=(t=Po.exec(n));){var c=t[0],l=t[1],u=t.index;if(i+=n.slice(o,u),o=u+c.length,l)i+=l[1];else{var p=n[o],d=t[2],f=t[3],m=t[4],h=t[5],g=t[6],v=t[7];i&&(r.push(i),i="");var b=null!=d&&null!=p&&p!==d,y="+"===g||"*"===g,k="?"===g||"*"===g,x=t[2]||s,_=m||h;r.push({name:f||a++,prefix:d||"",delimiter:x,optional:k,repeat:y,partial:b,asterisk:!!v,pattern:_?No(_):v?".*":"[^"+Mo(x)+"]+?"})}}return o<n.length&&(i+=n.substr(o)),i&&r.push(i),r}function zo(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function Lo(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",Bo(e)));return function(e,r){for(var a="",o=e||{},i=(r||{}).pretty?zo:encodeURIComponent,s=0;s<n.length;s++){var c=n[s];if("string"!=typeof c){var l,u=o[c.name];if(null==u){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(To(u)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<u.length;p++){if(l=i(u[p]),!t[s].test(l))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(l)+"`");a+=(0===p?c.prefix:c.delimiter)+l}}else{if(l=c.asterisk?encodeURI(u).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):i(u),!t[s].test(l))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+l+'"');a+=c.prefix+l}}else a+=c}return a}}function Mo(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function No(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function Do(n,e){return n.keys=e,n}function Bo(n){return n&&n.sensitive?"":"i"}function Uo(n,e,t){To(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,a=!1!==t.end,o="",i=0;i<n.length;i++){var s=n[i];if("string"==typeof s)o+=Mo(s);else{var c=Mo(s.prefix),l="(?:"+s.pattern+")";e.push(s),s.repeat&&(l+="(?:"+c+l+")*"),o+=l=s.optional?s.partial?c+"("+l+")?":"(?:"+c+"("+l+"))?":c+"("+l+")"}}var u=Mo(t.delimiter||"/"),p=o.slice(-u.length)===u;return r||(o=(p?o.slice(0,-u.length):o)+"(?:"+u+"(?=$))?"),o+=a?"$":r&&p?"":"(?="+u+"|$)",Do(new RegExp("^"+o,Bo(t)),e)}function $o(n,e,t){return To(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Do(n,e)}(n,e):To(n)?function(n,e,t){for(var r=[],a=0;a<n.length;a++)r.push($o(n[a],e,t).source);return Do(new RegExp("(?:"+r.join("|")+")",Bo(t)),e)}(n,e,t):function(n,e,t){return Uo(Io(n,t),e,t)}(n,e,t)}Co.parse=Ao,Co.compile=Oo,Co.tokensToFunction=jo,Co.tokensToRegExp=So;var Ro=Object.create(null);function Go(n,e,t){e=e||{};try{var r=Ro[n]||(Ro[n]=Co.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function qo(n,e,t,r){var a="string"==typeof n?{path:n}:n;if(a._normalized)return a;if(a.name){var o=(a=to({},n)).params;return o&&"object"==typeof o&&(a.params=to({},o)),a}if(!a.path&&a.params&&e){(a=to({},a))._normalized=!0;var i=to(to({},e.params),a.params);if(e.name)a.name=e.name,a.params=i;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;a.path=Go(s,i,e.path)}else 0;return a}var c=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var a=n.indexOf("?");return a>=0&&(t=n.slice(a+1),n=n.slice(0,a)),{path:n,query:t,hash:e}}(a.path||""),l=e&&e.path||"/",u=c.path?wo(c.path,l,t||a.append):l,p=function(n,e,t){void 0===e&&(e={});var r,a=t||lo;try{r=a(n||"")}catch(n){r={}}for(var o in e){var i=e[o];r[o]=Array.isArray(i)?i.map(co):co(i)}return r}(c.query,a.query,r&&r.options.parseQuery),d=a.hash||c.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:u,query:p,hash:d}}var Fo,Ho=function(){},Vo={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,a=t.resolve(this.to,r,this.append),o=a.location,i=a.route,s=a.href,c={},l=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==l?"router-link-active":l,d=null==u?"router-link-exact-active":u,f=null==this.activeClass?p:this.activeClass,m=null==this.exactActiveClass?d:this.exactActiveClass,h=i.redirectedFrom?fo(null,qo(i.redirectedFrom),null,t):i;c[m]=bo(r,h,this.exactPath),c[f]=this.exact||this.exactPath?c[m]:function(n,e){return 0===n.path.replace(po,"/").indexOf(e.path.replace(po,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,h);var g=c[m]?this.ariaCurrentValue:null,v=function(n){Wo(n)&&(e.replace?t.replace(o,Ho):t.push(o,Ho))},b={click:Wo};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=v})):b[this.event]=v;var y={class:c},k=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:i,navigate:v,isActive:c[f],isExactActive:c[m]});if(k){if(1===k.length)return k[0];if(k.length>1||!k.length)return 0===k.length?n():n("span",{},k)}if("a"===this.tag)y.on=b,y.attrs={href:s,"aria-current":g};else{var x=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(x){x.isStatic=!1;var _=x.data=to({},x.data);for(var w in _.on=_.on||{},_.on){var E=_.on[w];w in b&&(_.on[w]=Array.isArray(E)?E:[E])}for(var T in b)T in _.on?_.on[T].push(b[T]):_.on[T]=v;var C=x.data.attrs=to({},x.data.attrs);C.href=s,C["aria-current"]=g}else y.on=b}return n(this.tag,y,this.$slots.default)}};function Wo(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Yo="undefined"!=typeof window;function Qo(n,e,t,r,a){var o=e||[],i=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,a,o,i){var s=a.path,c=a.name;0;var l=a.pathToRegexpOptions||{},u=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return Eo(e.path+"/"+n)}(s,o,l.strict);"boolean"==typeof a.caseSensitive&&(l.sensitive=a.caseSensitive);var p={path:u,regex:Jo(u,l),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:c,parent:o,matchAs:i,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var o=i?Eo(i+"/"+a.path):void 0;n(e,t,r,a,p,o)}));t[p.path]||(e.push(p.path),t[p.path]=p);if(void 0!==a.alias)for(var d=Array.isArray(a.alias)?a.alias:[a.alias],f=0;f<d.length;++f){0;var m={path:d[f],children:a.children};n(e,t,r,m,o,p.path||"/")}c&&(r[c]||(r[c]=p))}(o,i,s,n,a)}));for(var c=0,l=o.length;c<l;c++)"*"===o[c]&&(o.push(o.splice(c,1)[0]),l--,c--);return{pathList:o,pathMap:i,nameMap:s}}function Jo(n,e){return Co(n,[],e)}function Ko(n,e){var t=Qo(n),r=t.pathList,a=t.pathMap,o=t.nameMap;function i(n,t,i){var s=qo(n,t,!1,e),l=s.name;if(l){var u=o[l];if(!u)return c(null,s);var p=u.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in s.params)&&p.indexOf(d)>-1&&(s.params[d]=t.params[d]);return s.path=Go(u.path,s.params),c(u,s,i)}if(s.path){s.params={};for(var f=0;f<r.length;f++){var m=r[f],h=a[m];if(Xo(h.regex,s.path,s.params))return c(h,s,i)}}return c(null,s)}function s(n,t){var r=n.redirect,a="function"==typeof r?r(fo(n,t,null,e)):r;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return c(null,t);var s=a,l=s.name,u=s.path,p=t.query,d=t.hash,f=t.params;if(p=s.hasOwnProperty("query")?s.query:p,d=s.hasOwnProperty("hash")?s.hash:d,f=s.hasOwnProperty("params")?s.params:f,l){o[l];return i({_normalized:!0,name:l,query:p,hash:d,params:f},void 0,t)}if(u){var m=function(n,e){return wo(n,e.parent?e.parent.path:"/",!0)}(u,n);return i({_normalized:!0,path:Go(m,f),query:p,hash:d},void 0,t)}return c(null,t)}function c(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=i({_normalized:!0,path:Go(t,e.params)});if(r){var a=r.matched,o=a[a.length-1];return e.params=r.params,c(o,e)}return c(null,e)}(0,t,n.matchAs):fo(n,t,r,e)}return{match:i,addRoute:function(n,e){var t="object"!=typeof n?o[n]:void 0;Qo([e||n],r,a,o,t),t&&t.alias.length&&Qo(t.alias.map((function(n){return{path:n,children:[e]}})),r,a,o,t)},getRoutes:function(){return r.map((function(n){return a[n]}))},addRoutes:function(n){Qo(n,r,a,o)}}}function Xo(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var a=1,o=r.length;a<o;++a){var i=n.keys[a-1];i&&(t[i.name||"pathMatch"]="string"==typeof r[a]?so(r[a]):r[a])}return!0}var Zo=Yo&&window.performance&&window.performance.now?window.performance:Date;function ni(){return Zo.now().toFixed(3)}var ei=ni();function ti(){return ei}function ri(n){return ei=n}var ai=Object.create(null);function oi(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=to({},window.history.state);return t.key=ti(),window.history.replaceState(t,"",e),window.addEventListener("popstate",ci),function(){window.removeEventListener("popstate",ci)}}function ii(n,e,t,r){if(n.app){var a=n.options.scrollBehavior;a&&n.app.$nextTick((function(){var o=function(){var n=ti();if(n)return ai[n]}(),i=a.call(n,e,t,r?o:null);i&&("function"==typeof i.then?i.then((function(n){fi(n,o)})).catch((function(n){0})):fi(i,o))}))}}function si(){var n=ti();n&&(ai[n]={x:window.pageXOffset,y:window.pageYOffset})}function ci(n){si(),n.state&&n.state.key&&ri(n.state.key)}function li(n){return pi(n.x)||pi(n.y)}function ui(n){return{x:pi(n.x)?n.x:window.pageXOffset,y:pi(n.y)?n.y:window.pageYOffset}}function pi(n){return"number"==typeof n}var di=/^#\d/;function fi(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var a=di.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(a){var o=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(a,o={x:pi((t=o).x)?t.x:0,y:pi(t.y)?t.y:0})}else li(n)&&(e=ui(n))}else r&&li(n)&&(e=ui(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var mi,hi=Yo&&((-1===(mi=window.navigator.userAgent).indexOf("Android 2.")&&-1===mi.indexOf("Android 4.0")||-1===mi.indexOf("Mobile Safari")||-1!==mi.indexOf("Chrome")||-1!==mi.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function gi(n,e){si();var t=window.history;try{if(e){var r=to({},t.state);r.key=ti(),t.replaceState(r,"",n)}else t.pushState({key:ri(ni())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function vi(n){gi(n,!0)}var bi={redirected:2,aborted:4,cancelled:8,duplicated:16};function yi(n,e){return xi(n,e,bi.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return _i.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function ki(n,e){return xi(n,e,bi.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function xi(n,e,t,r){var a=new Error(r);return a._isRouter=!0,a.from=n,a.to=e,a.type=t,a}var _i=["params","query","hash"];function wi(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function Ei(n,e){return wi(n)&&n._isRouter&&(null==e||n.type===e)}function Ti(n,e,t){var r=function(a){a>=n.length?t():n[a]?e(n[a],(function(){r(a+1)})):r(a+1)};r(0)}function Ci(n){return function(e,t,r){var a=!1,o=0,i=null;Ai(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){a=!0,o++;var c,l=Si((function(e){var a;((a=e).__esModule||ji&&"Module"===a[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Fo.extend(e),t.components[s]=e,--o<=0&&r()})),u=Si((function(n){var e="Failed to resolve async component "+s+": "+n;i||(i=wi(n)?n:new Error(e),r(i))}));try{c=n(l,u)}catch(n){u(n)}if(c)if("function"==typeof c.then)c.then(l,u);else{var p=c.component;p&&"function"==typeof p.then&&p.then(l,u)}}})),a||r()}}function Ai(n,e){return Oi(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function Oi(n){return Array.prototype.concat.apply([],n)}var ji="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Si(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var Pi=function(n,e){this.router=n,this.base=function(n){if(!n)if(Yo){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=ho,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Ii(n,e,t,r){var a=Ai(n,(function(n,r,a,o){var i=function(n,e){"function"!=typeof n&&(n=Fo.extend(n));return n.options[e]}(n,e);if(i)return Array.isArray(i)?i.map((function(n){return t(n,r,a,o)})):t(i,r,a,o)}));return Oi(r?a.reverse():a)}function zi(n,e){if(e)return function(){return n.apply(e,arguments)}}Pi.prototype.listen=function(n){this.cb=n},Pi.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},Pi.prototype.onError=function(n){this.errorCbs.push(n)},Pi.prototype.transitionTo=function(n,e,t){var r,a=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var o=this.current;this.confirmTransition(r,(function(){a.updateRoute(r),e&&e(r),a.ensureURL(),a.router.afterHooks.forEach((function(n){n&&n(r,o)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!a.ready&&(Ei(n,bi.redirected)&&o===ho||(a.ready=!0,a.readyErrorCbs.forEach((function(e){e(n)}))))}))},Pi.prototype.confirmTransition=function(n,e,t){var r=this,a=this.current;this.pending=n;var o,i,s=function(n){!Ei(n)&&wi(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},c=n.matched.length-1,l=a.matched.length-1;if(bo(n,a)&&c===l&&n.matched[c]===a.matched[l])return this.ensureURL(),n.hash&&ii(this.router,a,n,!1),s(((i=xi(o=a,n,bi.duplicated,'Avoided redundant navigation to current location: "'+o.fullPath+'".')).name="NavigationDuplicated",i));var u=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),p=u.updated,d=u.deactivated,f=u.activated,m=[].concat(function(n){return Ii(n,"beforeRouteLeave",zi,!0)}(d),this.router.beforeHooks,function(n){return Ii(n,"beforeRouteUpdate",zi)}(p),f.map((function(n){return n.beforeEnter})),Ci(f)),h=function(e,t){if(r.pending!==n)return s(ki(a,n));try{e(n,a,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return xi(n,e,bi.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(a,n))):wi(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(yi(a,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};Ti(m,h,(function(){Ti(function(n){return Ii(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,a,o){return n(r,a,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),o(n)}))}}(n,t,r)}))}(f).concat(r.router.resolveHooks),h,(function(){if(r.pending!==n)return s(ki(a,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){ko(n)}))}))}))},Pi.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},Pi.prototype.setupListeners=function(){},Pi.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=ho,this.pending=null};var Li=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Mi(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=hi&&t;r&&this.listeners.push(oi());var a=function(){var t=n.current,a=Mi(n.base);n.current===ho&&a===n._startLocation||n.transitionTo(a,(function(n){r&&ii(e,n,t,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){gi(Eo(r.base+n.fullPath)),ii(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){vi(Eo(r.base+n.fullPath)),ii(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Mi(this.base)!==this.current.fullPath){var e=Eo(this.base+this.current.fullPath);n?gi(e):vi(e)}},e.prototype.getCurrentLocation=function(){return Mi(this.base)},e}(Pi);function Mi(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(Eo(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var Ni=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=Mi(n);if(!/^\/#/.test(e))return window.location.replace(Eo(n+"/#"+e)),!0}(this.base)||Di()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=hi&&e;t&&this.listeners.push(oi());var r=function(){var e=n.current;Di()&&n.transitionTo(Bi(),(function(r){t&&ii(n.router,r,e,!0),hi||Ri(r.fullPath)}))},a=hi?"popstate":"hashchange";window.addEventListener(a,r),this.listeners.push((function(){window.removeEventListener(a,r)}))}},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){$i(n.fullPath),ii(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Ri(n.fullPath),ii(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Bi()!==e&&(n?$i(e):Ri(e))},e.prototype.getCurrentLocation=function(){return Bi()},e}(Pi);function Di(){var n=Bi();return"/"===n.charAt(0)||(Ri("/"+n),!1)}function Bi(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function Ui(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function $i(n){hi?gi(Ui(n)):window.location.hash=n}function Ri(n){hi?vi(Ui(n)):window.location.replace(Ui(n))}var Gi=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){Ei(n,bi.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Pi),qi=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ko(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!hi&&!1!==n.fallback,this.fallback&&(e="hash"),Yo||(e="abstract"),this.mode=e,e){case"history":this.history=new Li(this,n.base);break;case"hash":this.history=new Ni(this,n.base,this.fallback);break;case"abstract":this.history=new Gi(this,n.base);break;default:0}},Fi={currentRoute:{configurable:!0}};qi.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Fi.currentRoute.get=function(){return this.history&&this.history.current},qi.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Li||t instanceof Ni){var r=function(n){t.setupListeners(),function(n){var r=t.current,a=e.options.scrollBehavior;hi&&a&&"fullPath"in n&&ii(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},qi.prototype.beforeEach=function(n){return Vi(this.beforeHooks,n)},qi.prototype.beforeResolve=function(n){return Vi(this.resolveHooks,n)},qi.prototype.afterEach=function(n){return Vi(this.afterHooks,n)},qi.prototype.onReady=function(n,e){this.history.onReady(n,e)},qi.prototype.onError=function(n){this.history.onError(n)},qi.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},qi.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},qi.prototype.go=function(n){this.history.go(n)},qi.prototype.back=function(){this.go(-1)},qi.prototype.forward=function(){this.go(1)},qi.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},qi.prototype.resolve=function(n,e,t){var r=qo(n,e=e||this.history.current,t,this),a=this.match(r,e),o=a.redirectedFrom||a.fullPath;return{location:r,route:a,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?Eo(n+"/"+r):r}(this.history.base,o,this.mode),normalizedTo:r,resolved:a}},qi.prototype.getRoutes=function(){return this.matcher.getRoutes()},qi.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==ho&&this.history.transitionTo(this.history.getCurrentLocation())},qi.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==ho&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(qi.prototype,Fi);var Hi=qi;function Vi(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}qi.install=function n(e){if(!n.installed||Fo!==e){n.installed=!0,Fo=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",xo),e.component("RouterLink",Vo);var a=e.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},qi.version="3.6.5",qi.isNavigationFailure=Ei,qi.NavigationFailureType=bi,qi.START_LOCATION=ho,Yo&&window.Vue&&window.Vue.use(qi);t(105);t(127),t(16);var Wi={NotFound:()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,336)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,335))},Yi={"v-1e18f8a3":()=>t.e(6).then(t.bind(null,337)),"v-3269a5d4":()=>t.e(7).then(t.bind(null,338)),"v-2a013426":()=>t.e(8).then(t.bind(null,339)),"v-eb29258c":()=>t.e(9).then(t.bind(null,340)),"v-4cd0a145":()=>t.e(11).then(t.bind(null,341)),"v-5334f5d2":()=>t.e(10).then(t.bind(null,342)),"v-5f0e8e19":()=>t.e(12).then(t.bind(null,343)),"v-6ff91c7e":()=>t.e(13).then(t.bind(null,344)),"v-78150311":()=>t.e(15).then(t.bind(null,345)),"v-6b050715":()=>t.e(14).then(t.bind(null,346)),"v-31c0582d":()=>t.e(16).then(t.bind(null,347)),"v-0d0bcb1d":()=>t.e(17).then(t.bind(null,348)),"v-2b7f69e2":()=>t.e(18).then(t.bind(null,349)),"v-56d45f57":()=>t.e(19).then(t.bind(null,350)),"v-40bee640":()=>t.e(20).then(t.bind(null,351)),"v-d1812180":()=>t.e(21).then(t.bind(null,352)),"v-03986419":()=>t.e(22).then(t.bind(null,353)),"v-2abb7540":()=>t.e(23).then(t.bind(null,354)),"v-585a1a94":()=>t.e(24).then(t.bind(null,355)),"v-a0e8f430":()=>t.e(25).then(t.bind(null,356)),"v-32a219ba":()=>t.e(26).then(t.bind(null,357)),"v-c8924ece":()=>t.e(27).then(t.bind(null,358)),"v-30dd7cef":()=>t.e(28).then(t.bind(null,359)),"v-8ecbdc78":()=>t.e(29).then(t.bind(null,360)),"v-740e9683":()=>t.e(31).then(t.bind(null,361)),"v-3e8e7a28":()=>t.e(30).then(t.bind(null,362)),"v-304996c4":()=>t.e(32).then(t.bind(null,363)),"v-dca86fba":()=>t.e(33).then(t.bind(null,364)),"v-0e74c264":()=>t.e(34).then(t.bind(null,365)),"v-1182c21f":()=>t.e(35).then(t.bind(null,366)),"v-3e2df355":()=>t.e(36).then(t.bind(null,367)),"v-d3e353c2":()=>t.e(37).then(t.bind(null,368)),"v-257d5e0b":()=>t.e(38).then(t.bind(null,369)),"v-00422125":()=>t.e(39).then(t.bind(null,370)),"v-93146184":()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,371))};function Qi(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Ji=/-(\w)/g,Ki=Qi(n=>n.replace(Ji,(n,e)=>e?e.toUpperCase():"")),Xi=/\B([A-Z])/g,Zi=Qi(n=>n.replace(Xi,"-$1").toLowerCase()),ns=Qi(n=>n.charAt(0).toUpperCase()+n.slice(1));function es(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(ns(Ki(e))):n(ns(e))||n(Zi(e))}const ts=Object.assign({},Wi,Yi),rs=n=>ts[n],as=n=>Yi[n],os=n=>Wi[n],is=n=>Wt.component(n);function ss(n){return es(as,n)}function cs(n){return es(os,n)}function ls(n){return es(rs,n)}function us(n){return es(is,n)}function ps(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!us(n)&&ls(n)){const e=await ls(n)();Wt.component(n,e.default)}}))}function ds(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var fs=t(91),ms=t.n(fs),hs=t(92),gs=t.n(hs),vs={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${gs()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=ys(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=ks(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return ms()([{name:"description",content:this.$description}],n,this.siteMeta,xs)},updateCanonicalLink(){bs(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",ys(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){ks(null,this.currentMetaTags),bs()}};function bs(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function ys(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function ks(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function xs(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var _s=t(51),ws={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(_s)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),a=window.innerHeight+t;for(let n=0;n<e.length;n++){const o=e[n],i=e[n+1],s=0===n&&0===t||t>=o.parentElement.offsetTop+10&&(!i||t<i.parentElement.offsetTop-10),c=decodeURIComponent(this.$route.hash);if(s&&c!==decodeURIComponent(o.hash)){const t=o;if(a===r)for(let t=n+1;t<e.length;t++)if(c===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},Es=t(24),Ts=t.n(Es),Cs={mounted(){Ts.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Wt.component(n.name)||Ts.a.start(),t()}),this.$router.afterEach(()=>{Ts.a.done(),this.isSidebarOpen=!1})}};t(239),t(240);class As{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:n="",duration:e=3e3}){let t=document.createElement("div");t.className="message move-in",t.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${n}</div>\n    `,this.containerEl.appendChild(t),e>0&&setTimeout(()=>{this.close(t)},e)}close(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",()=>{n.remove()})}}var Os={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(n=>{document.querySelectorAll(n).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(n){if(n.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(n.innerText)}),n.appendChild(e),n.classList.add("codecopy-enabled")},copyToClipboard(n){const e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new As).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}};!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css","top"===t&&r.firstChild?r.insertBefore(a,r.firstChild):r.appendChild(a),a.styleSheet?a.styleSheet.cssText=n:a.appendChild(document.createTextNode(n))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var js={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},Ss={},Ps=function(n){return'<div id="app">\n'.concat(n,"\n</div>")},Is=function(n){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[n]?window.$VUEPRESS_DEMO_BLOCK[n]:js[n]},zs=function n(e,t,r){var a=document.createElement(e);return t&&Object.keys(t).forEach((function(n){if(n.indexOf("data"))a[n]=t[n];else{var e=n.replace("data","");a.dataset[e]=t[n]}})),r&&r.forEach((function(e){var t=e.tag,r=e.attrs,o=e.children;a.appendChild(n(t,r,o))})),a},Ls=function(n,e,t){var r,a=(r=n.querySelectorAll(".".concat(e)),Array.prototype.slice.call(r));return 1!==a.length||t?a:a[0]},Ms=function(n,e){var t,r,a=n.match(/<style>([\s\S]+)<\/style>/),o=n.match(/<template>([\s\S]+)<\/template>/),i=n.match(/<script>([\s\S]+)<\/script>/),s={css:a&&a[1].replace(/^\n|\n$/g,""),html:o&&o[1].replace(/^\n|\n$/g,""),js:i&&i[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};s.htmlTpl=Ps(s.html),s.jsTpl=(t=s.js,r=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(r,"\n})")),s.script=function(n,e){var t=n.split(/export\s+default/),r="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),a=window.Babel?window.Babel.transform(r,{presets:["es2015"]}).code:r,o=[eval][0](a);return o.template=e,o}(s.js,s.html);var c=Is("vue");return s.jsLib.unshift(c),s},Ns=function(n,e){var t,r=n.match(/<style>([\s\S]+)<\/style>/),a=n.match(/<html>([\s\S]+)<\/html>/),o=n.match(/<script>([\s\S]+)<\/script>/),i={css:r&&r[1].replace(/^\n|\n$/g,""),html:a&&a[1].replace(/^\n|\n$/g,""),js:o&&o[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return i.htmlTpl=i.html,i.jsTpl=i.js,i.script=(t=i.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),i},Ds=function(n){return n=n.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),n+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function Bs(){var n=Ls(document,"vuepress-plugin-demo-block__wrapper",!0);n.length?n.forEach((function(n){if("true"!==n.dataset.created){n.style.display="block";var e=Ls(n,"vuepress-plugin-demo-block__code"),t=Ls(n,"vuepress-plugin-demo-block__display"),r=Ls(n,"vuepress-plugin-demo-block__footer"),a=Ls(t,"vuepress-plugin-demo-block__app"),o=decodeURIComponent(n.dataset.code),i=decodeURIComponent(n.dataset.config),s=decodeURIComponent(n.dataset.type);i=i?JSON.parse(i):{};var c=e.querySelector("div").clientHeight,l="react"===s?function(n,e){var t=(0,window.Babel.transform)(n,{presets:["es2015","react"]}).code,r="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),a=new Function("return ".concat(r))(),o={js:a,css:a.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:Ds(n),htmlTpl:Ps("")},i=Is("react"),s=Is("reactDOM");return o.jsLib.unshift(i,s),o}(o,i):"vanilla"===s?Ns(o,i):Ms(o,i),u=zs("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(r.appendChild(u),u.addEventListener("click",Us.bind(null,u,c,e,r)),Is("jsfiddle")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,o=n.cssLib,i=a.concat(o).concat(Is("cssLib")).concat(Is("jsLib")).join(",");return zs("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:r}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:i}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(l)),Is("codepen")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,o=n.cssLib,i=JSON.stringify({css:e,html:t,js:r,js_external:a.concat(Is("jsLib")).join(";"),css_external:o.concat(Is("cssLib")).join(";"),layout:Is("codepenLayout"),js_pre_processor:Is("codepenJsProcessor"),editors:Is("codepenEditors")});return zs("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:i}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(l)),void 0!==i.horizontal?i.horizontal:Is("horizontal")){n.classList.add("vuepress-plugin-demo-block__horizontal");var p=e.firstChild.cloneNode(!0);p.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(p)}if(l.css&&function(n){if(!Ss[n]){var e=zs("style",{innerHTML:n});document.body.appendChild(e),Ss[n]=!0}}(l.css),"react"===s)ReactDOM.render(React.createElement(l.js),a);else if("vue"===s){var d=(new(Vue.extend(l.script))).$mount();a.appendChild(d.$el)}else"vanilla"===s&&(a.innerHTML=l.html,new Function("return (function(){".concat(l.script,"})()"))());n.dataset.created="true"}})):setTimeout((function(n){Bs()}),300)}function Us(n,e,t,r){var a="1"!==n.dataset.isExpand;t.style.height=a?"".concat(e,"px"):0,a?r.classList.add("vuepress-plugin-demo-block__show-link"):r.classList.remove("vuepress-plugin-demo-block__show-link"),n.dataset.isExpand=a?"1":"0"}var $s={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},Bs()},updated:function(){Bs()}},Rs="auto",Gs="zoom-in",qs="zoom-out",Fs="grab",Hs="move";function Vs(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a={passive:!1};r?n.addEventListener(e,t,a):n.removeEventListener(e,t,a)}function Ws(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function Ys(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Qs(n,e,t){!function(n){var e=Js,t=Ks;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var a=n.transform;delete n.transform,n[t]=a}}(e);var r=n.style,a={};for(var o in e)t&&(a[o]=r[o]||""),r[o]=e[o];return a}var Js="transition",Ks="transform",Xs="transform",Zs="transitionend";var nc=function(){},ec={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:nc,onClose:nc,onGrab:nc,onMove:nc,onRelease:nc,onBeforeOpen:nc,onBeforeClose:nc,onBeforeGrab:nc,onBeforeRelease:nc,onImageLoading:nc,onImageLoaded:nc},tc={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),ac(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,a=this.lastScrollPosition.y-t,o=this.options.scrollThreshold;(Math.abs(a)>=o||Math.abs(r)>=o)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(rc(n)&&!ac(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){rc(n)&&!ac(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function rc(n){return 0===n.button}function ac(n){return n.metaKey||n.ctrlKey}var oc={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Qs(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Vs(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Qs(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},ic="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},sc=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),cc=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},lc={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Ys(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,a=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Fs:qs,transition:Xs+"\n        "+r+"s\n        "+a,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Qs(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Qs(this.el,{transform:"none"})},grab:function(n,e,t){var r=uc(),a=r.x-n,o=r.y-e;Qs(this.el,{cursor:Hs,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=uc(),a=r.x-n,o=r.y-e;Qs(this.el,{transition:Xs,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Qs(this.el,this.styleClose)},restoreOpenStyle:function(){Qs(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=uc(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,a=r.customSize,o=r.scaleBase;if(!a&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(a&&"object"===(void 0===a?"undefined":ic(a)))return{x:a.width/this.rect.width,y:a.height/this.rect.height};var i=this.rect.width/2,s=this.rect.height/2,c=uc(),l={x:c.x-i,y:c.y-s},u=l.x/i,p=l.y/s,d=o+Math.min(u,p);if(a&&"string"==typeof a){var f=t||this.el.naturalWidth,m=e||this.el.naturalHeight,h=parseFloat(a)*f/(100*this.rect.width),g=parseFloat(a)*m/(100*this.rect.height);if(d>h||d>g)return{x:h,y:g}}return{x:d,y:d}}};function uc(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function pc(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){Vs(n,r,e[r],t)}))}var dc=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(lc),this.overlay=Object.create(oc),this.handler=Object.create(tc),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=cc({},ec,e),this.overlay.init(this),this.handler.init(this)}return sc(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Gs,Vs(n,"click",this.handler.click),this.options.preloadImage&&Ws(Ys(n)));return this}},{key:"config",value:function(n){return n?(cc(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var a=this.target.srcOriginal;null!=a&&(this.options.onImageLoading(r),Ws(a,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Vs(document,"scroll",this.handler.scroll),Vs(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Vs(window,"resize",this.handler.resizeWindow);var o=function n(){Vs(r,Zs,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&pc(document,e.handler,!0),t(r)};return Vs(r,Zs,o),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Rs,this.overlay.fadeOut(),this.target.zoomOut(),Vs(document,"scroll",this.handler.scroll,!1),Vs(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Vs(window,"resize",this.handler.resizeWindow,!1);var r=function r(){Vs(t,Zs,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&pc(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Vs(t,Zs,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var a=this.target.el;this.options.onBeforeGrab(a),this.released=!1,this.target.grab(n,e,t);var o=function n(){Vs(a,Zs,n,!1),r(a)};return Vs(a,Zs,o),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Hs,this.target.move(n,e,t);var a=this.target.el,o=function n(){Vs(a,Zs,n,!1),r(a)};return Vs(a,Zs,o),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Rs,this.target.restoreOpenStyle();var r=function r(){Vs(t,Zs,r,!1),n.lock=!1,n.released=!0,e(t)};return Vs(t,Zs,r),this}}}]),n}();const fc=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),mc=Number("500");class hc{constructor(){this.instance=new dc(fc)}update(n=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(n)}updateDelay(n=".theme-vdoing-content img:not(.no-zoom)",e=mc){setTimeout(()=>this.update(n),e)}}var gc=[vs,ws,Cs,Os,$s,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new hc,this.$vuepress.zooming.updateDelay()}}],vc={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return ds("layout",n),Wt.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},bc=t(8),yc=Object(bc.a)(vc,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(yc,"mixins",gc);const kc=[{name:"v-1e18f8a3",path:"/pages/1ba529/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-1e18f8a3").then(t)}},{path:"/pages/1ba529/index.html",redirect:"/pages/1ba529/"},{path:"/01.开发认知扩展/01.指南/01.手册的初衷以及适用人群.html",redirect:"/pages/1ba529/"},{name:"v-3269a5d4",path:"/pages/4d70dc/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-3269a5d4").then(t)}},{path:"/pages/4d70dc/index.html",redirect:"/pages/4d70dc/"},{path:"/01.开发认知扩展/01.指南/03.介绍.html",redirect:"/pages/4d70dc/"},{name:"v-2a013426",path:"/pages/f5ef63/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-2a013426").then(t)}},{path:"/pages/f5ef63/index.html",redirect:"/pages/f5ef63/"},{path:"/01.开发认知扩展/01.指南/04.JAVA技术栈总览.html",redirect:"/pages/f5ef63/"},{name:"v-eb29258c",path:"/pages/b3dd9c/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-eb29258c").then(t)}},{path:"/pages/b3dd9c/index.html",redirect:"/pages/b3dd9c/"},{path:"/01.开发认知扩展/04.技术场景/01.jacoco线上代码覆盖率分析.html",redirect:"/pages/b3dd9c/"},{name:"v-4cd0a145",path:"/pages/3001d9/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-4cd0a145").then(t)}},{path:"/pages/3001d9/index.html",redirect:"/pages/3001d9/"},{path:"/02.好文分享/01.cpp自救指南/01.C++自救指南-总览.html",redirect:"/pages/3001d9/"},{name:"v-5334f5d2",path:"/pages/6f6205/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-5334f5d2").then(t)}},{path:"/pages/6f6205/index.html",redirect:"/pages/6f6205/"},{path:"/01.开发认知扩展/04.技术场景/02.vuepress搭建个人博客.html",redirect:"/pages/6f6205/"},{name:"v-5f0e8e19",path:"/pages/fe7e63/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-5f0e8e19").then(t)}},{path:"/pages/fe7e63/index.html",redirect:"/pages/fe7e63/"},{path:"/02.好文分享/01.cpp自救指南/02.C++自救指南-工具篇.html",redirect:"/pages/fe7e63/"},{name:"v-6ff91c7e",path:"/pages/9133cc/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-6ff91c7e").then(t)}},{path:"/pages/9133cc/index.html",redirect:"/pages/9133cc/"},{path:"/02.好文分享/01.cpp自救指南/03.C++自救指南-学习路线篇.html",redirect:"/pages/9133cc/"},{name:"v-78150311",path:"/pages/926294/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-78150311").then(t)}},{path:"/pages/926294/index.html",redirect:"/pages/926294/"},{path:"/02.好文分享/01.cpp自救指南/05.C++自救指南-资源分享篇.html",redirect:"/pages/926294/"},{name:"v-6b050715",path:"/pages/b217bd/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-6b050715").then(t)}},{path:"/pages/b217bd/index.html",redirect:"/pages/b217bd/"},{path:"/02.好文分享/01.cpp自救指南/04.C++自救指南-方向梳理篇.html",redirect:"/pages/b217bd/"},{name:"v-31c0582d",path:"/pages/5a3138/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-31c0582d").then(t)}},{path:"/pages/5a3138/index.html",redirect:"/pages/5a3138/"},{path:"/02.好文分享/01.cpp自救指南/06.C++自救指南-项目实战篇.html",redirect:"/pages/5a3138/"},{name:"v-0d0bcb1d",path:"/pages/771788/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-0d0bcb1d").then(t)}},{path:"/pages/771788/index.html",redirect:"/pages/771788/"},{path:"/02.好文分享/02.go指南/01.go语言开发.html",redirect:"/pages/771788/"},{name:"v-2b7f69e2",path:"/pages/950801/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-2b7f69e2").then(t)}},{path:"/pages/950801/index.html",redirect:"/pages/950801/"},{path:"/03.面经和分享/01.真正的面经/01.真正的面经Ⅰ如何包装简历.html",redirect:"/pages/950801/"},{name:"v-56d45f57",path:"/pages/6ae607/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-56d45f57").then(t)}},{path:"/pages/6ae607/index.html",redirect:"/pages/6ae607/"},{path:"/03.面经和分享/01.真正的面经/02.真正的面经Ⅱ如何投递简历.html",redirect:"/pages/6ae607/"},{name:"v-40bee640",path:"/pages/527072/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-40bee640").then(t)}},{path:"/pages/527072/index.html",redirect:"/pages/527072/"},{path:"/03.面经和分享/01.真正的面经/03.真正的面经Ⅲ面试流程.html",redirect:"/pages/527072/"},{name:"v-d1812180",path:"/pages/8d3967/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-d1812180").then(t)}},{path:"/pages/8d3967/index.html",redirect:"/pages/8d3967/"},{path:"/03.面经和分享/01.真正的面经/04.真正的面经Ⅳ技术面解密.html",redirect:"/pages/8d3967/"},{name:"v-03986419",path:"/pages/ec2e25/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-03986419").then(t)}},{path:"/pages/ec2e25/index.html",redirect:"/pages/ec2e25/"},{path:"/03.面经和分享/01.真正的面经/05.真正的面经ⅤHr面解密.html",redirect:"/pages/ec2e25/"},{name:"v-2abb7540",path:"/pages/6c697d/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-2abb7540").then(t)}},{path:"/pages/6c697d/index.html",redirect:"/pages/6c697d/"},{path:"/03.面经和分享/01.真正的面经/06.真正的面经Ⅵ练手项目怎么选.html",redirect:"/pages/6c697d/"},{name:"v-585a1a94",path:"/pages/914d5c/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-585a1a94").then(t)}},{path:"/pages/914d5c/index.html",redirect:"/pages/914d5c/"},{path:"/03.面经和分享/01.真正的面经/07.真正的面经Ⅶ开源社区的意义.html",redirect:"/pages/914d5c/"},{name:"v-a0e8f430",path:"/pages/88cd1f/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-a0e8f430").then(t)}},{path:"/pages/88cd1f/index.html",redirect:"/pages/88cd1f/"},{path:"/03.面经和分享/03.相关文章/02.25届实习内推.html",redirect:"/pages/88cd1f/"},{name:"v-32a219ba",path:"/pages/daa40c/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-32a219ba").then(t)}},{path:"/pages/daa40c/index.html",redirect:"/pages/daa40c/"},{path:"/05.友情链接/01.友情链接.html",redirect:"/pages/daa40c/"},{name:"v-c8924ece",path:"/pages/385249/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-c8924ece").then(t)}},{path:"/pages/385249/index.html",redirect:"/pages/385249/"},{path:"/06.参与分享/01.团队介绍.html",redirect:"/pages/385249/"},{name:"v-30dd7cef",path:"/pages/c91501/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-30dd7cef").then(t)}},{path:"/pages/c91501/index.html",redirect:"/pages/c91501/"},{path:"/06.参与分享/02.如何加入我们.html",redirect:"/pages/c91501/"},{name:"v-8ecbdc78",path:"/pages/771792/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-8ecbdc78").then(t)}},{path:"/pages/771792/index.html",redirect:"/pages/771792/"},{path:"/07.八股文/01.微服务/01.微服务介绍.html",redirect:"/pages/771792/"},{name:"v-740e9683",path:"/pages/c95a2f/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-740e9683").then(t)}},{path:"/pages/c95a2f/index.html",redirect:"/pages/c95a2f/"},{path:"/07.八股文/01.微服务/03.Ribbon负载均衡.html",redirect:"/pages/c95a2f/"},{name:"v-3e8e7a28",path:"/pages/50142d/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-3e8e7a28").then(t)}},{path:"/pages/50142d/index.html",redirect:"/pages/50142d/"},{path:"/07.八股文/01.微服务/02.EureKa注册中心.html",redirect:"/pages/50142d/"},{name:"v-304996c4",path:"/pages/c321d3/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-304996c4").then(t)}},{path:"/pages/c321d3/index.html",redirect:"/pages/c321d3/"},{path:"/07.八股文/01.微服务/04.Nacos注册中心、配置中心.html",redirect:"/pages/c321d3/"},{name:"v-dca86fba",path:"/pages/00990d/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-dca86fba").then(t)}},{path:"/pages/00990d/index.html",redirect:"/pages/00990d/"},{path:"/07.八股文/01.微服务/05.OpenFeign远程调用.html",redirect:"/pages/00990d/"},{name:"v-0e74c264",path:"/pages/009d95/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-0e74c264").then(t)}},{path:"/pages/009d95/index.html",redirect:"/pages/009d95/"},{path:"/07.八股文/01.微服务/06.Gateway统一网关.html",redirect:"/pages/009d95/"},{name:"v-1182c21f",path:"/pages/947d80/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-1182c21f").then(t)}},{path:"/pages/947d80/index.html",redirect:"/pages/947d80/"},{path:"/07.八股文/01.微服务/07.Docker.html",redirect:"/pages/947d80/"},{name:"v-3e2df355",path:"/pages/s87jds/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-3e2df355").then(t)}},{path:"/pages/s87jds/index.html",redirect:"/pages/s87jds/"},{path:"/07.八股文/01.微服务/08.DockerCompose.html",redirect:"/pages/s87jds/"},{name:"v-d3e353c2",path:"/pages/940163/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-d3e353c2").then(t)}},{path:"/pages/940163/index.html",redirect:"/pages/940163/"},{path:"/07.八股文/01.微服务/09.RabbitMQ.html",redirect:"/pages/940163/"},{name:"v-257d5e0b",path:"/pages/384910/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-257d5e0b").then(t)}},{path:"/pages/384910/index.html",redirect:"/pages/384910/"},{path:"/07.八股文/01.微服务/10.Sentinel微服务保护.html",redirect:"/pages/384910/"},{name:"v-00422125",path:"/blog/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-00422125").then(t)}},{path:"/blog/index.html",redirect:"/blog/"},{path:"/@pages/archivesPage.html",redirect:"/blog/"},{name:"v-93146184",path:"/",component:yc,beforeEnter:(n,e,t)=>{ps("Layout","v-93146184").then(t)}},{path:"/index.html",redirect:"/"},{path:"*",component:yc}],xc={title:"开发自救手册",description:"一本注重提升思维能力的开发自救手册。",base:"/",headTags:[["link",{rel:"icon",href:"/img/favicon.ico"}],["meta",{name:"keywords",content:"vuepress,theme,blog,vdoing"}],["meta",{name:"theme-color",content:"#11a8cd"}],["meta",{name:"wwads-cn-verify",content:"6c4b761a28b734fe93831e3fb400ce87"}],["script",{src:"https://cdn.wwads.cn/js/makemoney.js",type:"text/javascript"}]],pages:[{title:"手册的初衷以及适用人群",frontmatter:{title:"手册的初衷以及适用人群",date:"2024-04-26T14:49:24.000Z",permalink:"/pages/1ba529/"},regularPath:"/01.%E5%BC%80%E5%8F%91%E8%AE%A4%E7%9F%A5%E6%89%A9%E5%B1%95/01.%E6%8C%87%E5%8D%97/01.%E6%89%8B%E5%86%8C%E7%9A%84%E5%88%9D%E8%A1%B7%E4%BB%A5%E5%8F%8A%E9%80%82%E7%94%A8%E4%BA%BA%E7%BE%A4.html",relativePath:"01.开发认知扩展/01.指南/01.手册的初衷以及适用人群.md",key:"v-1e18f8a3",path:"/pages/1ba529/",headers:[{level:2,title:"八股？",slug:"八股",normalizedTitle:"八股？",charIndex:118},{level:2,title:"适用人群",slug:"适用人群",normalizedTitle:"适用人群",charIndex:459},{level:2,title:"是否收费？",slug:"是否收费",normalizedTitle:"是否收费？",charIndex:573}],headersStr:"八股？ 适用人群 是否收费？",content:"开发自救手册是由我们几个双非本计算机进入大厂的同学一同创建，旨在提供一个渠道，不定期的分享技术包括解答问题。 同时帮助同学减少校招信息差，了解真实的就业环境，欢迎有经验或者感兴趣的小伙伴进入qq群相互交流（961331479）\n\n\n# 八股？\n\n我们摒弃传统八股文，对于很多学生来说，最缺乏的是项目的经验，缺乏的是真实沟通的技巧，对于我来说，我在大学期间带了几个项目， 从软件方案，技术方案，到代码实现，优化，需求讨论，都是我去做，同时我也是Alibaba Nacos Contributor。还有一位 作者在本科期间被提名为Apache EventMesh Committer，在联想实习了半年以上，其余的几位作者，也已进入各自的大厂实习。\n\n我们几个人的涉猎范围比较广，来自于阿里、京东、腾讯、美团、小红书等不同大厂，业务涉猎范围包含中台、交易、履约、供应链、直播、终端等。 所以我们每个人对业务架构，技术维度的理解都是不同的，\n\n所以我坚信，我们可以为在校的学生（本硕）提供或多或少的技术思维上的帮助。\n\n\n# 适用人群\n\n * 以后想找后端开发岗，或中台技术岗\n * 八股背的很多，但是项目讲不出亮点\n * 喜欢研究技术黑科技\n * 只会用一些中间件，不知道真实落地场景\n * 想学习项目架构\n * 觉得自己的思维和技术陷入瓶颈\n\n\n# 是否收费？\n\nqq群以及该手册永久免费，对手册内容有建议或者修改的地方可以提issue或者到qq群提建议",normalizedContent:"开发自救手册是由我们几个双非本计算机进入大厂的同学一同创建，旨在提供一个渠道，不定期的分享技术包括解答问题。 同时帮助同学减少校招信息差，了解真实的就业环境，欢迎有经验或者感兴趣的小伙伴进入qq群相互交流（961331479）\n\n\n# 八股？\n\n我们摒弃传统八股文，对于很多学生来说，最缺乏的是项目的经验，缺乏的是真实沟通的技巧，对于我来说，我在大学期间带了几个项目， 从软件方案，技术方案，到代码实现，优化，需求讨论，都是我去做，同时我也是alibaba nacos contributor。还有一位 作者在本科期间被提名为apache eventmesh committer，在联想实习了半年以上，其余的几位作者，也已进入各自的大厂实习。\n\n我们几个人的涉猎范围比较广，来自于阿里、京东、腾讯、美团、小红书等不同大厂，业务涉猎范围包含中台、交易、履约、供应链、直播、终端等。 所以我们每个人对业务架构，技术维度的理解都是不同的，\n\n所以我坚信，我们可以为在校的学生（本硕）提供或多或少的技术思维上的帮助。\n\n\n# 适用人群\n\n * 以后想找后端开发岗，或中台技术岗\n * 八股背的很多，但是项目讲不出亮点\n * 喜欢研究技术黑科技\n * 只会用一些中间件，不知道真实落地场景\n * 想学习项目架构\n * 觉得自己的思维和技术陷入瓶颈\n\n\n# 是否收费？\n\nqq群以及该手册永久免费，对手册内容有建议或者修改的地方可以提issue或者到qq群提建议",charsets:{cjk:!0},lastUpdated:"2024/04/28, 17:23:46",lastUpdatedTimestamp:1714325026e3},{title:"介绍",frontmatter:{title:"介绍",date:"2024-04-26T14:48:20.000Z",permalink:"/pages/4d70dc/"},regularPath:"/01.%E5%BC%80%E5%8F%91%E8%AE%A4%E7%9F%A5%E6%89%A9%E5%B1%95/01.%E6%8C%87%E5%8D%97/03.%E4%BB%8B%E7%BB%8D.html",relativePath:"01.开发认知扩展/01.指南/03.介绍.md",key:"v-3269a5d4",path:"/pages/4d70dc/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/28, 17:23:46",lastUpdatedTimestamp:1714325026e3},{title:"JAVA涉及技术总览",frontmatter:{title:"JAVA涉及技术总览",date:"2024-04-26T17:27:03.000Z",author:"July",permalink:"/pages/f5ef63/"},regularPath:"/01.%E5%BC%80%E5%8F%91%E8%AE%A4%E7%9F%A5%E6%89%A9%E5%B1%95/01.%E6%8C%87%E5%8D%97/04.JAVA%E6%8A%80%E6%9C%AF%E6%A0%88%E6%80%BB%E8%A7%88.html",relativePath:"01.开发认知扩展/01.指南/04.JAVA技术栈总览.md",key:"v-2a013426",path:"/pages/f5ef63/",headers:[{level:2,title:"技术中间件",slug:"技术中间件",normalizedTitle:"技术中间件",charIndex:49},{level:2,title:"进阶中间件",slug:"进阶中间件",normalizedTitle:"进阶中间件",charIndex:416},{level:3,title:"Java后端开发岗",slug:"java后端开发岗",normalizedTitle:"java后端开发岗",charIndex:509}],headersStr:"技术中间件 进阶中间件 Java后端开发岗",content:"本文主要介绍很多同学想知道的技术路线（技术栈），顺便扩展一些值得了解或者深入学习的中间件\n\n\n# 技术中间件\n\n开发语言：JAVA\nWeb框架：Spring Boot\n微服务解决方案：Spring Cloud、Dubbo + 注册中心\n消息队列：Kafka、RabbitMQ、ActiveMQ、RocketMQ\n缓存中间件：Redis、Memcached、Etcd（分布式缓存，go）\nRPC框架：Dubbo、gRPC、Thrift\n数据库中间件：Sharding jdbc（分库分表）\n配置中心：Nacos、Polaris（腾讯开源，go）、Apollo、Github Config\n分布式事务：Seata（已捐给Apache）\nMetric指标：Prometheus+Grafana\n注册中心：Nacos、Polaris、Eureka、Zookeeper、Etcd、Consul\n限流：Sentinel、Hystrix\n\n\n# 进阶中间件\n\nEventMesh：\nAntlr4：\nfastjson2：\nSkyWalking：\n数仓：doris、starrocks、spark\nCamel：\nJacoco：\n\n\n# Java后端开发岗\n\nJava基础：多线程，IO，并发安全（JUC和锁），反射\nSpringboot框架： starter，aop，启动流程\nmybatis：orm框架\nmybatis-plus: mybatis升级\nredis，mysql等中间件：数据库&缓存",normalizedContent:"本文主要介绍很多同学想知道的技术路线（技术栈），顺便扩展一些值得了解或者深入学习的中间件\n\n\n# 技术中间件\n\n开发语言：java\nweb框架：spring boot\n微服务解决方案：spring cloud、dubbo + 注册中心\n消息队列：kafka、rabbitmq、activemq、rocketmq\n缓存中间件：redis、memcached、etcd（分布式缓存，go）\nrpc框架：dubbo、grpc、thrift\n数据库中间件：sharding jdbc（分库分表）\n配置中心：nacos、polaris（腾讯开源，go）、apollo、github config\n分布式事务：seata（已捐给apache）\nmetric指标：prometheus+grafana\n注册中心：nacos、polaris、eureka、zookeeper、etcd、consul\n限流：sentinel、hystrix\n\n\n# 进阶中间件\n\neventmesh：\nantlr4：\nfastjson2：\nskywalking：\n数仓：doris、starrocks、spark\ncamel：\njacoco：\n\n\n# java后端开发岗\n\njava基础：多线程，io，并发安全（juc和锁），反射\nspringboot框架： starter，aop，启动流程\nmybatis：orm框架\nmybatis-plus: mybatis升级\nredis，mysql等中间件：数据库&缓存",charsets:{cjk:!0},lastUpdated:"2024/04/29, 13:00:47",lastUpdatedTimestamp:1714395647e3},{title:"jacoco线上代码覆盖率分析",frontmatter:{title:"jacoco线上代码覆盖率分析",date:"2024-04-26T22:42:20.000Z",author:"July",permalink:"/pages/b3dd9c/"},regularPath:"/01.%E5%BC%80%E5%8F%91%E8%AE%A4%E7%9F%A5%E6%89%A9%E5%B1%95/04.%E6%8A%80%E6%9C%AF%E5%9C%BA%E6%99%AF/01.jacoco%E7%BA%BF%E4%B8%8A%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87%E5%88%86%E6%9E%90.html",relativePath:"01.开发认知扩展/04.技术场景/01.jacoco线上代码覆盖率分析.md",key:"v-eb29258c",path:"/pages/b3dd9c/",headers:[{level:2,title:"背景",slug:"背景",normalizedTitle:"背景",charIndex:2},{level:3,title:"调研",slug:"调研",normalizedTitle:"调研",charIndex:146},{level:3,title:"理论",slug:"理论",normalizedTitle:"理论",charIndex:330},{level:3,title:"实践",slug:"实践",normalizedTitle:"实践",charIndex:738},{level:4,title:"启动",slug:"启动",normalizedTitle:"启动",charIndex:570},{level:3,title:"导出exec并分析",slug:"导出exec并分析",normalizedTitle:"导出exec并分析",charIndex:3864},{level:4,title:"分析",slug:"分析",normalizedTitle:"分析",charIndex:55},{level:3,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:4356}],headersStr:"背景 调研 理论 实践 启动 导出exec并分析 分析 总结",content:'# 背景\n\n> 代码覆盖率，就是衡量代码分支被运行到的比例，所以被称作覆盖率。\n\n大家都知道，jacoco可以分析单测分支覆盖率，例如用Idea可以统计单测覆盖率。 但是在线上运行的核心链路中，代码沉淀好几年，俗称shi山代码，又如何对线上代码影响最小的方式，统计线上覆盖率并重构。\n\n\n# 调研\n\nJacoco插桩原理简介：利用Javaagent的修改字节码技术，每个类分配一个Boolean数组，在一些分支，方法中插入boolean修改值，这样走到该方法或者分支上的Boolean值就是true，通过这种方式可以分析出是否覆盖。\n该插桩对代码影响可以说非常小，对接口rt也基本不会有影响，可以选择jacoco做覆盖率分析，对线上应用影响可以忽略。\n\n\n# 理论\n\nJacoco agent有两种模式\n\n * 模式一：Offline模式，提前对jar包做修改，运行中生成覆盖率信息到文件中，适合单测使用\n * 模式二：On-the-fly，用javaagent进行动态修改字节码，在程序关闭后自动生成一个exec文件\n * 模式三：On-the-fly tcpClient模式，需要自己搭建一个jacocoServer，显然成本太高，并且不同环境隔离的问题比较麻烦\n * 模式四：On-the-fly tcpServer模式，agent会启动一个tcp服务，需要的时候用jacocoClient从该端口拉当前覆盖率\n\n\n\n线上应用不能随便停机，而且现在很多应用都是容器化，停后文件会丢失，那么显而易见，模式四完美解决了这个问题和我们的需求，那么我们只要将代码放到线上跑7天，然后进入机器用jacocoClient dump下来jacoco.exec文件，实时分析。\n\n\n# 实践\n\n理论可行，实践开始。\n下载jacoco，官网下载随便选择一个，我这里选择0.8.8，切记agent和client要版本一致就行。\n\n\n解压后进入lib目录下，可以看见下图，我们会用到jacocoagent.jar和jacococli.jar，解压出来\n\n\n我们先创建一个SpringBoot项目，普通Java项目也可以通过这种方式agent\n\npom.xml\n\n<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n    \n    <groupId>org.example</groupId>\n    <artifactId>JacocoSpringBoot</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    \n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <version>2.6.13</version>\n        </dependency>\n    </dependencies>\n</project>\n\n\nApplication\n\npackage com.zhusheng.jacoco;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Application {\n    \n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n\n\nTestController\n\npackage com.zhusheng.jacoco.controller;\n\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Collections;\nimport java.util.List;\n\n@RestController\npublic class TestController {\n    \n    private List<String> list = Collections.emptyList();\n    \n    @GetMapping("/test")\n    public String getTest(@RequestParam("id") Long id) {\n        if (id == 1) {\n            System.out.println("走到这里");\n        } else {\n            System.out.println("走到下面");\n        }\n        return id.toString();\n    }\n    \n    public String test() {\n        List<String> list1 = list;\n        System.out.println(1);\n        return "没走到这里";\n    }\n    \n}\n\n\nConfig\n\npackage com.zhusheng.jacoco.config;\n\n\npublic class Config {\n    \n    public Config() {\n        int a = 10;\n        int b = 20;\n        System.out.println("走到这里");\n    }\n}\n\n\nTestConfiguration\n\npackage com.zhusheng.jacoco.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n\n@Configuration\npublic class TestConfiguration {\n    \n    @Bean\n    public Config config() {\n        System.out.println("走到这里");\n        return new Config();\n    }\n}\n\n\n# 启动\n\n添加agent参数\n\n-javaagent:D:\\openSource\\jacocoagent.jar=includes=com.zhusheng.jacoco.*,output=tcpserver,port=2024,address=127.0.0.1\n\n\n参数含义\n\n> D:\\openSource\\jacocoagent.jar是你解压jacocoagent的绝对路径\n> includes=com.zhusheng.jacoco.*表示只对com.zhusheng.jacoco包下做插桩\n> output=tcpserver以tpcServer模式启动\n> port=2024表示tcp端口2024\n> address=127.0.0.1可访问ip\n\n访问一下 http://localhost:8080/test?id=1 测试效果 用lsof可以看下2024端口是否被监听成功\n\n\n# 导出exec并分析\n\n来到jacococli的目录下\n\njava -jar jacococli.jar dump --address localhost --port 2024 --destfile ./jacoco.exec\n\n\n可以测试一下是否agent成功\n\njava -jar jacococli.jar execinfo jacoco.exec\n\n\n可以看到，jacoco已经成功插桩并且在项目稳定运行中可以实时统计出覆盖率。\n\n# 分析\n\n这里推荐直接使用idea进行分析\nRUN->Show Coverage Data...选择刚刚dump下来的jacoco.exec\n\n\n\n左侧为是否hit到该行\n覆盖率\n类覆盖率，方法覆盖率，行覆盖率\n注意：如果发现覆盖率都是0，则是jacoco.exec中的classId跟你目前的classId匹配不上，在idea中重新build一下并且确保本地代码跟线上代码是一致的，否则会出现覆盖率为0的问题。\n拿到行覆盖率后，就可以愉快的删除shi山代码以及重构了，再也不怕因为不知道这行代码用不用的上而不敢删别人的垃圾代码了。\n\n\n# 总结\n\njacoco能以一种侵入非常低的方式，并且不需要线上停机的方式统计出线上真实的代码覆盖率。有想更深入了解jacoco原理的可以去学习下，jacoco是统计覆盖率最优解也是相对完美的解决方案了，本文就不做太多扩展。',normalizedContent:'# 背景\n\n> 代码覆盖率，就是衡量代码分支被运行到的比例，所以被称作覆盖率。\n\n大家都知道，jacoco可以分析单测分支覆盖率，例如用idea可以统计单测覆盖率。 但是在线上运行的核心链路中，代码沉淀好几年，俗称shi山代码，又如何对线上代码影响最小的方式，统计线上覆盖率并重构。\n\n\n# 调研\n\njacoco插桩原理简介：利用javaagent的修改字节码技术，每个类分配一个boolean数组，在一些分支，方法中插入boolean修改值，这样走到该方法或者分支上的boolean值就是true，通过这种方式可以分析出是否覆盖。\n该插桩对代码影响可以说非常小，对接口rt也基本不会有影响，可以选择jacoco做覆盖率分析，对线上应用影响可以忽略。\n\n\n# 理论\n\njacoco agent有两种模式\n\n * 模式一：offline模式，提前对jar包做修改，运行中生成覆盖率信息到文件中，适合单测使用\n * 模式二：on-the-fly，用javaagent进行动态修改字节码，在程序关闭后自动生成一个exec文件\n * 模式三：on-the-fly tcpclient模式，需要自己搭建一个jacocoserver，显然成本太高，并且不同环境隔离的问题比较麻烦\n * 模式四：on-the-fly tcpserver模式，agent会启动一个tcp服务，需要的时候用jacococlient从该端口拉当前覆盖率\n\n\n\n线上应用不能随便停机，而且现在很多应用都是容器化，停后文件会丢失，那么显而易见，模式四完美解决了这个问题和我们的需求，那么我们只要将代码放到线上跑7天，然后进入机器用jacococlient dump下来jacoco.exec文件，实时分析。\n\n\n# 实践\n\n理论可行，实践开始。\n下载jacoco，官网下载随便选择一个，我这里选择0.8.8，切记agent和client要版本一致就行。\n\n\n解压后进入lib目录下，可以看见下图，我们会用到jacocoagent.jar和jacococli.jar，解压出来\n\n\n我们先创建一个springboot项目，普通java项目也可以通过这种方式agent\n\npom.xml\n\n<?xml version="1.0" encoding="utf-8"?>\n<project xmlns="http://maven.apache.org/pom/4.0.0"\n    xmlns:xsi="http://www.w3.org/2001/xmlschema-instance"\n    xsi:schemalocation="http://maven.apache.org/pom/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelversion>4.0.0</modelversion>\n    \n    <groupid>org.example</groupid>\n    <artifactid>jacocospringboot</artifactid>\n    <version>1.0-snapshot</version>\n    \n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n        <project.build.sourceencoding>utf-8</project.build.sourceencoding>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-web</artifactid>\n            <version>2.6.13</version>\n        </dependency>\n    </dependencies>\n</project>\n\n\napplication\n\npackage com.zhusheng.jacoco;\n\nimport org.springframework.boot.springapplication;\nimport org.springframework.boot.autoconfigure.springbootapplication;\n\n@springbootapplication\npublic class application {\n    \n    public static void main(string[] args) {\n        springapplication.run(application.class, args);\n    }\n}\n\n\ntestcontroller\n\npackage com.zhusheng.jacoco.controller;\n\nimport org.springframework.web.bind.annotation.getmapping;\nimport org.springframework.web.bind.annotation.requestparam;\nimport org.springframework.web.bind.annotation.restcontroller;\n\nimport java.util.collections;\nimport java.util.list;\n\n@restcontroller\npublic class testcontroller {\n    \n    private list<string> list = collections.emptylist();\n    \n    @getmapping("/test")\n    public string gettest(@requestparam("id") long id) {\n        if (id == 1) {\n            system.out.println("走到这里");\n        } else {\n            system.out.println("走到下面");\n        }\n        return id.tostring();\n    }\n    \n    public string test() {\n        list<string> list1 = list;\n        system.out.println(1);\n        return "没走到这里";\n    }\n    \n}\n\n\nconfig\n\npackage com.zhusheng.jacoco.config;\n\n\npublic class config {\n    \n    public config() {\n        int a = 10;\n        int b = 20;\n        system.out.println("走到这里");\n    }\n}\n\n\ntestconfiguration\n\npackage com.zhusheng.jacoco.config;\n\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\n\n\n@configuration\npublic class testconfiguration {\n    \n    @bean\n    public config config() {\n        system.out.println("走到这里");\n        return new config();\n    }\n}\n\n\n# 启动\n\n添加agent参数\n\n-javaagent:d:\\opensource\\jacocoagent.jar=includes=com.zhusheng.jacoco.*,output=tcpserver,port=2024,address=127.0.0.1\n\n\n参数含义\n\n> d:\\opensource\\jacocoagent.jar是你解压jacocoagent的绝对路径\n> includes=com.zhusheng.jacoco.*表示只对com.zhusheng.jacoco包下做插桩\n> output=tcpserver以tpcserver模式启动\n> port=2024表示tcp端口2024\n> address=127.0.0.1可访问ip\n\n访问一下 http://localhost:8080/test?id=1 测试效果 用lsof可以看下2024端口是否被监听成功\n\n\n# 导出exec并分析\n\n来到jacococli的目录下\n\njava -jar jacococli.jar dump --address localhost --port 2024 --destfile ./jacoco.exec\n\n\n可以测试一下是否agent成功\n\njava -jar jacococli.jar execinfo jacoco.exec\n\n\n可以看到，jacoco已经成功插桩并且在项目稳定运行中可以实时统计出覆盖率。\n\n# 分析\n\n这里推荐直接使用idea进行分析\nrun->show coverage data...选择刚刚dump下来的jacoco.exec\n\n\n\n左侧为是否hit到该行\n覆盖率\n类覆盖率，方法覆盖率，行覆盖率\n注意：如果发现覆盖率都是0，则是jacoco.exec中的classid跟你目前的classid匹配不上，在idea中重新build一下并且确保本地代码跟线上代码是一致的，否则会出现覆盖率为0的问题。\n拿到行覆盖率后，就可以愉快的删除shi山代码以及重构了，再也不怕因为不知道这行代码用不用的上而不敢删别人的垃圾代码了。\n\n\n# 总结\n\njacoco能以一种侵入非常低的方式，并且不需要线上停机的方式统计出线上真实的代码覆盖率。有想更深入了解jacoco原理的可以去学习下，jacoco是统计覆盖率最优解也是相对完美的解决方案了，本文就不做太多扩展。',charsets:{cjk:!0},lastUpdated:"2024/04/28, 17:23:46",lastUpdatedTimestamp:1714325026e3},{title:"C++自救指南-总览",frontmatter:{title:"C++自救指南-总览",date:"2024-04-26T22:25:17.000Z",author:"京都小低调",permalink:"/pages/3001d9/"},regularPath:"/02.%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/01.cpp%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97/01.C++%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97-%E6%80%BB%E8%A7%88.html",relativePath:"02.好文分享/01.cpp自救指南/01.C++自救指南-总览.md",key:"v-4cd0a145",path:"/pages/3001d9/",headers:[{level:2,title:"C++自救指南-总览",slug:"c-自救指南-总览",normalizedTitle:"c++自救指南-总览",charIndex:2}],headersStr:"C++自救指南-总览",content:"# C++自救指南-总览\n\n该指南是本🐀三年沉淀的精华，希望每一位萌新看到此文都能有所收获。\n\n指南包含以下篇章：\n\n * C++自救指南-工具篇\n * C++自救指南-方向梳理篇\n * C++自救指南-学习路线篇\n * C++自救指南-资源分享篇\n * C++自救指南-项目实战篇\n\n送给每一个不撞南墙不回头的cpper们 ❤️\n\n> Tips: 观前提醒，我说什么不重要，贴在每句话后的链接才重要。 这些几乎都是经过我多年累积，优中选优的资料，把饭端你嘴边，学不学，学多少，就看你自己了。\n\n> 如果接下来的内容，出现的关键词，你不熟悉，而我又恰好没解释，请自行百度，或者使用新时代码农的好帮手-ChatGPT。\n\n> 🐀🐀水平有限，在此抛砖引玉，讲的不对的地方请大佬轻喷～\n\n\n# 寄语\n\n1、早做准备，深入基础，动手实践、努力提升核心竞争力\n\n2、口语表达，逻辑思维等软实力也非常非常重要，有空多练练\n\n3、选对行业很重要，互联网的增长几乎到头了，其他赛道其实还有很多发展空间\n\n4、找工作是一件很看运气的事情，端正心态，坚持下去，机会总是留给有准备的人\n\n4、“种一棵树最好的时间是十年前，其次是现在”， Just do it~",normalizedContent:"# c++自救指南-总览\n\n该指南是本🐀三年沉淀的精华，希望每一位萌新看到此文都能有所收获。\n\n指南包含以下篇章：\n\n * c++自救指南-工具篇\n * c++自救指南-方向梳理篇\n * c++自救指南-学习路线篇\n * c++自救指南-资源分享篇\n * c++自救指南-项目实战篇\n\n送给每一个不撞南墙不回头的cpper们 ❤️\n\n> tips: 观前提醒，我说什么不重要，贴在每句话后的链接才重要。 这些几乎都是经过我多年累积，优中选优的资料，把饭端你嘴边，学不学，学多少，就看你自己了。\n\n> 如果接下来的内容，出现的关键词，你不熟悉，而我又恰好没解释，请自行百度，或者使用新时代码农的好帮手-chatgpt。\n\n> 🐀🐀水平有限，在此抛砖引玉，讲的不对的地方请大佬轻喷～\n\n\n# 寄语\n\n1、早做准备，深入基础，动手实践、努力提升核心竞争力\n\n2、口语表达，逻辑思维等软实力也非常非常重要，有空多练练\n\n3、选对行业很重要，互联网的增长几乎到头了，其他赛道其实还有很多发展空间\n\n4、找工作是一件很看运气的事情，端正心态，坚持下去，机会总是留给有准备的人\n\n4、“种一棵树最好的时间是十年前，其次是现在”， just do it~",charsets:{cjk:!0},lastUpdated:"2024/04/28, 17:23:46",lastUpdatedTimestamp:1714325026e3},{title:"vuepress搭建个人博客",frontmatter:{title:"vuepress搭建个人博客",date:"2024-04-27T15:58:29.000Z",author:"ethandu",permalink:"/pages/6f6205/"},regularPath:"/01.%E5%BC%80%E5%8F%91%E8%AE%A4%E7%9F%A5%E6%89%A9%E5%B1%95/04.%E6%8A%80%E6%9C%AF%E5%9C%BA%E6%99%AF/02.vuepress%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html",relativePath:"01.开发认知扩展/04.技术场景/02.vuepress搭建个人博客.md",key:"v-5334f5d2",path:"/pages/6f6205/",headers:[{level:2,title:"背景",slug:"背景",normalizedTitle:"背景",charIndex:2},{level:3,title:"主题",slug:"主题",normalizedTitle:"主题",charIndex:9},{level:2,title:"环境搭建",slug:"环境搭建",normalizedTitle:"环境搭建",charIndex:84},{level:3,title:"安装node8.0+",slug:"安装node8-0",normalizedTitle:"安装node8.0+",charIndex:93},{level:3,title:"创建博客工程",slug:"创建博客工程",normalizedTitle:"创建博客工程",charIndex:191},{level:2,title:"博客配置",slug:"博客配置",normalizedTitle:"博客配置",charIndex:1178},{level:3,title:"工程结构",slug:"工程结构",normalizedTitle:"工程结构",charIndex:1187},{level:3,title:"配置启动页",slug:"配置启动页",normalizedTitle:"配置启动页",charIndex:1866},{level:3,title:"配置首页",slug:"配置首页",normalizedTitle:"配置首页",charIndex:2056},{level:3,title:"配置底部",slug:"配置底部",normalizedTitle:"配置底部",charIndex:3883},{level:3,title:"配置导航栏",slug:"配置导航栏",normalizedTitle:"配置导航栏",charIndex:4087},{level:4,title:"logo",slug:"logo",normalizedTitle:"logo",charIndex:1739},{level:4,title:"搜索",slug:"搜索",normalizedTitle:"搜索",charIndex:4225},{level:4,title:"导航",slug:"导航",normalizedTitle:"导航",charIndex:4089},{level:2,title:"文档写作",slug:"文档写作",normalizedTitle:"文档写作",charIndex:6483},{level:3,title:"Front Matter",slug:"front-matter",normalizedTitle:"front matter",charIndex:2972},{level:3,title:"摘要",slug:"摘要",normalizedTitle:"摘要",charIndex:7111},{level:3,title:"deploy.sh",slug:"deploy-sh",normalizedTitle:"deploy.sh",charIndex:7385}],excerpt:'<h2 id="背景"><a class="header-anchor" href="#背景">#</a> 背景</h2>\n<h3 id="主题"><a class="header-anchor" href="#主题">#</a> 主题</h3>\n<p><a href="https://vuepress-theme-reco.recoluan.com/" target="_blank" rel="noopener noreferrer">vuepress-theme-reco(opens new window)<OutboundLink/></a></p>\n<p>推荐：</p>\n<p><a href="https://link.zhihu.com/?target=https%3A//github.com/Renovamen/vuepress-theme-gungnir" target="_blank" rel="noopener noreferrer">vuepress-theme-gungnir<OutboundLink/></a></p>\n<h2 id="环境搭建"><a class="header-anchor" href="#环境搭建">#</a> 环境搭建</h2>\n<h3 id="安装node8-0"><a class="header-anchor" href="#安装node8-0">#</a> 安装node8.0+</h3>\n<blockquote>\n<p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fnodejs.org%2Fzh-cn%2F" target="_blank" rel="noopener noreferrer">node官网(opens new window)<OutboundLink/></a></p>\n</blockquote>\n<p>安装官网提示下载安装包安装即可</p>\n<p>安装完成后打开命令行工具，输入<code>node -v</code>，若返回版本信息则安装成功。</p>\n<h3 id="创建博客工程"><a class="header-anchor" href="#创建博客工程">#</a> 创建博客工程</h3>\n<p>使用npm</p>\n\x3c!--beforebegin--\x3e<div class="language-shell extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-shell"><code><span class="token comment"># 安装vuepress</span>\n\n<span class="token function">npm</span> <span class="token function">install</span> vuepress <span class="token parameter variable">-g</span>\n\n<span class="token comment"># 安装脚手架工具</span>\n\n<span class="token function">npm</span> <span class="token function">install</span> @vuepress-reco/theme-cli <span class="token parameter variable">-g</span>\n\n<span class="token comment"># 创建项目</span>\n\ntheme-cli init my-blog  <span class="token comment">#my-blog可替换成自己需要的项目名称AIA</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>使用yarn(推荐使用yarn)</p>\n\x3c!--beforebegin--\x3e<div class="language-sh extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-sh"><code><span class="token comment"># 没有yarn先要安装yarn</span>\n<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">yarn</span>\n<span class="token comment"># 查看版本：yarn --version</span>\n\n<span class="token comment"># 导入vuepress依赖</span>\n<span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> vuepress\n\n<span class="token comment"># 安装脚手架工具 需要全局否则用不了命令</span>\n<span class="token function">yarn</span> global <span class="token function">add</span> @vuepress-reco/theme-cli\n<span class="token comment"># </span>\n\n<span class="token comment"># 创建项目 这边要是下载不下来需要用梯子</span>\ntheme-cli init my-blog\n\n<span class="token builtin class-name">cd</span> 博客名\n\n<span class="token function">yarn</span> <span class="token function">install</span>\n\n<span class="token function">yarn</span> dev\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p><img src="/img/ethandu/vuepress%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.assets/image-20220215122828778.png" alt="image-20220215122828778"></p>\n<p><img src="/img/ethandu/vuepress%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.assets/image-20220215122839316.png" alt="image-20220215122839316"></p>\n<p><img src="/img/ethandu/vuepress%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.assets/image-20220215124632586.png" alt="image-20220215124632586"></p>\n<p>上述命令执行后，在命令行窗口会进行一系列的信息配置</p>\n\x3c!--beforebegin--\x3e<div class="language-shell extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-shell"><code>? What<span class="token string">\'s the title of your project?  #键入您的项目标题\n\n? What\'</span>s the description of your project? <span class="token comment">#键入您的项目描述</span>\n\n? What<span class="token string">\'s the author\'</span>s name? <span class="token comment">#键入作者姓名</span>\n\n? What style <span class="token keyword">do</span> you want your home page to be?<span class="token punctuation">(</span>Select afternoon-grocery, <span class="token keyword">if</span> you\n\nwant to download reco_luan<span class="token string">\'s \'</span>午后南杂\'<span class="token punctuation">)</span> <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span>\n\n❯ blog  <span class="token comment"># 此处通过方向键选择您首页风格，这里我们选择blog</span>\n\n  doc\n\n  afternoon-grocery\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>接下来进入您的工程目录，启动您的项目吧</p>\n\x3c!--beforebegin--\x3e<div class="language-shell extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-shell"><code><span class="token comment"># 接入项目目录</span>\n\n<span class="token builtin class-name">cd</span> my-blog  <span class="token comment">#my-blog替换为之前您填入的项目名称</span>\n\n<span class="token comment"># 安装npm</span>\n\n<span class="token function">npm</span> <span class="token function">install</span>\n\n<span class="token comment"># 运行测试环境</span>\n\n<span class="token function">npm</span> run dev\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>访问命令行输出的ip地址，一般为<code>http://localhost:8080</code>(若端口被占用则依次递增，以终端输出为准)，即可访问您的博客了！</p>\n<p><img src="https://assets.huabyte.com/blog/image/blog-demo.png" alt="img"></p>\n<h2 id="博客配置"><a class="header-anchor" href="#博客配置">#</a> 博客配置</h2>\n<h3 id="工程结构"><a class="header-anchor" href="#工程结构">#</a> 工程结构</h3>\n\x3c!--beforebegin--\x3e<div class="language-shell extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-shell"><code>├─ node_modules <span class="token comment">#存放着项目所需的依赖，我们不需要关心</span>\n\n├─ docs  <span class="token comment">#该目录下存放您编写的文档</span>\n\n│  └─ theme-reco\n\n│    ├─ api.md\n\n│    ├─ plugin.md\n\n│    ├─ theme.md\n\n│    └─ README.md\n\n├─ blogs <span class="token comment">#该目录下存放您编写的博客文章</span>\n\n│    ├─ category1\n\n│    │  ├─ <span class="token number">2018</span>\n\n│    │  │  └─ <span class="token number">121501</span>.md\n\n│    │  └─ <span class="token number">2019</span>\n\n│    │    └─ 092101.md\n\n│    ├─ category2\n\n│    │  ├─ <span class="token number">2016</span>\n\n│    │  │  └─ <span class="token number">121501</span>.md\n\n│    │  └─ <span class="token number">2017</span>\n\n│    │    └─ 092101.md\n\n│    └─ other\n\n│        └─ guide.md\n\n├─ .vuepress <span class="token comment"># 该目录下存放项目配置文件与静态资源</span>\n\n│  ├─ config.js <span class="token comment">#该文件用于配置项目</span>\n\n│  └─ public <span class="token comment"># 该目录下存放网页中所需的静态资源</span>\n\n│    ├─ hero.png <span class="token comment"># 首页大图</span>\n\n│    ├─ logo.png <span class="token comment"># 站点logo</span>\n\n│    ├─ favicon.ico <span class="token comment">#站点图标</span>\n\n│    └─ avatar.png <span class="token comment">#头像</span>\n\n├─ package.json <span class="token comment">#依赖管理文件</span>\n\n└─ README.md <span class="token comment">#这里存放着博客首页的内容</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h3 id="配置启动页"><a class="header-anchor" href="#配置启动页">#</a> 配置启动页</h3>\n<blockquote>\n<p>启动页展示的内容为博客标题与描述，即您在创建工程时输入的内容</p>\n</blockquote>\n<p>您可以在<code>.vuepress/config.js</code>下找到如下内容，通过修改对应的字符来改变您的启动页</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token comment">// .vuepress/config.js</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n\n  <span class="token string-property property">"title"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>\n\n  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>\n\n  <span class="token punctuation">}</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h3 id="配置首页"><a class="header-anchor" href="#配置首页">#</a> 配置首页</h3>\n<blockquote>\n<p>首页即为启动页之后的主页面</p>\n</blockquote>\n<p>首页的内容由项目根目录下的<code>README.md</code> 配置生成，您可以通过更改其中的配置项来变更您的首页</p>\n\x3c!--beforebegin--\x3e<div class="language-yaml extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-yaml"><code><span class="token punctuation">---</span>\n\n<span class="token key atrule">home</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#指定该文件为您的首页，改为false则不作为首页</span>\n\n<span class="token key atrule">heroText</span><span class="token punctuation">:</span> vuepress<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>reco  <span class="token comment">#首页居中显示的文本</span>\n\n<span class="token key atrule">tagline</span><span class="token punctuation">:</span> A simple and beautiful vuepress blog theme. <span class="token comment"># 首页显示的标语</span>\n\n<span class="token comment"># heroImage: /hero.png  #首页显示的主图，默认被注释，取消注释可显示图片</span>\n\n<span class="token comment"># heroImageStyle: {  # 首页主图的样式控制，默认被注释</span>\n\n<span class="token comment">#  maxWidth: \'600px\',</span>\n\n<span class="token comment">#  width: \'100%\',</span>\n\n<span class="token comment">#  display: block,</span>\n\n<span class="token comment">#  margin: \'9rem auto 2rem\',</span>\n\n<span class="token comment">#  background: \'#fff\',</span>\n\n<span class="token comment">#  borderRadius: \'1rem\',</span>\n\n<span class="token comment"># }</span>\n\n<span class="token key atrule">bgImageStyle</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment">#背景图片样式</span>\n\n  <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token string">\'450px\'</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token comment"># 以下内容基本上不生效，可以不用关心</span>\n\n<span class="token key atrule">isShowTitleInHome</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n\n<span class="token key atrule">actionText</span><span class="token punctuation">:</span> Guide\n\n<span class="token key atrule">actionLink</span><span class="token punctuation">:</span> /views/other/guide\n\n<span class="token key atrule">features</span><span class="token punctuation">:</span>\n\n<span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> Yesterday\n\n  <span class="token key atrule">details</span><span class="token punctuation">:</span> 开发一款看着开心、写着顺手的 vuepress 博客主题\n\n<span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> Today\n\n  <span class="token key atrule">details</span><span class="token punctuation">:</span> 希望帮助更多的人花更多的时间在内容创作上，而不是博客搭建上\n\n<span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> Tomorrow\n\n  <span class="token key atrule">details</span><span class="token punctuation">:</span> 希望更多的爱好者能够参与进来，帮助这个主题更好的成长\n\n<span class="token punctuation">---</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<blockquote>\n<p>Tip:代码中所引用的图片，均以<code>.vuepress/public</code> 为根目录</p>\n</blockquote>\n<p>到此为主，您会注意到首页内容远不止这些，例如个人资料卡、文章列表，这些如何更改呢？</p>\n<ul>\n<li>\n<p>文章列表是根据您的文章自动生成的，一旦您发布的文章中的含有<code>Front Matter</code>，系统会自动将其收集至首页，默认按时间顺序展示</p>\n</li>\n<li>\n<p>个人资料卡的头像和昵称由<code>.vuepress/config.js</code>进行配置，您可以找到如下内容，并进行修改配置。<code>Category</code>和<code>Tag</code>项则跟您的文章中标注的分类和标签自动生成</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>    <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">"AirHua-byte"</span><span class="token punctuation">,</span> <span class="token comment">//昵称</span>\n\n    <span class="token string-property property">"authorAvatar"</span><span class="token operator">:</span> <span class="token string">"/avatar.png"</span><span class="token punctuation">,</span> <span class="token comment">//头像</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e</li>\n<li>\n<p><code>Friend Link</code> 则是您可以自由更改的，它的配置在<code>.vuepress/config.js</code>中，您可以找到如下内容，并对应进行修改配置，如果可以的话，您可以尝试将本站点添加为友链~</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>    <span class="token string-property property">"friendLink"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n\n      <span class="token punctuation">{</span>\n\n        <span class="token string-property property">"title"</span><span class="token operator">:</span> <span class="token string">"AirHua-byte"</span><span class="token punctuation">,</span> <span class="token comment">//友联标题</span>\n\n        <span class="token string-property property">"desc"</span><span class="token operator">:</span> <span class="token string">"敲键盘、按快门与拨琴弦"</span><span class="token punctuation">,</span>  <span class="token comment">//友链描述</span>\n\n        <span class="token string-property property">"email"</span><span class="token operator">:</span> <span class="token string">"3301833942@qq.com"</span><span class="token punctuation">,</span>  <span class="token comment">//友链邮箱</span>\n\n        <span class="token string-property property">"link"</span><span class="token operator">:</span> <span class="token string">"http://huabyte.com"</span> <span class="token comment">//友链地址</span>\n\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n\n        <span class="token string-property property">"title"</span><span class="token operator">:</span> <span class="token string">"vuepress-theme-reco"</span><span class="token punctuation">,</span>\n\n        <span class="token string-property property">"desc"</span><span class="token operator">:</span> <span class="token string">"A simple and beautiful vuepress Blog &amp; Doc theme."</span><span class="token punctuation">,</span>\n\n        <span class="token string-property property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://vuepress-theme-reco.recoluan.com/icon_vuepress_reco.png"</span><span class="token punctuation">,</span>\n\n        <span class="token string-property property">"link"</span><span class="token operator">:</span> <span class="token string">"https://vuepress-theme-reco.recoluan.com"</span>\n\n      <span class="token punctuation">}</span>\n\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h3 id="配置底部"><a class="header-anchor" href="#配置底部">#</a> 配置底部</h3>\n<p>底边栏展示了如<code>主题</code>、<code>备案信息</code>、<code>版权</code>、<code>年份</code>等信息，这些内容仍需要您前往<code>.vuepress/config.js</code>进行修改</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>    <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">"me"</span><span class="token punctuation">,</span> <span class="token comment">//版权信息，与昵称为同一数据</span>\n\n    <span class="token string-property property">"record"</span><span class="token operator">:</span> <span class="token string">"xxxx"</span><span class="token punctuation">,</span> <span class="token comment">//备案信息</span>\n\n    <span class="token string-property property">"startYear"</span><span class="token operator">:</span> <span class="token string">"2017"</span> <span class="token comment">//开始年份</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h3 id="配置导航栏"><a class="header-anchor" href="#配置导航栏">#</a> 配置导航栏</h3>\n<h4 id="logo"><a class="header-anchor" href="#logo">#</a> logo</h4>\n<p>您需要前往<code>.vuepress/config.js</code>找到如下内容，修改您的logo图片，该图片存储在<code>.vuepress/public</code>中</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>    <span class="token string-property property">"logo"</span><span class="token operator">:</span> <span class="token string">"/logo.png"</span><span class="token punctuation">,</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h4 id="搜索"><a class="header-anchor" href="#搜索">#</a> 搜索</h4>\n<p>您需要前往<code>.vuepress/config.js</code>找到如下内容，修改搜索相关配置</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>    <span class="token string-property property">"search"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//是否开启搜索</span>\n\n    <span class="token string-property property">"searchMaxSuggestions"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment">//最多的搜索建议条目</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h4 id="导航"><a class="header-anchor" href="#导航">#</a> 导航</h4>\n<p>您需要前往<code>.vuepress/config.js</code>找到如下内容，修改导航相关配置</p>\n<p>其中：</p>\n<ul>\n<li>导航文本为导航按钮所展示的文字信息</li>\n<li>路由地址即为跳转路径，根目录<code>/</code>对应您项目的根目录，在项目打包时会将对应目录下的<code>README.md</code>文件生成为<code>index.html</code>，例如您想将链接指向您的<code>/docs/myDocument/README.md</code>,则将<code>link</code>内容改为``/docs/myDocument`,便可访问到您的文档。</li>\n<li>图标则为导航文本左边显示的图标，可以在<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fvuepress-theme-reco.recoluan.com%2Fviews%2F1.x%2FconfigJs.html%23%E5%9B%BE%E6%A0%87" target="_blank" rel="noopener noreferrer">reco图标库 (opens new window)<OutboundLink/></a>中寻找您需要的图标，也可以不要图标</li>\n</ul>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>    <span class="token string-property property">"nav"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token comment">//如下代码中，每个{...}即为一个导航块</span>\n\n      <span class="token punctuation">{</span>\n\n        <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>      <span class="token comment">//导航文本</span>\n\n        <span class="token string-property property">"link"</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>          <span class="token comment">//路由地址</span>\n\n        <span class="token string-property property">"icon"</span><span class="token operator">:</span> <span class="token string">"reco-home"</span>  <span class="token comment">//图标</span>\n\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n\n        <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"TimeLine"</span><span class="token punctuation">,</span>\n\n        <span class="token string-property property">"link"</span><span class="token operator">:</span> <span class="token string">"/timeline/"</span><span class="token punctuation">,</span>\n\n        <span class="token string-property property">"icon"</span><span class="token operator">:</span> <span class="token string">"reco-date"</span>\n\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n\n        <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"Docs"</span><span class="token punctuation">,</span>\n\n        <span class="token string-property property">"icon"</span><span class="token operator">:</span> <span class="token string">"reco-message"</span><span class="token punctuation">,</span>\n\n        <span class="token string-property property">"items"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n\n          <span class="token punctuation">{</span>\n\n            <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"vuepress-reco"</span><span class="token punctuation">,</span>\n\n            <span class="token string-property property">"link"</span><span class="token operator">:</span> <span class="token string">"/docs/theme-reco/"</span>\n\n          <span class="token punctuation">}</span>\n\n        <span class="token punctuation">]</span>\n\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n\n        <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"Contact"</span><span class="token punctuation">,</span>\n\n        <span class="token string-property property">"icon"</span><span class="token operator">:</span> <span class="token string">"reco-message"</span><span class="token punctuation">,</span>\n\n        <span class="token string-property property">"items"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n\n          <span class="token punctuation">{</span>\n\n            <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"GitHub"</span><span class="token punctuation">,</span>\n\n            <span class="token string-property property">"link"</span><span class="token operator">:</span> <span class="token string">"https://github.com/recoluan"</span><span class="token punctuation">,</span>\n\n            <span class="token string-property property">"icon"</span><span class="token operator">:</span> <span class="token string">"reco-github"</span>\n\n          <span class="token punctuation">}</span>\n\n        <span class="token punctuation">]</span>\n\n      <span class="token punctuation">}</span>\n\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>或许您已经注意到，如果需要配置一个像<code>Docs</code>或者<code>Contact</code>这样的折叠的导航应该如何做呢？他们并不会直接跳转到对应的目标地址。</p>\n<p>折叠导航的配置仍在之前所展示的导航配置代码中，现在将其单独提取出来进行分析。</p>\n<p>即在导航块中加入一个<code>items</code>数组，数组元素为多个<code>{...}</code>，是的，此<code>{...}</code>与导航块的<code>{...}</code>是同样的，所以您可以继续在其中添加文本、图标、路由等属性。</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token punctuation">{</span>\n\n        <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"Docs"</span><span class="token punctuation">,</span>  <span class="token comment">//导航文本</span>\n\n        <span class="token string-property property">"icon"</span><span class="token operator">:</span> <span class="token string">"reco-message"</span><span class="token punctuation">,</span>  <span class="token comment">//导航图标</span>\n\n        <span class="token string-property property">"items"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token comment">//导航子模块</span>\n\n          <span class="token punctuation">{</span>\n\n            <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"vuepress-reco"</span><span class="token punctuation">,</span> <span class="token comment">//子模块文本</span>\n\n            <span class="token string-property property">"link"</span><span class="token operator">:</span> <span class="token string">"/docs/theme-reco/"</span> <span class="token comment">//子模块链接</span>\n\n          <span class="token punctuation">}</span>\n\n        <span class="token punctuation">]</span>\n\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n      <span class="token punctuation">{</span>\n\n        <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"Contact"</span><span class="token punctuation">,</span>\n\n        <span class="token string-property property">"icon"</span><span class="token operator">:</span> <span class="token string">"reco-message"</span><span class="token punctuation">,</span>\n\n        <span class="token string-property property">"items"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n\n          <span class="token punctuation">{</span>\n\n            <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"GitHub"</span><span class="token punctuation">,</span>\n\n            <span class="token string-property property">"link"</span><span class="token operator">:</span> <span class="token string">"https://github.com/recoluan"</span><span class="token punctuation">,</span>\n\n            <span class="token string-property property">"icon"</span><span class="token operator">:</span> <span class="token string">"reco-github"</span>\n\n          <span class="token punctuation">}</span>\n\n        <span class="token punctuation">]</span>\n\n      <span class="token punctuation">}</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="文档写作"><a class="header-anchor" href="#文档写作">#</a> 文档写作</h2>\n<h3 id="front-matter"><a class="header-anchor" href="#front-matter">#</a> Front Matter</h3>\n<blockquote>\n<p>在markdown文档的顶部插入一段yaml配置代码</p>\n</blockquote>\n<p>一个完整的 <code>Front Matter</code> 案例：</p>\n\x3c!--beforebegin--\x3e<div class="language-yaml extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-yaml"><code><span class="token punctuation">---</span>\n\n<span class="token key atrule">title</span><span class="token punctuation">:</span> 烤鸭的做法\n\n<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-08-08</span>\n\n<span class="token key atrule">sidebar</span><span class="token punctuation">:</span> <span class="token string">\'auto\'</span>\n\n<span class="token key atrule">categories</span><span class="token punctuation">:</span>\n\n<span class="token punctuation">-</span> 烹饪\n\n<span class="token punctuation">-</span> 爱好\n\n<span class="token key atrule">tags</span><span class="token punctuation">:</span>\n\n<span class="token punctuation">-</span> 烤\n\n<span class="token punctuation">-</span> 鸭子\n\n<span class="token key atrule">keys</span><span class="token punctuation">:</span>\n\n<span class="token punctuation">-</span> <span class="token string">\'123456\'</span>\n\n<span class="token key atrule">publish</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n\n<span class="token punctuation">---</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>常用变量说明：</p>\n<p><code>title</code> :文章标题，放弃通过一级目录定义标题的方式，改在 <code>Front Matter</code> 中定义。</p>\n<p><code>date</code> :文章创建日期，格式 <code>2019-08-08</code> 或 <code>2019-08-08 08:08:08</code>。</p>\n<p><code>sidebar</code>:是否开启侧边栏。</p>\n<p><code>categories</code> :所属分类。</p>\n<p><code>tags</code> :所属标签。</p>\n<p><code>keys</code>: 所属标签。</p>\n<p><code>publish</code> :文章是否发布。</p>\n</li>\n</ul>\n<p>另外还有一些<code>Vuepress</code> 默认主题的变量例如<code>prev</code>, <code>next</code>，请移步 <a href="https://vuepress-theme-reco.recoluan.com/views/1.x/frontMatter.html" target="_blank" rel="noopener noreferrer">官方文档(opens new window)<OutboundLink/></a></p>\n<h3 id="摘要"><a class="header-anchor" href="#摘要">#</a> 摘要</h3>\n<blockquote>\n<p>在markdown代码中，您将看到注释，注释前面的代码将显示在列表页面上的文章摘要中。</p>\n</blockquote>\n\x3c!--beforebegin--\x3e<div class="language-markdown extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>\n\n<span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> Vuepress使用指南(reco)\n\n<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-08-16</span>\n\n<span class="token key atrule">sidebar</span><span class="token punctuation">:</span> <span class="token string">\'auto\'</span>\n\n<span class="token key atrule">categories</span><span class="token punctuation">:</span>\n\n<span class="token punctuation">-</span> 工具\n\n<span class="token key atrule">tags</span><span class="token punctuation">:</span>\n\n<span class="token punctuation">-</span> vue\n\n<span class="token key atrule">publish</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>\n\n<span class="token punctuation">---</span></span>\n\n::: tip\n\nVuepress是Vue作者尤雨溪开发的文档工具，本文采用Vuepress的reco主题进行相关配置说明\n\n:::\n\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e',headersStr:"背景 主题 环境搭建 安装node8.0+ 创建博客工程 博客配置 工程结构 配置启动页 配置首页 配置底部 配置导航栏 logo 搜索 导航 文档写作 Front Matter 摘要 deploy.sh",content:'# 背景\n\n\n# 主题\n\nvuepress-theme-reco(opens new window)\n\n推荐：\n\nvuepress-theme-gungnir\n\n\n# 环境搭建\n\n\n# 安装node8.0+\n\n> node官网(opens new window)\n\n安装官网提示下载安装包安装即可\n\n安装完成后打开命令行工具，输入node -v，若返回版本信息则安装成功。\n\n\n# 创建博客工程\n\n使用npm\n\n# 安装vuepress\n\nnpm install vuepress -g\n\n# 安装脚手架工具\n\nnpm install @vuepress-reco/theme-cli -g\n\n# 创建项目\n\ntheme-cli init my-blog  #my-blog可替换成自己需要的项目名称AIA\n\n\n使用yarn(推荐使用yarn)\n\n# 没有yarn先要安装yarn\nnpm install -g yarn\n# 查看版本：yarn --version\n\n# 导入vuepress依赖\nyarn add -D vuepress\n\n# 安装脚手架工具 需要全局否则用不了命令\nyarn global add @vuepress-reco/theme-cli\n# \n\n# 创建项目 这边要是下载不下来需要用梯子\ntheme-cli init my-blog\n\ncd 博客名\n\nyarn install\n\nyarn dev\n\n\n\n\n\n\n\n\n上述命令执行后，在命令行窗口会进行一系列的信息配置\n\n? What\'s the title of your project?  #键入您的项目标题\n\n? What\'s the description of your project? #键入您的项目描述\n\n? What\'s the author\'s name? #键入作者姓名\n\n? What style do you want your home page to be?(Select afternoon-grocery, if you\n\nwant to download reco_luan\'s \'午后南杂\') (Use arrow keys)\n\n❯ blog  # 此处通过方向键选择您首页风格，这里我们选择blog\n\n  doc\n\n  afternoon-grocery\n\n\n接下来进入您的工程目录，启动您的项目吧\n\n# 接入项目目录\n\ncd my-blog  #my-blog替换为之前您填入的项目名称\n\n# 安装npm\n\nnpm install\n\n# 运行测试环境\n\nnpm run dev\n\n\n访问命令行输出的ip地址，一般为http://localhost:8080(若端口被占用则依次递增，以终端输出为准)，即可访问您的博客了！\n\n\n\n\n# 博客配置\n\n\n# 工程结构\n\n├─ node_modules #存放着项目所需的依赖，我们不需要关心\n\n├─ docs  #该目录下存放您编写的文档\n\n│  └─ theme-reco\n\n│    ├─ api.md\n\n│    ├─ plugin.md\n\n│    ├─ theme.md\n\n│    └─ README.md\n\n├─ blogs #该目录下存放您编写的博客文章\n\n│    ├─ category1\n\n│    │  ├─ 2018\n\n│    │  │  └─ 121501.md\n\n│    │  └─ 2019\n\n│    │    └─ 092101.md\n\n│    ├─ category2\n\n│    │  ├─ 2016\n\n│    │  │  └─ 121501.md\n\n│    │  └─ 2017\n\n│    │    └─ 092101.md\n\n│    └─ other\n\n│        └─ guide.md\n\n├─ .vuepress # 该目录下存放项目配置文件与静态资源\n\n│  ├─ config.js #该文件用于配置项目\n\n│  └─ public # 该目录下存放网页中所需的静态资源\n\n│    ├─ hero.png # 首页大图\n\n│    ├─ logo.png # 站点logo\n\n│    ├─ favicon.ico #站点图标\n\n│    └─ avatar.png #头像\n\n├─ package.json #依赖管理文件\n\n└─ README.md #这里存放着博客首页的内容\n\n\n\n# 配置启动页\n\n> 启动页展示的内容为博客标题与描述，即您在创建工程时输入的内容\n\n您可以在.vuepress/config.js下找到如下内容，通过修改对应的字符来改变您的启动页\n\n// .vuepress/config.js\n\nmodule.exports = {\n\n  "title": "test",\n\n  "description": "test",\n\n  }\n\n\n\n# 配置首页\n\n> 首页即为启动页之后的主页面\n\n首页的内容由项目根目录下的README.md 配置生成，您可以通过更改其中的配置项来变更您的首页\n\n---\n\nhome: true  #指定该文件为您的首页，改为false则不作为首页\n\nheroText: vuepress-theme-reco  #首页居中显示的文本\n\ntagline: A simple and beautiful vuepress blog theme. # 首页显示的标语\n\n# heroImage: /hero.png  #首页显示的主图，默认被注释，取消注释可显示图片\n\n# heroImageStyle: {  # 首页主图的样式控制，默认被注释\n\n#  maxWidth: \'600px\',\n\n#  width: \'100%\',\n\n#  display: block,\n\n#  margin: \'9rem auto 2rem\',\n\n#  background: \'#fff\',\n\n#  borderRadius: \'1rem\',\n\n# }\n\nbgImageStyle: { #背景图片样式\n\n  height: \'450px\'\n\n}\n\n# 以下内容基本上不生效，可以不用关心\n\nisShowTitleInHome: false\n\nactionText: Guide\n\nactionLink: /views/other/guide\n\nfeatures:\n\n- title: Yesterday\n\n  details: 开发一款看着开心、写着顺手的 vuepress 博客主题\n\n- title: Today\n\n  details: 希望帮助更多的人花更多的时间在内容创作上，而不是博客搭建上\n\n- title: Tomorrow\n\n  details: 希望更多的爱好者能够参与进来，帮助这个主题更好的成长\n\n---\n\n\n> Tip:代码中所引用的图片，均以.vuepress/public 为根目录\n\n到此为主，您会注意到首页内容远不止这些，例如个人资料卡、文章列表，这些如何更改呢？\n\n * 文章列表是根据您的文章自动生成的，一旦您发布的文章中的含有Front Matter，系统会自动将其收集至首页，默认按时间顺序展示\n\n * 个人资料卡的头像和昵称由.vuepress/config.js进行配置，您可以找到如下内容，并进行修改配置。Category和Tag项则跟您的文章中标注的分类和标签自动生成\n   \n       "author": "AirHua-byte", //昵称\n   \n       "authorAvatar": "/avatar.png", //头像\n   \n\n * Friend Link 则是您可以自由更改的，它的配置在.vuepress/config.js中，您可以找到如下内容，并对应进行修改配置，如果可以的话，您可以尝试将本站点添加为友链~\n   \n       "friendLink": [\n   \n         {\n   \n           "title": "AirHua-byte", //友联标题\n   \n           "desc": "敲键盘、按快门与拨琴弦",  //友链描述\n   \n           "email": "3301833942@qq.com",  //友链邮箱\n   \n           "link": "http://huabyte.com" //友链地址\n   \n         },\n   \n         {\n   \n           "title": "vuepress-theme-reco",\n   \n           "desc": "A simple and beautiful vuepress Blog & Doc theme.",\n   \n           "avatar": "https://vuepress-theme-reco.recoluan.com/icon_vuepress_reco.png",\n   \n           "link": "https://vuepress-theme-reco.recoluan.com"\n   \n         }\n   \n       ],\n   \n   \n   \n   # 配置底部\n   \n   底边栏展示了如主题、备案信息、版权、年份等信息，这些内容仍需要您前往.vuepress/config.js进行修改\n   \n       "author": "me", //版权信息，与昵称为同一数据\n   \n       "record": "xxxx", //备案信息\n   \n       "startYear": "2017" //开始年份\n   \n   \n   \n   # 配置导航栏\n   \n   # logo\n   \n   您需要前往.vuepress/config.js找到如下内容，修改您的logo图片，该图片存储在.vuepress/public中\n   \n       "logo": "/logo.png",\n   \n   \n   # 搜索\n   \n   您需要前往.vuepress/config.js找到如下内容，修改搜索相关配置\n   \n       "search": true,  //是否开启搜索\n   \n       "searchMaxSuggestions": 10,  //最多的搜索建议条目\n   \n   \n   # 导航\n   \n   您需要前往.vuepress/config.js找到如下内容，修改导航相关配置\n   \n   其中：\n   \n   * 导航文本为导航按钮所展示的文字信息\n   * 路由地址即为跳转路径，根目录/对应您项目的根目录，在项目打包时会将对应目录下的README.md文件生成为index.html，例如您想将链接指向您的/docs/myDocument/README.md,则将link内容改为``/docs/myDocument`,便可访问到您的文档。\n   * 图标则为导航文本左边显示的图标，可以在reco图标库 (opens new window)中寻找您需要的图标，也可以不要图标\n   \n       "nav": [  //如下代码中，每个{...}即为一个导航块\n   \n         {\n   \n           "text": "Home",      //导航文本\n   \n           "link": "/",          //路由地址\n   \n           "icon": "reco-home"  //图标\n   \n         },\n   \n         {\n   \n           "text": "TimeLine",\n   \n           "link": "/timeline/",\n   \n           "icon": "reco-date"\n   \n         },\n   \n         {\n   \n           "text": "Docs",\n   \n           "icon": "reco-message",\n   \n           "items": [\n   \n             {\n   \n               "text": "vuepress-reco",\n   \n               "link": "/docs/theme-reco/"\n   \n             }\n   \n           ]\n   \n         },\n   \n         {\n   \n           "text": "Contact",\n   \n           "icon": "reco-message",\n   \n           "items": [\n   \n             {\n   \n               "text": "GitHub",\n   \n               "link": "https://github.com/recoluan",\n   \n               "icon": "reco-github"\n   \n             }\n   \n           ]\n   \n         }\n   \n       ],\n   \n   \n   或许您已经注意到，如果需要配置一个像Docs或者Contact这样的折叠的导航应该如何做呢？他们并不会直接跳转到对应的目标地址。\n   \n   折叠导航的配置仍在之前所展示的导航配置代码中，现在将其单独提取出来进行分析。\n   \n   即在导航块中加入一个items数组，数组元素为多个{...}，是的，此{...}与导航块的{...}是同样的，所以您可以继续在其中添加文本、图标、路由等属性。\n   \n   {\n   \n           "text": "Docs",  //导航文本\n   \n           "icon": "reco-message",  //导航图标\n   \n           "items": [  //导航子模块\n   \n             {\n   \n               "text": "vuepress-reco", //子模块文本\n   \n               "link": "/docs/theme-reco/" //子模块链接\n   \n             }\n   \n           ]\n   \n         },\n   \n         {\n   \n           "text": "Contact",\n   \n           "icon": "reco-message",\n   \n           "items": [\n   \n             {\n   \n               "text": "GitHub",\n   \n               "link": "https://github.com/recoluan",\n   \n               "icon": "reco-github"\n   \n             }\n   \n           ]\n   \n         }\n   \n   \n   \n   # 文档写作\n   \n   \n   # Front Matter\n   \n   > 在markdown文档的顶部插入一段yaml配置代码\n   \n   一个完整的 Front Matter 案例：\n   \n   ---\n   \n   title: 烤鸭的做法\n   \n   date: 2019-08-08\n   \n   sidebar: \'auto\'\n   \n   categories:\n   \n   - 烹饪\n   \n   - 爱好\n   \n   tags:\n   \n   - 烤\n   \n   - 鸭子\n   \n   keys:\n   \n   - \'123456\'\n   \n   publish: false\n   \n   ---\n   \n   \n   常用变量说明：\n   \n   title :文章标题，放弃通过一级目录定义标题的方式，改在 Front Matter 中定义。\n   \n   date :文章创建日期，格式 2019-08-08 或 2019-08-08 08:08:08。\n   \n   sidebar:是否开启侧边栏。\n   \n   categories :所属分类。\n   \n   tags :所属标签。\n   \n   keys: 所属标签。\n   \n   publish :文章是否发布。\n\n另外还有一些Vuepress 默认主题的变量例如prev, next，请移步 官方文档(opens new window)\n\n\n# 摘要\n\n> 在markdown代码中，您将看到注释，注释前面的代码将显示在列表页面上的文章摘要中。\n\n---\n\ntitle: Vuepress使用指南(reco)\n\ndate: 2020-08-16\n\nsidebar: \'auto\'\n\ncategories:\n\n- 工具\n\ntags:\n\n- vue\n\npublish: true\n\n---\n\n::: tip\n\nVuepress是Vue作者尤雨溪开发的文档工具，本文采用Vuepress的reco主题进行相关配置说明\n\n:::\n\n\x3c!-- more --\x3e\n\n### markdown正文\n\n\n\n# deploy.sh\n\n#!/usr/bin/env sh\n\n# 确保脚本抛出遇到的错误\nset -e\n\n# 生成静态文件\nnpm run build\n\n# 进入生成的文件夹\ncd public\n\n# 如果是发布到自定义域名\n# echo \'www.yourwebsite.com\' > CNAME\n\ngit init\ngit add -A\ngit commit -m \'deploy\'\n\n# 如果你想要部署到 https://USERNAME.github.io\ngit push -f git@github.com:AirHua-byte/AirHua-byte.github.io.git master\n\n# 如果发布到 https://USERNAME.github.io/<REPO>  REPO=github上的项目\n# git push -f git@github.com:USERNAME/<REPO>.git master:gh-pages\n\ncd -\n\n\n\n\n\n\n\n\n',normalizedContent:'# 背景\n\n\n# 主题\n\nvuepress-theme-reco(opens new window)\n\n推荐：\n\nvuepress-theme-gungnir\n\n\n# 环境搭建\n\n\n# 安装node8.0+\n\n> node官网(opens new window)\n\n安装官网提示下载安装包安装即可\n\n安装完成后打开命令行工具，输入node -v，若返回版本信息则安装成功。\n\n\n# 创建博客工程\n\n使用npm\n\n# 安装vuepress\n\nnpm install vuepress -g\n\n# 安装脚手架工具\n\nnpm install @vuepress-reco/theme-cli -g\n\n# 创建项目\n\ntheme-cli init my-blog  #my-blog可替换成自己需要的项目名称aia\n\n\n使用yarn(推荐使用yarn)\n\n# 没有yarn先要安装yarn\nnpm install -g yarn\n# 查看版本：yarn --version\n\n# 导入vuepress依赖\nyarn add -d vuepress\n\n# 安装脚手架工具 需要全局否则用不了命令\nyarn global add @vuepress-reco/theme-cli\n# \n\n# 创建项目 这边要是下载不下来需要用梯子\ntheme-cli init my-blog\n\ncd 博客名\n\nyarn install\n\nyarn dev\n\n\n\n\n\n\n\n\n上述命令执行后，在命令行窗口会进行一系列的信息配置\n\n? what\'s the title of your project?  #键入您的项目标题\n\n? what\'s the description of your project? #键入您的项目描述\n\n? what\'s the author\'s name? #键入作者姓名\n\n? what style do you want your home page to be?(select afternoon-grocery, if you\n\nwant to download reco_luan\'s \'午后南杂\') (use arrow keys)\n\n❯ blog  # 此处通过方向键选择您首页风格，这里我们选择blog\n\n  doc\n\n  afternoon-grocery\n\n\n接下来进入您的工程目录，启动您的项目吧\n\n# 接入项目目录\n\ncd my-blog  #my-blog替换为之前您填入的项目名称\n\n# 安装npm\n\nnpm install\n\n# 运行测试环境\n\nnpm run dev\n\n\n访问命令行输出的ip地址，一般为http://localhost:8080(若端口被占用则依次递增，以终端输出为准)，即可访问您的博客了！\n\n\n\n\n# 博客配置\n\n\n# 工程结构\n\n├─ node_modules #存放着项目所需的依赖，我们不需要关心\n\n├─ docs  #该目录下存放您编写的文档\n\n│  └─ theme-reco\n\n│    ├─ api.md\n\n│    ├─ plugin.md\n\n│    ├─ theme.md\n\n│    └─ readme.md\n\n├─ blogs #该目录下存放您编写的博客文章\n\n│    ├─ category1\n\n│    │  ├─ 2018\n\n│    │  │  └─ 121501.md\n\n│    │  └─ 2019\n\n│    │    └─ 092101.md\n\n│    ├─ category2\n\n│    │  ├─ 2016\n\n│    │  │  └─ 121501.md\n\n│    │  └─ 2017\n\n│    │    └─ 092101.md\n\n│    └─ other\n\n│        └─ guide.md\n\n├─ .vuepress # 该目录下存放项目配置文件与静态资源\n\n│  ├─ config.js #该文件用于配置项目\n\n│  └─ public # 该目录下存放网页中所需的静态资源\n\n│    ├─ hero.png # 首页大图\n\n│    ├─ logo.png # 站点logo\n\n│    ├─ favicon.ico #站点图标\n\n│    └─ avatar.png #头像\n\n├─ package.json #依赖管理文件\n\n└─ readme.md #这里存放着博客首页的内容\n\n\n\n# 配置启动页\n\n> 启动页展示的内容为博客标题与描述，即您在创建工程时输入的内容\n\n您可以在.vuepress/config.js下找到如下内容，通过修改对应的字符来改变您的启动页\n\n// .vuepress/config.js\n\nmodule.exports = {\n\n  "title": "test",\n\n  "description": "test",\n\n  }\n\n\n\n# 配置首页\n\n> 首页即为启动页之后的主页面\n\n首页的内容由项目根目录下的readme.md 配置生成，您可以通过更改其中的配置项来变更您的首页\n\n---\n\nhome: true  #指定该文件为您的首页，改为false则不作为首页\n\nherotext: vuepress-theme-reco  #首页居中显示的文本\n\ntagline: a simple and beautiful vuepress blog theme. # 首页显示的标语\n\n# heroimage: /hero.png  #首页显示的主图，默认被注释，取消注释可显示图片\n\n# heroimagestyle: {  # 首页主图的样式控制，默认被注释\n\n#  maxwidth: \'600px\',\n\n#  width: \'100%\',\n\n#  display: block,\n\n#  margin: \'9rem auto 2rem\',\n\n#  background: \'#fff\',\n\n#  borderradius: \'1rem\',\n\n# }\n\nbgimagestyle: { #背景图片样式\n\n  height: \'450px\'\n\n}\n\n# 以下内容基本上不生效，可以不用关心\n\nisshowtitleinhome: false\n\nactiontext: guide\n\nactionlink: /views/other/guide\n\nfeatures:\n\n- title: yesterday\n\n  details: 开发一款看着开心、写着顺手的 vuepress 博客主题\n\n- title: today\n\n  details: 希望帮助更多的人花更多的时间在内容创作上，而不是博客搭建上\n\n- title: tomorrow\n\n  details: 希望更多的爱好者能够参与进来，帮助这个主题更好的成长\n\n---\n\n\n> tip:代码中所引用的图片，均以.vuepress/public 为根目录\n\n到此为主，您会注意到首页内容远不止这些，例如个人资料卡、文章列表，这些如何更改呢？\n\n * 文章列表是根据您的文章自动生成的，一旦您发布的文章中的含有front matter，系统会自动将其收集至首页，默认按时间顺序展示\n\n * 个人资料卡的头像和昵称由.vuepress/config.js进行配置，您可以找到如下内容，并进行修改配置。category和tag项则跟您的文章中标注的分类和标签自动生成\n   \n       "author": "airhua-byte", //昵称\n   \n       "authoravatar": "/avatar.png", //头像\n   \n\n * friend link 则是您可以自由更改的，它的配置在.vuepress/config.js中，您可以找到如下内容，并对应进行修改配置，如果可以的话，您可以尝试将本站点添加为友链~\n   \n       "friendlink": [\n   \n         {\n   \n           "title": "airhua-byte", //友联标题\n   \n           "desc": "敲键盘、按快门与拨琴弦",  //友链描述\n   \n           "email": "3301833942@qq.com",  //友链邮箱\n   \n           "link": "http://huabyte.com" //友链地址\n   \n         },\n   \n         {\n   \n           "title": "vuepress-theme-reco",\n   \n           "desc": "a simple and beautiful vuepress blog & doc theme.",\n   \n           "avatar": "https://vuepress-theme-reco.recoluan.com/icon_vuepress_reco.png",\n   \n           "link": "https://vuepress-theme-reco.recoluan.com"\n   \n         }\n   \n       ],\n   \n   \n   \n   # 配置底部\n   \n   底边栏展示了如主题、备案信息、版权、年份等信息，这些内容仍需要您前往.vuepress/config.js进行修改\n   \n       "author": "me", //版权信息，与昵称为同一数据\n   \n       "record": "xxxx", //备案信息\n   \n       "startyear": "2017" //开始年份\n   \n   \n   \n   # 配置导航栏\n   \n   # logo\n   \n   您需要前往.vuepress/config.js找到如下内容，修改您的logo图片，该图片存储在.vuepress/public中\n   \n       "logo": "/logo.png",\n   \n   \n   # 搜索\n   \n   您需要前往.vuepress/config.js找到如下内容，修改搜索相关配置\n   \n       "search": true,  //是否开启搜索\n   \n       "searchmaxsuggestions": 10,  //最多的搜索建议条目\n   \n   \n   # 导航\n   \n   您需要前往.vuepress/config.js找到如下内容，修改导航相关配置\n   \n   其中：\n   \n   * 导航文本为导航按钮所展示的文字信息\n   * 路由地址即为跳转路径，根目录/对应您项目的根目录，在项目打包时会将对应目录下的readme.md文件生成为index.html，例如您想将链接指向您的/docs/mydocument/readme.md,则将link内容改为``/docs/mydocument`,便可访问到您的文档。\n   * 图标则为导航文本左边显示的图标，可以在reco图标库 (opens new window)中寻找您需要的图标，也可以不要图标\n   \n       "nav": [  //如下代码中，每个{...}即为一个导航块\n   \n         {\n   \n           "text": "home",      //导航文本\n   \n           "link": "/",          //路由地址\n   \n           "icon": "reco-home"  //图标\n   \n         },\n   \n         {\n   \n           "text": "timeline",\n   \n           "link": "/timeline/",\n   \n           "icon": "reco-date"\n   \n         },\n   \n         {\n   \n           "text": "docs",\n   \n           "icon": "reco-message",\n   \n           "items": [\n   \n             {\n   \n               "text": "vuepress-reco",\n   \n               "link": "/docs/theme-reco/"\n   \n             }\n   \n           ]\n   \n         },\n   \n         {\n   \n           "text": "contact",\n   \n           "icon": "reco-message",\n   \n           "items": [\n   \n             {\n   \n               "text": "github",\n   \n               "link": "https://github.com/recoluan",\n   \n               "icon": "reco-github"\n   \n             }\n   \n           ]\n   \n         }\n   \n       ],\n   \n   \n   或许您已经注意到，如果需要配置一个像docs或者contact这样的折叠的导航应该如何做呢？他们并不会直接跳转到对应的目标地址。\n   \n   折叠导航的配置仍在之前所展示的导航配置代码中，现在将其单独提取出来进行分析。\n   \n   即在导航块中加入一个items数组，数组元素为多个{...}，是的，此{...}与导航块的{...}是同样的，所以您可以继续在其中添加文本、图标、路由等属性。\n   \n   {\n   \n           "text": "docs",  //导航文本\n   \n           "icon": "reco-message",  //导航图标\n   \n           "items": [  //导航子模块\n   \n             {\n   \n               "text": "vuepress-reco", //子模块文本\n   \n               "link": "/docs/theme-reco/" //子模块链接\n   \n             }\n   \n           ]\n   \n         },\n   \n         {\n   \n           "text": "contact",\n   \n           "icon": "reco-message",\n   \n           "items": [\n   \n             {\n   \n               "text": "github",\n   \n               "link": "https://github.com/recoluan",\n   \n               "icon": "reco-github"\n   \n             }\n   \n           ]\n   \n         }\n   \n   \n   \n   # 文档写作\n   \n   \n   # front matter\n   \n   > 在markdown文档的顶部插入一段yaml配置代码\n   \n   一个完整的 front matter 案例：\n   \n   ---\n   \n   title: 烤鸭的做法\n   \n   date: 2019-08-08\n   \n   sidebar: \'auto\'\n   \n   categories:\n   \n   - 烹饪\n   \n   - 爱好\n   \n   tags:\n   \n   - 烤\n   \n   - 鸭子\n   \n   keys:\n   \n   - \'123456\'\n   \n   publish: false\n   \n   ---\n   \n   \n   常用变量说明：\n   \n   title :文章标题，放弃通过一级目录定义标题的方式，改在 front matter 中定义。\n   \n   date :文章创建日期，格式 2019-08-08 或 2019-08-08 08:08:08。\n   \n   sidebar:是否开启侧边栏。\n   \n   categories :所属分类。\n   \n   tags :所属标签。\n   \n   keys: 所属标签。\n   \n   publish :文章是否发布。\n\n另外还有一些vuepress 默认主题的变量例如prev, next，请移步 官方文档(opens new window)\n\n\n# 摘要\n\n> 在markdown代码中，您将看到注释，注释前面的代码将显示在列表页面上的文章摘要中。\n\n---\n\ntitle: vuepress使用指南(reco)\n\ndate: 2020-08-16\n\nsidebar: \'auto\'\n\ncategories:\n\n- 工具\n\ntags:\n\n- vue\n\npublish: true\n\n---\n\n::: tip\n\nvuepress是vue作者尤雨溪开发的文档工具，本文采用vuepress的reco主题进行相关配置说明\n\n:::\n\n\x3c!-- more --\x3e\n\n### markdown正文\n\n\n\n# deploy.sh\n\n#!/usr/bin/env sh\n\n# 确保脚本抛出遇到的错误\nset -e\n\n# 生成静态文件\nnpm run build\n\n# 进入生成的文件夹\ncd public\n\n# 如果是发布到自定义域名\n# echo \'www.yourwebsite.com\' > cname\n\ngit init\ngit add -a\ngit commit -m \'deploy\'\n\n# 如果你想要部署到 https://username.github.io\ngit push -f git@github.com:airhua-byte/airhua-byte.github.io.git master\n\n# 如果发布到 https://username.github.io/<repo>  repo=github上的项目\n# git push -f git@github.com:username/<repo>.git master:gh-pages\n\ncd -\n\n\n\n\n\n\n\n\n',charsets:{cjk:!0},lastUpdated:"2024/05/02, 12:56:36",lastUpdatedTimestamp:1714654596e3},{title:"C++自救指南-工具篇",frontmatter:{title:"C++自救指南-工具篇",date:"2024-04-27T00:23:04.000Z",author:"京都小低调",permalink:"/pages/fe7e63/"},regularPath:"/02.%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/01.cpp%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97/02.C++%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97-%E5%B7%A5%E5%85%B7%E7%AF%87.html",relativePath:"02.好文分享/01.cpp自救指南/02.C++自救指南-工具篇.md",key:"v-5f0e8e19",path:"/pages/fe7e63/",headers:[{level:2,title:"大语言模型",slug:"大语言模型",normalizedTitle:"大语言模型",charIndex:74},{level:2,title:"编译及编译相关工具",slug:"编译及编译相关工具",normalizedTitle:"编译及编译相关工具",charIndex:810},{level:3,title:"其他编译工具",slug:"其他编译工具",normalizedTitle:"其他编译工具",charIndex:1206},{level:2,title:"Linux平台搭建",slug:"linux平台搭建",normalizedTitle:"linux平台搭建",charIndex:1325},{level:3,title:"Windows 用户",slug:"windows-用户",normalizedTitle:"windows 用户",charIndex:1499},{level:3,title:"Mac 用户",slug:"mac-用户",normalizedTitle:"mac 用户",charIndex:1740},{level:3,title:"云服务器",slug:"云服务器",normalizedTitle:"云服务器",charIndex:1991},{level:3,title:"Docker 构建开发环境",slug:"docker-构建开发环境",normalizedTitle:"docker 构建开发环境",charIndex:2116},{level:2,title:"IDE 选择",slug:"ide-选择",normalizedTitle:"ide 选择",charIndex:2325},{level:3,title:"Visual Studio Code 开发环境搭建",slug:"visual-studio-code-开发环境搭建",normalizedTitle:"visual studio code 开发环境搭建",charIndex:3088},{level:3,title:"脚手架搭建",slug:"脚手架搭建",normalizedTitle:"脚手架搭建",charIndex:4173},{level:4,title:"开始",slug:"开始",normalizedTitle:"开始",charIndex:1135},{level:4,title:"Debug",slug:"debug",normalizedTitle:"debug",charIndex:3938}],headersStr:"大语言模型 编译及编译相关工具 其他编译工具 Linux平台搭建 Windows 用户 Mac 用户 云服务器 Docker 构建开发环境 IDE 选择 Visual Studio Code 开发环境搭建 脚手架搭建 开始 Debug",content:"工欲善其事，必先利其器。\n\n人和动物最大的区别就是使用工具，磨刀不误砍柴工。\n\n本篇章中我将会介绍一些学习和开发上常用的工具，供大家参考。\n\n\n# 大语言模型\n\n作为新时代的码农，也必须要学会使用新时代的工具—ChatGPT\n\n从 jyy 2024 年 OS 课程第一节中截取了一段话：\n\n\n\nchatGPT 的出现，大大降低了我们获取 相对“正确” 知识的难度。\n\n在过去，当你有一个技术上的问题，你需要依靠搜索引擎搜索关键词，需要一个一个点开网页，忍受着各种低质量回答，被各种无关内容打扰，最后在茫茫互联网中找到你想要的，那个也许“正确”的 答案。\n\n在过去，阅读那些经典技术书籍时，你需要忍受极其糟糕的翻译质量，试图理解它晦涩难懂的行文逻辑，有时读了半天不知所云，也找不到人与你交流讨论。\n\n在过去，当你面对超长的编译报错，你只能抓耳挠腮，就算寻求搜索引擎的帮助，往往在短时间内也很难遇到和你完全一致的问题及其解决办法（除非过于简单）。\n\nBut Now， 大人， 时代变了！\n\n现在，只需要提供一个好的问题，模型就会给你一个相对“正确”的答案。\n\n现在，遇到一个新的技术问题，你可以尝试咨询一下通义：\n\n\n\n\n\n\n\n\n\n现在，阅读一本书，可以直接扔给文心，然后向它诉说你心中的任何疑问：\n\n\n\n\n\n\n\n现在，面对令人烦恼的错误日志，不妨交给 GPT，让它帮你寻找解决方案：\n\n\n\n我特地使用了三种模型来举上面的例子，事实上，它们在处理类似问题时都有着不错的表现，无非是谁做的更好罢了。选择一个你觉得好用的产品使用即可。生成内容的质量，可不仅仅依赖于模型的好坏，有时也需要思考一下，你有没有提出一个好的问题（Prompt 指南）。\n\n就同 jyy 说的那样，在这个新时代，学习从未如此之高效，因材施教在一定程度上得以实现！\n\n如果你还没有体验过这类新时代的工具，不妨尝试一下，说不定会给你带来别样的惊喜～\n\n\n# 编译及编译相关工具\n\n 1. gcc/g++ or clang： 编译套件，我只用过 gcc，如果你对另外一个感兴趣，可以自行百度。\n 2. Makefile: Makefile 20 分钟入门，简简单单，展示如何使用 Makefile 管理和编译 C++ 代码_哔哩哔哩_bilibili\n 3. CMake，用来生成 Makefile：CMake 6 分钟入门，不用再写复杂的 Makefile_哔哩哔哩_bilibili\n\n好了，编译相关的核心工具都在上面啦，只要掌握 cmake 的使用，市面上 80% 以上的开源项目你都能搞定。\n\n关于 Makefile 和 CMake 的学习路线，我认为在新时代下，能借助新工具解决的问题，就不要自己从头开始研究。把你的项目结构告诉 chatGPT，或者文心一言，通义千问等国产大模型，让他帮你写。在学习的过程中，久而久之，你也就会了。\n\n\n# 其他编译工具\n\n如果你对上面的编译套件还不太满意，也许可以尝试下面两个：\n\n 1. xmake: 国产之光，听说支持无缝转换cmake xmake.io\n\n 2. Bazel: 谷歌的编译工具,支持多语言 bazel.build\n\n\n# Linux平台搭建\n\n本篇章主要面向 Linux 环境，一些只在Win端开发的特殊岗位（游戏客户端等）直接忽视。\n\nLinux C++通常需要涉及到系统编程，所以搭建一个 Linux 环境是一件很重要的事情。\n\n最常用的两个：Ubuntu 或者 CentOS，任选其一即可，对于新手来说区别不大（不过学生党用 Ubuntu 的貌似多一些）\n\n\n# Windows 用户\n\n对于Windows平台作为主力的萌新来说（大多数人），前期就不要花里胡哨地鼓捣新奇玩意了，虚拟机就是你最好的伙伴。类似的教程，网上一大堆，再不济你还可以问 GPT， 这里给出一个视频，照着学就完了。\n\n05_VMware 的功能和作用_哔哩哔哩_bilibili\n\n当你 Linux 稍微熟悉以后，也许你会开始对微软的 WSL 开始感兴趣，下面会给出官方链接，如果因为网络问题下载非常慢，那么也许你应该考虑一下更 “科学” 的下载方式。安装 WSL\n\n\n# Mac 用户\n\nMacOS 本身就是类 Unix 系统，也就是说 POSIX 兼容， 所以在学习的整个过程当中，如果你愿意的话，都可以直接在本地环境进行开发。 但是，但是，当学到一些 Linux 特殊且重要的系统调用“方言”时（说的就是你 Epoll），你还是不免需要一个 Linux 环境（Mac 有类似方言：kqueue）。 Mac 上也有类似的虚拟机，Appstore 中搜一下，很多。macOS 使用 VMware Fusion 安装 Ubuntu 桌面版_哔哩哔哩_bilibili\n\n\n# 云服务器\n\n当然，你还可以选择买一个云主机使劲折腾，各大厂商对学生都会推出非常便宜的年包方案，新用户 100 块一年，四舍五入那就是白嫖啊！\n\nhttps://cloud.tencent.com\n\nhttps://cn.aliyun.com\n\n\n# Docker 构建开发环境\n\n如果上面的所有选项你都不满意，那么不妨尝试一下使用 Docker 来搭建你的 Linux 开发环境吧（这也是我目前的在用的方案）\n\n下面的视频也许会帮到你。\n\n在 Mac 和 Windows 下使用 VSCode+Docker 快速搭建 Linux C++ 开发环境_哔哩哔哩_bilibili\n\n搭建环境的同时又能学习到新工具，我们 cpper 真的是太 会折腾 厉害了呢 ～\n\n\n# IDE 选择\n\n摆在 C++ 新人面前最大的难题，可能就是工具的选取问题；cpper 常用的开发环境大致分为 3 类：\n\n 1. 摆烂派：Visual Studio or CLion\n\n宇宙最强 IDE，不用白不用，好处是减少了新人相当多心智负担，坏处？无法满足 cpper 变态般的定制化需求~\n\n老版本的 Visual Studio 基本绑死了 Windows 平台的开发，但是据说新版对远程开发支持相当友好，感兴趣的可以尝试。CLion 没用过，听说很好用，但是根据我使用 Pycharm 的经验，JB 家的远程开发体验一坨，CLion 估计也好不到哪去。本地开发的话，体验应该还是非常好的。 这俩我就不放链接了，一搜一大堆的安装教程。\n\n 2. 极端派：vi、vim、neovim、nano、Emacs 等\n\ncpper 的最大特点就是喜欢瞎折腾，Visual Studio 和 CLion 自然入不了他们的法眼，上述一众文本编辑器才是他们的最爱，可以极大程度地满足他们对于定制化 IDE 的需求。\n\n如果你实在想体验一下大佬们写代码的方式，可以参考下面视频的方式，自己配置一下。\n\n【Vim 插件整合包】C++/Python 自动补全，模糊查找文件，编译 CMake 工程等_哔哩哔哩_bilibili。\n\n 3. 中庸派：Visual Studio Code\n\n也就是大名鼎鼎的 vscode 啦(也有人简写成 vsc)~\n\n其实 vscode 本身也就是一个文本编辑器啦，但是丰富的插件让其满足成为一个合格 IDE 的一切条件，丝滑的远程开发体验让人欲罢不能。 目前我接触到的年轻 cpper 基本都选择将它当作自己的主力 IDE。 下面章节我将详细介绍我日常使用的插件，基本可以满足我的日常开发需求。\n\n\n# Visual Studio Code 开发环境搭建\n\n好啦，终于来到工具篇中最最最重要的环节了，众所周知，每个 cpper 的开发环境，都是摸爬滚打多年沉淀下来的精华。今天在这里给大伙展示一下我沉淀。\n\n首先，你需要搭建好一个 Linux 平台，用虚拟机，用 Docker，用远程服务器都无所谓。假设你有了。\n\n好的，现在打开 vscode，然后在侧边栏找到如下图标（侧边栏如何打开，自行百度，或者问 GPT）：\n\n\n\n好的，现在就可以愉快地安装插件啦。\n\n 1. Remote - SSH\n\n\n\nvscode 远程开发滴核心出装，有了它你就可以在远端（虚拟机也算远端）进行开发，就如同本地开发一样丝滑 ～ （具体使用步骤请百度或问 GPT，下同）\n\n 2. Project Manager\n\n\n\n无缝跳转你的本地项目和任意远端项目，用过都说好\n\n 3. Docker\n\n\n\n如果你使用的是 Docker 搭建的环境，这个插件是必不可少的，可以很方便地管理你的容器。\n\n 4. Dev Containers\n\n\n\n让使用 Docker 环境开发变得真正好用的神级插件，让 vscode 拥有可以直接进入容器内的能力，配合 Project Manager，在之后的开发中，你就能无缝切换任意平台的项目了。\n\n好的，上面就是本地环境当中仅需安装的四个插件啦，当你远程进入一个 容器/虚拟机/远程服务器 后，我们来安装远端的插件。\n\n 5. CMake Tools\n\n\n\n用于调试基于 CMake 组织的项目等代码\n\n 6. clangd\n\n\n\n比 vscode 官方 C++ 插件提供更友好的代码跳转和代码补全功能, 如何开启请看链接：\n\nGetting started\n\n使用 clangd 取代 cpptools 作为 vscode 的 C/C++ LSP - 与 MPI 做斗争 - 博客园\n\n 7. C/C++\n\n\n\n本来有了 clangd 应该不用安这个了才是，但使用 CMake Tools Debug 时打断点，必须要使用到它。。。安一下吧。\n\n 8. Comate & 通义灵码\n\n\n\n\n\n新时代的新工具，你的随身代码助手，两个当中下一个就好，目前这俩都是限时免费，且用且珍惜。\n\nvscode 拥有非常活跃的插件市场，这里只是列举出我最常用的几个，其中还有更多好用的插件，等待大伙自己发掘。\n\n或许，你还可以参考下面大佬的配置：\n\n【VS Code】四年功力 一刻掌握 速通 C++ 插件/终端美化/工程管理 懒人必备_哔哩哔哩_bilibili\n\n\n# 脚手架搭建\n\n这一节，我将使用上一节视频中提到的 github 项目，结合之前介绍的插件，跑通一个 C++ 开发脚手架。\n\n> Tips：如果中途遇到任何我在讲解中没有遇到的问题，导致你流程进行不下去，不妨去问问 GPT 看看它是否能给你解决 ～\n\n首先，vscode 先进入一个开发环境，然后打开终端 shell，cd 到一个合适的目录，然后\n\ngit clone https://github.com/Codesire-Deng/TemplateRepoCxx.git\n\n\n\n\n好，然后打开这个文件夹：\n\n\n\n然后 vscode 就会跳转到刚刚 clone 的项目中（此时你可以使用 Project Manager 保存当前目录，下次打开 vscode 就可以直接跳转到该项目啦），就是下面这个图标。\n\n\n\nTemplateRepoCxx 包含了一个标准的 C++ 项目结构：\n\n\n\n通常你的 cpp 文件就放在 src 文件夹中，.h 文件放在 include 下，example 存放一些样例代码，test 存放一些测试代码。\n\n# 开始\n\n好，让我们来实现一个最简单的程序，循环打印 5 次 hello world\n\n\n\n下面的灰色部分就是通义灵码通过我写的注释，给我联想的代码，按 Tab 键即可采纳。\n\n\n\n好，这样就 ok 啦，我们来编译运行一下，打开终端，并 cd 到当前项目。\n\n\n\n\n\n然后执行下列命令：\n\nmkdir build\ncd build\ncmake ..\nmake\n\n\n\n\n> 问：为什么要创建 build 文件夹?\n> \n> 答： cmake 和 make 都会创建大量文件，为了方便管理，通常都会建立一个 build 文件夹，在文件夹内编译，这样所有文件都限制在了 build 文件夹下。 删除也比较好删。\n\n好了，我们来执行一下吧，在 build 文件夹内，执行（惊！才发现文件名打错了，不重要。。懒得改了）\n\n./src/hello\n\n\n\n\nok, 就是这么简单。\n\n> Tips：删除文件可以尝试不直接使用 rm，而是使用工具 trash-cli : trash-cli 中文手册\n\n# Debug\n\n现在，让我们来尝试使用 CMake Tool 进行 Debug.\n\n首先，点开 cmake 插件\n\n\n\n选择你的编译器，配置所有项目，然后再按一下右边的生成所有项目，结果如下：\n\n\n\n你会发现生成了一个可调试的项目，现在，打上断点，然后再项目上按下右键，调试，开启 Debug 之旅吧。\n\n\n\n\n\n注意，调试时最好需要开启 debug 模式，不然编译器可能会优化你的代码，让你的调试流程看起来非常抽象。。。具体情况等你深入了解后自然就懂，遇到不会的问题或者异常，请咨询 GPT。",normalizedContent:"工欲善其事，必先利其器。\n\n人和动物最大的区别就是使用工具，磨刀不误砍柴工。\n\n本篇章中我将会介绍一些学习和开发上常用的工具，供大家参考。\n\n\n# 大语言模型\n\n作为新时代的码农，也必须要学会使用新时代的工具—chatgpt\n\n从 jyy 2024 年 os 课程第一节中截取了一段话：\n\n\n\nchatgpt 的出现，大大降低了我们获取 相对“正确” 知识的难度。\n\n在过去，当你有一个技术上的问题，你需要依靠搜索引擎搜索关键词，需要一个一个点开网页，忍受着各种低质量回答，被各种无关内容打扰，最后在茫茫互联网中找到你想要的，那个也许“正确”的 答案。\n\n在过去，阅读那些经典技术书籍时，你需要忍受极其糟糕的翻译质量，试图理解它晦涩难懂的行文逻辑，有时读了半天不知所云，也找不到人与你交流讨论。\n\n在过去，当你面对超长的编译报错，你只能抓耳挠腮，就算寻求搜索引擎的帮助，往往在短时间内也很难遇到和你完全一致的问题及其解决办法（除非过于简单）。\n\nbut now， 大人， 时代变了！\n\n现在，只需要提供一个好的问题，模型就会给你一个相对“正确”的答案。\n\n现在，遇到一个新的技术问题，你可以尝试咨询一下通义：\n\n\n\n\n\n\n\n\n\n现在，阅读一本书，可以直接扔给文心，然后向它诉说你心中的任何疑问：\n\n\n\n\n\n\n\n现在，面对令人烦恼的错误日志，不妨交给 gpt，让它帮你寻找解决方案：\n\n\n\n我特地使用了三种模型来举上面的例子，事实上，它们在处理类似问题时都有着不错的表现，无非是谁做的更好罢了。选择一个你觉得好用的产品使用即可。生成内容的质量，可不仅仅依赖于模型的好坏，有时也需要思考一下，你有没有提出一个好的问题（prompt 指南）。\n\n就同 jyy 说的那样，在这个新时代，学习从未如此之高效，因材施教在一定程度上得以实现！\n\n如果你还没有体验过这类新时代的工具，不妨尝试一下，说不定会给你带来别样的惊喜～\n\n\n# 编译及编译相关工具\n\n 1. gcc/g++ or clang： 编译套件，我只用过 gcc，如果你对另外一个感兴趣，可以自行百度。\n 2. makefile: makefile 20 分钟入门，简简单单，展示如何使用 makefile 管理和编译 c++ 代码_哔哩哔哩_bilibili\n 3. cmake，用来生成 makefile：cmake 6 分钟入门，不用再写复杂的 makefile_哔哩哔哩_bilibili\n\n好了，编译相关的核心工具都在上面啦，只要掌握 cmake 的使用，市面上 80% 以上的开源项目你都能搞定。\n\n关于 makefile 和 cmake 的学习路线，我认为在新时代下，能借助新工具解决的问题，就不要自己从头开始研究。把你的项目结构告诉 chatgpt，或者文心一言，通义千问等国产大模型，让他帮你写。在学习的过程中，久而久之，你也就会了。\n\n\n# 其他编译工具\n\n如果你对上面的编译套件还不太满意，也许可以尝试下面两个：\n\n 1. xmake: 国产之光，听说支持无缝转换cmake xmake.io\n\n 2. bazel: 谷歌的编译工具,支持多语言 bazel.build\n\n\n# linux平台搭建\n\n本篇章主要面向 linux 环境，一些只在win端开发的特殊岗位（游戏客户端等）直接忽视。\n\nlinux c++通常需要涉及到系统编程，所以搭建一个 linux 环境是一件很重要的事情。\n\n最常用的两个：ubuntu 或者 centos，任选其一即可，对于新手来说区别不大（不过学生党用 ubuntu 的貌似多一些）\n\n\n# windows 用户\n\n对于windows平台作为主力的萌新来说（大多数人），前期就不要花里胡哨地鼓捣新奇玩意了，虚拟机就是你最好的伙伴。类似的教程，网上一大堆，再不济你还可以问 gpt， 这里给出一个视频，照着学就完了。\n\n05_vmware 的功能和作用_哔哩哔哩_bilibili\n\n当你 linux 稍微熟悉以后，也许你会开始对微软的 wsl 开始感兴趣，下面会给出官方链接，如果因为网络问题下载非常慢，那么也许你应该考虑一下更 “科学” 的下载方式。安装 wsl\n\n\n# mac 用户\n\nmacos 本身就是类 unix 系统，也就是说 posix 兼容， 所以在学习的整个过程当中，如果你愿意的话，都可以直接在本地环境进行开发。 但是，但是，当学到一些 linux 特殊且重要的系统调用“方言”时（说的就是你 epoll），你还是不免需要一个 linux 环境（mac 有类似方言：kqueue）。 mac 上也有类似的虚拟机，appstore 中搜一下，很多。macos 使用 vmware fusion 安装 ubuntu 桌面版_哔哩哔哩_bilibili\n\n\n# 云服务器\n\n当然，你还可以选择买一个云主机使劲折腾，各大厂商对学生都会推出非常便宜的年包方案，新用户 100 块一年，四舍五入那就是白嫖啊！\n\nhttps://cloud.tencent.com\n\nhttps://cn.aliyun.com\n\n\n# docker 构建开发环境\n\n如果上面的所有选项你都不满意，那么不妨尝试一下使用 docker 来搭建你的 linux 开发环境吧（这也是我目前的在用的方案）\n\n下面的视频也许会帮到你。\n\n在 mac 和 windows 下使用 vscode+docker 快速搭建 linux c++ 开发环境_哔哩哔哩_bilibili\n\n搭建环境的同时又能学习到新工具，我们 cpper 真的是太 会折腾 厉害了呢 ～\n\n\n# ide 选择\n\n摆在 c++ 新人面前最大的难题，可能就是工具的选取问题；cpper 常用的开发环境大致分为 3 类：\n\n 1. 摆烂派：visual studio or clion\n\n宇宙最强 ide，不用白不用，好处是减少了新人相当多心智负担，坏处？无法满足 cpper 变态般的定制化需求~\n\n老版本的 visual studio 基本绑死了 windows 平台的开发，但是据说新版对远程开发支持相当友好，感兴趣的可以尝试。clion 没用过，听说很好用，但是根据我使用 pycharm 的经验，jb 家的远程开发体验一坨，clion 估计也好不到哪去。本地开发的话，体验应该还是非常好的。 这俩我就不放链接了，一搜一大堆的安装教程。\n\n 2. 极端派：vi、vim、neovim、nano、emacs 等\n\ncpper 的最大特点就是喜欢瞎折腾，visual studio 和 clion 自然入不了他们的法眼，上述一众文本编辑器才是他们的最爱，可以极大程度地满足他们对于定制化 ide 的需求。\n\n如果你实在想体验一下大佬们写代码的方式，可以参考下面视频的方式，自己配置一下。\n\n【vim 插件整合包】c++/python 自动补全，模糊查找文件，编译 cmake 工程等_哔哩哔哩_bilibili。\n\n 3. 中庸派：visual studio code\n\n也就是大名鼎鼎的 vscode 啦(也有人简写成 vsc)~\n\n其实 vscode 本身也就是一个文本编辑器啦，但是丰富的插件让其满足成为一个合格 ide 的一切条件，丝滑的远程开发体验让人欲罢不能。 目前我接触到的年轻 cpper 基本都选择将它当作自己的主力 ide。 下面章节我将详细介绍我日常使用的插件，基本可以满足我的日常开发需求。\n\n\n# visual studio code 开发环境搭建\n\n好啦，终于来到工具篇中最最最重要的环节了，众所周知，每个 cpper 的开发环境，都是摸爬滚打多年沉淀下来的精华。今天在这里给大伙展示一下我沉淀。\n\n首先，你需要搭建好一个 linux 平台，用虚拟机，用 docker，用远程服务器都无所谓。假设你有了。\n\n好的，现在打开 vscode，然后在侧边栏找到如下图标（侧边栏如何打开，自行百度，或者问 gpt）：\n\n\n\n好的，现在就可以愉快地安装插件啦。\n\n 1. remote - ssh\n\n\n\nvscode 远程开发滴核心出装，有了它你就可以在远端（虚拟机也算远端）进行开发，就如同本地开发一样丝滑 ～ （具体使用步骤请百度或问 gpt，下同）\n\n 2. project manager\n\n\n\n无缝跳转你的本地项目和任意远端项目，用过都说好\n\n 3. docker\n\n\n\n如果你使用的是 docker 搭建的环境，这个插件是必不可少的，可以很方便地管理你的容器。\n\n 4. dev containers\n\n\n\n让使用 docker 环境开发变得真正好用的神级插件，让 vscode 拥有可以直接进入容器内的能力，配合 project manager，在之后的开发中，你就能无缝切换任意平台的项目了。\n\n好的，上面就是本地环境当中仅需安装的四个插件啦，当你远程进入一个 容器/虚拟机/远程服务器 后，我们来安装远端的插件。\n\n 5. cmake tools\n\n\n\n用于调试基于 cmake 组织的项目等代码\n\n 6. clangd\n\n\n\n比 vscode 官方 c++ 插件提供更友好的代码跳转和代码补全功能, 如何开启请看链接：\n\ngetting started\n\n使用 clangd 取代 cpptools 作为 vscode 的 c/c++ lsp - 与 mpi 做斗争 - 博客园\n\n 7. c/c++\n\n\n\n本来有了 clangd 应该不用安这个了才是，但使用 cmake tools debug 时打断点，必须要使用到它。。。安一下吧。\n\n 8. comate & 通义灵码\n\n\n\n\n\n新时代的新工具，你的随身代码助手，两个当中下一个就好，目前这俩都是限时免费，且用且珍惜。\n\nvscode 拥有非常活跃的插件市场，这里只是列举出我最常用的几个，其中还有更多好用的插件，等待大伙自己发掘。\n\n或许，你还可以参考下面大佬的配置：\n\n【vs code】四年功力 一刻掌握 速通 c++ 插件/终端美化/工程管理 懒人必备_哔哩哔哩_bilibili\n\n\n# 脚手架搭建\n\n这一节，我将使用上一节视频中提到的 github 项目，结合之前介绍的插件，跑通一个 c++ 开发脚手架。\n\n> tips：如果中途遇到任何我在讲解中没有遇到的问题，导致你流程进行不下去，不妨去问问 gpt 看看它是否能给你解决 ～\n\n首先，vscode 先进入一个开发环境，然后打开终端 shell，cd 到一个合适的目录，然后\n\ngit clone https://github.com/codesire-deng/templaterepocxx.git\n\n\n\n\n好，然后打开这个文件夹：\n\n\n\n然后 vscode 就会跳转到刚刚 clone 的项目中（此时你可以使用 project manager 保存当前目录，下次打开 vscode 就可以直接跳转到该项目啦），就是下面这个图标。\n\n\n\ntemplaterepocxx 包含了一个标准的 c++ 项目结构：\n\n\n\n通常你的 cpp 文件就放在 src 文件夹中，.h 文件放在 include 下，example 存放一些样例代码，test 存放一些测试代码。\n\n# 开始\n\n好，让我们来实现一个最简单的程序，循环打印 5 次 hello world\n\n\n\n下面的灰色部分就是通义灵码通过我写的注释，给我联想的代码，按 tab 键即可采纳。\n\n\n\n好，这样就 ok 啦，我们来编译运行一下，打开终端，并 cd 到当前项目。\n\n\n\n\n\n然后执行下列命令：\n\nmkdir build\ncd build\ncmake ..\nmake\n\n\n\n\n> 问：为什么要创建 build 文件夹?\n> \n> 答： cmake 和 make 都会创建大量文件，为了方便管理，通常都会建立一个 build 文件夹，在文件夹内编译，这样所有文件都限制在了 build 文件夹下。 删除也比较好删。\n\n好了，我们来执行一下吧，在 build 文件夹内，执行（惊！才发现文件名打错了，不重要。。懒得改了）\n\n./src/hello\n\n\n\n\nok, 就是这么简单。\n\n> tips：删除文件可以尝试不直接使用 rm，而是使用工具 trash-cli : trash-cli 中文手册\n\n# debug\n\n现在，让我们来尝试使用 cmake tool 进行 debug.\n\n首先，点开 cmake 插件\n\n\n\n选择你的编译器，配置所有项目，然后再按一下右边的生成所有项目，结果如下：\n\n\n\n你会发现生成了一个可调试的项目，现在，打上断点，然后再项目上按下右键，调试，开启 debug 之旅吧。\n\n\n\n\n\n注意，调试时最好需要开启 debug 模式，不然编译器可能会优化你的代码，让你的调试流程看起来非常抽象。。。具体情况等你深入了解后自然就懂，遇到不会的问题或者异常，请咨询 gpt。",charsets:{cjk:!0},lastUpdated:"2024/04/28, 17:23:46",lastUpdatedTimestamp:1714325026e3},{title:"C++自救指南-学习路线篇",frontmatter:{title:"C++自救指南-学习路线篇",date:"2024-04-27T03:02:20.000Z",author:"京都小低调",permalink:"/pages/9133cc/"},regularPath:"/02.%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/01.cpp%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97/03.C++%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E7%AF%87.html",relativePath:"02.好文分享/01.cpp自救指南/03.C++自救指南-学习路线篇.md",key:"v-6ff91c7e",path:"/pages/9133cc/",headers:[{level:2,title:"零基础篇",slug:"零基础篇",normalizedTitle:"零基础篇",charIndex:674},{level:3,title:"C 语言",slug:"c-语言",normalizedTitle:"c 语言",charIndex:905},{level:3,title:"C++",slug:"c",normalizedTitle:"c++",charIndex:5},{level:3,title:"Linux",slug:"linux",normalizedTitle:"linux",charIndex:300},{level:2,title:"初学者篇",slug:"初学者篇",normalizedTitle:"初学者篇",charIndex:1503},{level:3,title:"C 语言",slug:"c-语言-2",normalizedTitle:"c 语言",charIndex:905},{level:3,title:"C++",slug:"c-2",normalizedTitle:"c++",charIndex:5},{level:3,title:"数据结构与算法",slug:"数据结构与算法",normalizedTitle:"数据结构与算法",charIndex:321},{level:3,title:"计算机网络",slug:"计算机网络",normalizedTitle:"计算机网络",charIndex:245},{level:3,title:"操作系统",slug:"操作系统",normalizedTitle:"操作系统",charIndex:53},{level:3,title:"数据库",slug:"数据库",normalizedTitle:"数据库",charIndex:4003},{level:2,title:"提高篇",slug:"提高篇",normalizedTitle:"提高篇",charIndex:4137},{level:3,title:"C++",slug:"c-3",normalizedTitle:"c++",charIndex:5},{level:3,title:"数据结构",slug:"数据结构",normalizedTitle:"数据结构",charIndex:321},{level:3,title:"计算机网络",slug:"计算机网络-2",normalizedTitle:"计算机网络",charIndex:245},{level:3,title:"操作系统 & 系统编程",slug:"操作系统-系统编程",normalizedTitle:"操作系统 &amp; 系统编程",charIndex:null},{level:3,title:"网络编程",slug:"网络编程",normalizedTitle:"网络编程",charIndex:43},{level:3,title:"分布式",slug:"分布式",normalizedTitle:"分布式",charIndex:6293}],headersStr:"零基础篇 C 语言 C++ Linux 初学者篇 C 语言 C++ 数据结构与算法 计算机网络 操作系统 数据库 提高篇 C++ 数据结构 计算机网络 操作系统 & 系统编程 网络编程 分布式",content:"如果你看了C++自救指南-方向梳理篇，就会发现，绝大多数C++相关的岗位，都存在着例如网络编程、并发编程、操作系统等行业通用的技术栈。\n\n本篇章虽然打着所谓 “学习路线”的招牌，但实则是对这些通用知识一些资料的整合。这些资料大多是本🐭三年来踩过无数坑后筛选下来的，前人栽树，后人乘凉，照着下列推荐的课程或书籍学，让你几乎不走一点弯路。\n\n稍微归纳总结一下C++自救指南-方向梳理篇中那些通用技术栈，无非就是下列这些：\n\n 1. 语言：C++语法、STL标准库、C++新特性\n 2. 网络：计算机网络基础、网络编程基础\n 3. 操作系统：进程间通信、内存管理、线程同步、内存管理等\n 4. 系统编程：Linux系统API、多线程编程\n 5. 数据结构与算法：Leetcode，刷就完了\n\n如果上述提到的技术都比较熟悉，那么大部分岗位的基本要求就差不多达到了，剩下的就是加强每个模块的深度，以及学一些特定岗位所需要的知识。\n\n\n# 前言-推荐级别的解释：\n\n 1. 重要且必要：表明该阶段中，除非找到更好的替代，否则几乎没有理由不学的课程或书籍。\n 2. 高性价比：重要程度没有上面一个等级高，但是学起来不亏的课程或书籍。\n 3. 重要但不必要：对于某个方向，或者某类岗位来说很重要，但可能对其他方向重要性稍弱的课程或书籍\n 4. 不必要：有看的价值，但不看也可以\n\n> Tips ：观前提醒，下面我说什么不重要，我贴出来的每个链接背后的内容才重要。 这些几乎都是经过我多年累积，优中选优的资料，把饭端你嘴边，学不学，学多少，就看你自己了。\n\n\n# 零基础篇\n\n面向转码选手，或者是0基础，入门困难的小白，主要是一些非常基础的课程，这个阶段不建议看书学习（大概率看不明白）\n\n这个阶段的要求不高，只需要了解一些基础语法，以及开发环境（Linux）的基本使用即可。\n\n因为科班的原因，所以我的启蒙主要是靠老师，一些资料收集并不详细，但是我还是列几个不错的供大家参考，这个阶段挑一个你看的下去的看，就可以了，不用纠结谁好谁坏。零基础阶段的目的就是快速入门，所以没必要耽误太长时间，哪个课程时间短看哪个！！！\n\n\n# C 语言\n\n对于 0 基础同学来说，学 C 是非常有必要的一件事，特别是对于 C++ 选手，更是如此。因为不管你是C选手还是C++选手，日后的工作中难免需要使用系统API进行编程，再不济，研究Linux的过程中，也是需要阅读大量C代码的，而且本就是一脉相承的语言，学好C对C++入门也会有较大的帮助。\n\n 1. 翁恺 C 语言（重要且必要）: 大多数 CS 人的启蒙老师，课程时间也短，就十几个小时，最推荐！！ 浙江大学翁恺教你 C 语言程序设计！C 语言基础入门！_哔哩哔哩_bilibili\n\n\n# C++\n\n 1. 黑马 C++ 全套 2019（不必要）：我本人没看过，但是听说质量尚可，零基础阶段仅需快速了解 C++ 这一语言即可，不需要扣细节，有个大概印象就可以过了。\n    \n    黑马程序员匠心之作 |C++ 教程从 0 到 1 入门编程,学习编程不再难_哔哩哔哩_bilibili\n\n 2. 其他任何你能看得下去的课程，这个阶段确实没啥好推荐的。。。\n\n\n# Linux\n\n 1. 尚硅谷 Linux0 基础（重要但不必要）： 如果你对 Linux 一窍不通，那推荐看一下，拿来入门应该问题不大，了解基本的概念和操作即可。这门课不要全部看，看到你不想看为止。尚硅谷 2024 最新 Linux 零基础教程（linux 快速入门，上手开发）_哔哩哔哩_bilibili\n\n\n# 初学者篇\n\n稍微有点基础知识的同学，应该直接从这里开始。本篇章中，我会推荐一些必刷的课程或书籍，这些课程，如果在学习的过程中感觉吃力，可以跳过，但是今后回头一定还要再看。\n\n虽然说是初学者篇，但其实我链接贴出来当中的内容，可一点也不基础。同时，这个篇章可能也是你在求职阶段耗费精力最多的篇章，万事开头难嘛，不必害怕，跟着本🐭严选的资料看下去，终有一日能“神功大成”。\n\n\n# C 语言\n\n> 为什么还要再学 C 语言? 其实我只是单纯想推荐下面这套课，有条件的话全程跟一遍，收获肯定比半路跟的要多。全程裸vim手敲，深入浅出，看过的都说好。\n\n 1. 李慧芹 嵌入式 Linux C 全套（重要且必要）：冷门神课，基础阶段可以只看 C 语言部分，适合 0 基础 C 语言速刷完后学习，更偏向就业，目前只需要看 C 语言者部分，后面的课程可以之后再看。史上最强最细腻的 linux 嵌入式 C 语言学习教程【李慧芹老师】_哔哩哔哩_bilibili\n\n\n# C++\n\n 1. 《C++ Primer》（重要且必要）：必看的书，不解释，可以挑着看，可以分阶段看，但不能不看！！！链接给一个学习仓库，帮助你更快消化本书。GitHub - applenob/Cpp_Primer_Practice: 搞定 C++👊。C++ Primer 中文版第 5 版学习仓库，包括笔记和课后练习答案。\n\n 2. 侯捷：C++ 面向对象开发、C++ 新标准 11/14、 STL 标准库与泛型编程 （重要且必要）： 三门课，我只能说不看你是你的损失（课不好找，大家各凭本事吧）\n\n 3. 《Effective c++》（重要且必要）：面试基本都会问，你就说你看不看吧\n    \n    StudyBooks/C++ 进阶 at master · lizhenghn123/StudyBooks\n    \n    《Effective C++》2023（上部完整版） C++ 进阶看这个_哔哩哔哩_bilibili\n\n 4. 于仕琪 快速学习 C 和 C++(高性价比)： 非常好的课，跟着大佬的思路，过一遍基础内容,链接中的四个视频最好都要看！！！于仕琪的个人空间-于仕琪个人主页-哔哩哔哩视频\n\n 5. 《STL 源码剖析》(重要不必要)：可以学到非常多的模板的知识，但是基本没人问过我与之相关的很深入的内容，一般能问到的内容都在 《STL标准库与泛型编程》 这门课中了。\n\n\n# 数据结构与算法\n\n 1. 李慧芹 嵌入式 Linux C 全套（重要且必要）：课程包含了数据结构这一块的内容，不全，但都是精华部分，所以必看史上最强最细腻的 linux 嵌入式 C 语言学习教程【李慧芹老师】_哔哩哔哩_bilibili\n\n 2. 《大话数据结构》（高性价比）: 我没看过，但是听说对于新手比较友好。\n\n 3. 印度老哥的课(不必要)： 在 b 站比较火，但我没看过【强烈推荐】深入浅出数据结构 - 顶尖程序员图文讲解 - UP 主翻译校对 (已完结)_哔哩哔哩_bilibil\n\n 4. 浙大数据结构(重要不必要)： 学院派，喜欢的可以看看，我之前就是看这么入门的，但是感觉可能对新人不算特别友好。浙江大学数据结构 陈越_哔哩哔哩_bilibili\n\n 5. 邓俊辉：数据结构与算法（不必要）：邓公出品，偏算法，打过ACM的小伙伴可能听说过他，难度拉满，感兴趣的可以尝试，享受被大佬智商无情碾压的快感吧~清华大学邓俊辉数据结构与算法【完】_哔哩哔哩_bilibili\n\n数据结构入门以后，主要就是刷题（以及方便理解其他学科的代码），所以另外推荐几个刷题相关的链接：\n\n 1. 代码随想录（重要且必要）：按照上面的教程，跟着刷就完了代码随想录\n\n 2. 剑指 Offer (重要且必要): 必刷\n\n 3. Leetcode Hot100(重要且必要) : 必刷 LeetCode 热题 100 - 学习计划 - 力扣（LeetCode）全球极客挚爱的技术成长平台\n\n 4. codetop(高性价比) : 面向就业刷题，高性价比：CodeTop 面试题目总结\n\n刷题不要贪多，常见题能快速写出来即可，时刻提醒自己，你不是在打比赛，不会的题 10min 内想不出来，立马看题解，抄，然后标记一下，后续二刷。保证刷题的效率。\n\n> 如果你觉得，这个和背代码有什么区别？\n\n> 你别说，你还真别说，就是背。 背到你看见一道题，就知道它考的是什么知识点，然后开始套该知识点的解题模板。差不多就成了。熟能生巧，ACM选手也是要背很多板子的。 面向就业的刷题 更是如此，用最短的时间，刷最多的题，才是王道，你花半小时，一小时想一道题，还做不出来，不如花同样的时间多“抄”几道类似题目的题解。\n\n> 一家之言,如果你有自己的想法，那就是你对。\n\n注意： 不要沉迷刷题！ 适当即可！\n\n\n# 计算机网络\n\n 1. 郑烇 &《计算机网络自顶向下》：课程配套书籍（重要且必要）： 主要是有课堂氛围，体验非常好中科大郑烇、杨坚全套《计算机网络（自顶向下方法 第 7 版，James F.Kurose，Keith W.Ross）》课程_哔哩哔哩_bilibili\n\n 2. 湖科大教书匠（不必要）：如果 1 看不下去，就看这个计算机网络微课堂（有字幕无背景音乐版）_哔哩哔哩_bilibili\n\n\n# 操作系统\n\n 1. 王道 OS（重要且必要） ：经典永不过时，入门绝佳，初学者看这个就够了王道计算机考研 操作系统_哔哩哔哩_bilibili\n\n 2. 书籍：《OSTEP》（重要不必要）：开源神书，感兴趣可以去看看，不过我读了一半就去干其他事情去了。。。\n\nhttps://gitee.com/iTiki/ostep-chinese#https://gitee.com/link?target=https%3A%2F%2Fpages.cs.wisc.edu%2F~remzi%2FOSTEP%2FChinese%2F03.pdf\n\n\n# 数据库\n\n 1. 尚硅谷 MySQL(重要但不必要) : 为什么说不必要呢？因为 C++ 很多方向。。和数据库就不打交道。。。如果是后端选手，那就必学哈。MySQL 数据库入门到大牛，mysql 安装到优化，百科全书级，全网天花板_哔哩哔哩_bilibili\n\n\n# 提高篇\n\n如果前两个篇章都学完，那么恭喜你，算是入门了（但是可能根本找不到工作~）， 接下来的提高篇其实就是对当中的每一块内容的深化，到这里就没有什么必须要看的内容啦，选择感兴趣的进行学习即可。同时我会穿插推荐一些我珍藏已久的宝藏项目，做完一个就能开始愉快的找工作啦（大概 ～）。\n\n在这个篇章，主要就是面向你心仪的就业岗位学习了，针对岗位需求，深入学习这个岗位必须的技术栈，或者学习这个岗位独有的技术。 同时，也要开始着手准备练手项目了（笑死，学了半天发现啥都做不了～）\n\n关于如何选取合适的项目，以及如何跑通开源项目，我会单开一个篇章来讲述，本章节中只会提几个非常经典的入门demo，为后续篇章做个铺垫。\n\n\n# C++\n\n 1. 侯捷：C++ 内存管理机制、C++Startup 揭秘 （高性价比）： 重要，很重要，但不是必刷，因为其他的课程环节已经包含了一部分这块的内容了。(大家凭本事找课)\n\n 2. 语言新特性项目：C++20 简易协程库(高性价比)：利用新特性语法的demo级项目，全程视频教学，对新人友好，且不算太烂大街，可以快速填充你贫瘠的简历 ～【C++20】从 0 开始自制协程库，有手就行（上）_哔哩哔哩_bilibili\n    \n    关于协程，C++20提供的协程是无栈协程，协程的基础知识，你可以关注一下这个up等疾风\n    \n    C++20协程教程\n\n\n# 数据结构\n\n纯刷题，没什么好说的\n\n\n# 计算机网络\n\n 1. CS144 Lab 手搓 TCP 协议(高性价比)：理论知识看初学者篇中的课程就好了，这里不需要重复看课，直接跟着文档或视频上手做，超高性价比课设，让你深入TCP协议的同时，也收获到了一个小项目。网络相关的八股也学到了，项目也有了，齐活。（只需要搓出 TCP 即可，后面的 Lab 性价比不高）。\n    \n    CS144. 计算机网络实验. Lab0. 热身_哔哩哔哩_bilibili\n    \n    【计算机网络】Stanford CS144 学习笔记\n    \n    kangyupl.gitee.io\n\n\n# 操作系统 & 系统编程\n\n 1. 《CSAPP》（高性价比）： 神书，有时间一定要看，一定要看，一定要看，没时间最好也看看别人的读书笔记，面试官很爱问里面的内容，对应有一门课程视频：2015 CMU 15-213 CSAPP 深入理解计算机系统 课程视频_哔哩哔哩_bilibili\n    \n    还有一些辅助视频：[原创] 深入理解计算机系统 - CSAPP 重点导读（更新完毕）_哔哩哔哩_bilibili\n    \n    【CSAPP-深入理解计算机系统】1-1.计算机系统漫游_哔哩哔哩_bilibili\n\n 2. 李慧芹 《APUE》（高性价比）：是的又是她，已经不知道多少次推荐了，从基础到提高都有她的身影。课讲的真得非常好，无脑推荐，看完你会爱上这个女人的 ～ （整个系统编程课程使用的教材也是最经典的《APUE》）。\n    \n    链接视频的后半段：史上最强最细腻的 linux 嵌入式 C 语言学习教程【李慧芹老师】_哔哩哔哩_bilibili\n    \n    系统编程(上面视频后半段单独拿出来)Linux 系统编程（李慧琴）_哔哩哔哩_bilibili\n\n 3. 南大 jyyOS 课（高性价比）：国内最好的 OS 课，如果你能cover的住，在初学篇就可以开始跟着看了，看过的都说好，看不懂就多看几遍。\n    \n    绿导师原谅你了的个人空间-绿导师原谅你了个人主页-哔哩哔哩视频\n\n 4. S6.081（重要不必要） : OS神课，并附带一个课程 Lab ，能当作项目，但是其实对于非 sys 选手来说，也并不是一定要做。。。（主要是做的人太多了，太多人都在简历上写上这门课，导致含金量下降）\n\n6.S081 / Fall 2020\n\n【操作系统工程】精译【MIT 公开课 MIT6.S081】_哔哩哔哩_bilibili\n\n\n# 网络编程\n\n 1. 项目：WebServer （高性价比）：C++后端人手一个的项目，烂大街可不代表其质量不行，烂大街的另一种说法叫“经典咏流传”， 所以你的简历上可以不写这个项目，但你不能研究一遍这玩意。。。\n    \n    huixxi.github.io\n    \n    GitHub - qinguoyi/TinyWebServer: 🔥 Linux 下 C++ 轻量级 WebServer 服务器\n\n 2. 项目：Muduo 网络库(高性价比) ：学习该项目的前置条件是需要过一遍 APUE或者比较了解WebServer，不然你一定会一头雾水，经典中的经典，我想我不用过多介绍，直接贴点以前收藏的链接。\n    \n    muduo - 学习总结 | C++ 全栈知识体系\n    \n    muduo 源码剖析\n    \n    GitHub - chenshuo/muduo: Event-driven network library for multi-threaded Linux server in C++11\n\n\n# 分布式\n\n 1. S6.824(高性价比)：学分布式，就没有不看这门课的。b 站上有相关的课，网上资料也很多，这里我贴一个之前感觉写的比较好的博客，相当于是课程的文字版。\n    \n    简介 | MIT6.824\n    \n    解读共识算法Raft\n    \n    2020 6.824 课程视频合集\n\n如果提高篇中的每个模块的内容你都比较熟悉，并且有着一到两个练手项目，八股背的也还不错，那么恭喜你，市面上大部分Linux C++ 相关的岗位你投递，都有一定面试机会了，运气比较好的话甚至也可以拿到一些还不错的offer。\n\n但是如果想冲击核心部门，或者SSP，本篇章提到的内容可能还不够，没关系，- C++自救指南-资源分享篇中，我会补充这么些年我收集到的优质资源，选择你感兴趣的部分进行研究，祝你冲击SSP。",normalizedContent:"如果你看了c++自救指南-方向梳理篇，就会发现，绝大多数c++相关的岗位，都存在着例如网络编程、并发编程、操作系统等行业通用的技术栈。\n\n本篇章虽然打着所谓 “学习路线”的招牌，但实则是对这些通用知识一些资料的整合。这些资料大多是本🐭三年来踩过无数坑后筛选下来的，前人栽树，后人乘凉，照着下列推荐的课程或书籍学，让你几乎不走一点弯路。\n\n稍微归纳总结一下c++自救指南-方向梳理篇中那些通用技术栈，无非就是下列这些：\n\n 1. 语言：c++语法、stl标准库、c++新特性\n 2. 网络：计算机网络基础、网络编程基础\n 3. 操作系统：进程间通信、内存管理、线程同步、内存管理等\n 4. 系统编程：linux系统api、多线程编程\n 5. 数据结构与算法：leetcode，刷就完了\n\n如果上述提到的技术都比较熟悉，那么大部分岗位的基本要求就差不多达到了，剩下的就是加强每个模块的深度，以及学一些特定岗位所需要的知识。\n\n\n# 前言-推荐级别的解释：\n\n 1. 重要且必要：表明该阶段中，除非找到更好的替代，否则几乎没有理由不学的课程或书籍。\n 2. 高性价比：重要程度没有上面一个等级高，但是学起来不亏的课程或书籍。\n 3. 重要但不必要：对于某个方向，或者某类岗位来说很重要，但可能对其他方向重要性稍弱的课程或书籍\n 4. 不必要：有看的价值，但不看也可以\n\n> tips ：观前提醒，下面我说什么不重要，我贴出来的每个链接背后的内容才重要。 这些几乎都是经过我多年累积，优中选优的资料，把饭端你嘴边，学不学，学多少，就看你自己了。\n\n\n# 零基础篇\n\n面向转码选手，或者是0基础，入门困难的小白，主要是一些非常基础的课程，这个阶段不建议看书学习（大概率看不明白）\n\n这个阶段的要求不高，只需要了解一些基础语法，以及开发环境（linux）的基本使用即可。\n\n因为科班的原因，所以我的启蒙主要是靠老师，一些资料收集并不详细，但是我还是列几个不错的供大家参考，这个阶段挑一个你看的下去的看，就可以了，不用纠结谁好谁坏。零基础阶段的目的就是快速入门，所以没必要耽误太长时间，哪个课程时间短看哪个！！！\n\n\n# c 语言\n\n对于 0 基础同学来说，学 c 是非常有必要的一件事，特别是对于 c++ 选手，更是如此。因为不管你是c选手还是c++选手，日后的工作中难免需要使用系统api进行编程，再不济，研究linux的过程中，也是需要阅读大量c代码的，而且本就是一脉相承的语言，学好c对c++入门也会有较大的帮助。\n\n 1. 翁恺 c 语言（重要且必要）: 大多数 cs 人的启蒙老师，课程时间也短，就十几个小时，最推荐！！ 浙江大学翁恺教你 c 语言程序设计！c 语言基础入门！_哔哩哔哩_bilibili\n\n\n# c++\n\n 1. 黑马 c++ 全套 2019（不必要）：我本人没看过，但是听说质量尚可，零基础阶段仅需快速了解 c++ 这一语言即可，不需要扣细节，有个大概印象就可以过了。\n    \n    黑马程序员匠心之作 |c++ 教程从 0 到 1 入门编程,学习编程不再难_哔哩哔哩_bilibili\n\n 2. 其他任何你能看得下去的课程，这个阶段确实没啥好推荐的。。。\n\n\n# linux\n\n 1. 尚硅谷 linux0 基础（重要但不必要）： 如果你对 linux 一窍不通，那推荐看一下，拿来入门应该问题不大，了解基本的概念和操作即可。这门课不要全部看，看到你不想看为止。尚硅谷 2024 最新 linux 零基础教程（linux 快速入门，上手开发）_哔哩哔哩_bilibili\n\n\n# 初学者篇\n\n稍微有点基础知识的同学，应该直接从这里开始。本篇章中，我会推荐一些必刷的课程或书籍，这些课程，如果在学习的过程中感觉吃力，可以跳过，但是今后回头一定还要再看。\n\n虽然说是初学者篇，但其实我链接贴出来当中的内容，可一点也不基础。同时，这个篇章可能也是你在求职阶段耗费精力最多的篇章，万事开头难嘛，不必害怕，跟着本🐭严选的资料看下去，终有一日能“神功大成”。\n\n\n# c 语言\n\n> 为什么还要再学 c 语言? 其实我只是单纯想推荐下面这套课，有条件的话全程跟一遍，收获肯定比半路跟的要多。全程裸vim手敲，深入浅出，看过的都说好。\n\n 1. 李慧芹 嵌入式 linux c 全套（重要且必要）：冷门神课，基础阶段可以只看 c 语言部分，适合 0 基础 c 语言速刷完后学习，更偏向就业，目前只需要看 c 语言者部分，后面的课程可以之后再看。史上最强最细腻的 linux 嵌入式 c 语言学习教程【李慧芹老师】_哔哩哔哩_bilibili\n\n\n# c++\n\n 1. 《c++ primer》（重要且必要）：必看的书，不解释，可以挑着看，可以分阶段看，但不能不看！！！链接给一个学习仓库，帮助你更快消化本书。github - applenob/cpp_primer_practice: 搞定 c++👊。c++ primer 中文版第 5 版学习仓库，包括笔记和课后练习答案。\n\n 2. 侯捷：c++ 面向对象开发、c++ 新标准 11/14、 stl 标准库与泛型编程 （重要且必要）： 三门课，我只能说不看你是你的损失（课不好找，大家各凭本事吧）\n\n 3. 《effective c++》（重要且必要）：面试基本都会问，你就说你看不看吧\n    \n    studybooks/c++ 进阶 at master · lizhenghn123/studybooks\n    \n    《effective c++》2023（上部完整版） c++ 进阶看这个_哔哩哔哩_bilibili\n\n 4. 于仕琪 快速学习 c 和 c++(高性价比)： 非常好的课，跟着大佬的思路，过一遍基础内容,链接中的四个视频最好都要看！！！于仕琪的个人空间-于仕琪个人主页-哔哩哔哩视频\n\n 5. 《stl 源码剖析》(重要不必要)：可以学到非常多的模板的知识，但是基本没人问过我与之相关的很深入的内容，一般能问到的内容都在 《stl标准库与泛型编程》 这门课中了。\n\n\n# 数据结构与算法\n\n 1. 李慧芹 嵌入式 linux c 全套（重要且必要）：课程包含了数据结构这一块的内容，不全，但都是精华部分，所以必看史上最强最细腻的 linux 嵌入式 c 语言学习教程【李慧芹老师】_哔哩哔哩_bilibili\n\n 2. 《大话数据结构》（高性价比）: 我没看过，但是听说对于新手比较友好。\n\n 3. 印度老哥的课(不必要)： 在 b 站比较火，但我没看过【强烈推荐】深入浅出数据结构 - 顶尖程序员图文讲解 - up 主翻译校对 (已完结)_哔哩哔哩_bilibil\n\n 4. 浙大数据结构(重要不必要)： 学院派，喜欢的可以看看，我之前就是看这么入门的，但是感觉可能对新人不算特别友好。浙江大学数据结构 陈越_哔哩哔哩_bilibili\n\n 5. 邓俊辉：数据结构与算法（不必要）：邓公出品，偏算法，打过acm的小伙伴可能听说过他，难度拉满，感兴趣的可以尝试，享受被大佬智商无情碾压的快感吧~清华大学邓俊辉数据结构与算法【完】_哔哩哔哩_bilibili\n\n数据结构入门以后，主要就是刷题（以及方便理解其他学科的代码），所以另外推荐几个刷题相关的链接：\n\n 1. 代码随想录（重要且必要）：按照上面的教程，跟着刷就完了代码随想录\n\n 2. 剑指 offer (重要且必要): 必刷\n\n 3. leetcode hot100(重要且必要) : 必刷 leetcode 热题 100 - 学习计划 - 力扣（leetcode）全球极客挚爱的技术成长平台\n\n 4. codetop(高性价比) : 面向就业刷题，高性价比：codetop 面试题目总结\n\n刷题不要贪多，常见题能快速写出来即可，时刻提醒自己，你不是在打比赛，不会的题 10min 内想不出来，立马看题解，抄，然后标记一下，后续二刷。保证刷题的效率。\n\n> 如果你觉得，这个和背代码有什么区别？\n\n> 你别说，你还真别说，就是背。 背到你看见一道题，就知道它考的是什么知识点，然后开始套该知识点的解题模板。差不多就成了。熟能生巧，acm选手也是要背很多板子的。 面向就业的刷题 更是如此，用最短的时间，刷最多的题，才是王道，你花半小时，一小时想一道题，还做不出来，不如花同样的时间多“抄”几道类似题目的题解。\n\n> 一家之言,如果你有自己的想法，那就是你对。\n\n注意： 不要沉迷刷题！ 适当即可！\n\n\n# 计算机网络\n\n 1. 郑烇 &《计算机网络自顶向下》：课程配套书籍（重要且必要）： 主要是有课堂氛围，体验非常好中科大郑烇、杨坚全套《计算机网络（自顶向下方法 第 7 版，james f.kurose，keith w.ross）》课程_哔哩哔哩_bilibili\n\n 2. 湖科大教书匠（不必要）：如果 1 看不下去，就看这个计算机网络微课堂（有字幕无背景音乐版）_哔哩哔哩_bilibili\n\n\n# 操作系统\n\n 1. 王道 os（重要且必要） ：经典永不过时，入门绝佳，初学者看这个就够了王道计算机考研 操作系统_哔哩哔哩_bilibili\n\n 2. 书籍：《ostep》（重要不必要）：开源神书，感兴趣可以去看看，不过我读了一半就去干其他事情去了。。。\n\nhttps://gitee.com/itiki/ostep-chinese#https://gitee.com/link?target=https%3a%2f%2fpages.cs.wisc.edu%2f~remzi%2fostep%2fchinese%2f03.pdf\n\n\n# 数据库\n\n 1. 尚硅谷 mysql(重要但不必要) : 为什么说不必要呢？因为 c++ 很多方向。。和数据库就不打交道。。。如果是后端选手，那就必学哈。mysql 数据库入门到大牛，mysql 安装到优化，百科全书级，全网天花板_哔哩哔哩_bilibili\n\n\n# 提高篇\n\n如果前两个篇章都学完，那么恭喜你，算是入门了（但是可能根本找不到工作~）， 接下来的提高篇其实就是对当中的每一块内容的深化，到这里就没有什么必须要看的内容啦，选择感兴趣的进行学习即可。同时我会穿插推荐一些我珍藏已久的宝藏项目，做完一个就能开始愉快的找工作啦（大概 ～）。\n\n在这个篇章，主要就是面向你心仪的就业岗位学习了，针对岗位需求，深入学习这个岗位必须的技术栈，或者学习这个岗位独有的技术。 同时，也要开始着手准备练手项目了（笑死，学了半天发现啥都做不了～）\n\n关于如何选取合适的项目，以及如何跑通开源项目，我会单开一个篇章来讲述，本章节中只会提几个非常经典的入门demo，为后续篇章做个铺垫。\n\n\n# c++\n\n 1. 侯捷：c++ 内存管理机制、c++startup 揭秘 （高性价比）： 重要，很重要，但不是必刷，因为其他的课程环节已经包含了一部分这块的内容了。(大家凭本事找课)\n\n 2. 语言新特性项目：c++20 简易协程库(高性价比)：利用新特性语法的demo级项目，全程视频教学，对新人友好，且不算太烂大街，可以快速填充你贫瘠的简历 ～【c++20】从 0 开始自制协程库，有手就行（上）_哔哩哔哩_bilibili\n    \n    关于协程，c++20提供的协程是无栈协程，协程的基础知识，你可以关注一下这个up等疾风\n    \n    c++20协程教程\n\n\n# 数据结构\n\n纯刷题，没什么好说的\n\n\n# 计算机网络\n\n 1. cs144 lab 手搓 tcp 协议(高性价比)：理论知识看初学者篇中的课程就好了，这里不需要重复看课，直接跟着文档或视频上手做，超高性价比课设，让你深入tcp协议的同时，也收获到了一个小项目。网络相关的八股也学到了，项目也有了，齐活。（只需要搓出 tcp 即可，后面的 lab 性价比不高）。\n    \n    cs144. 计算机网络实验. lab0. 热身_哔哩哔哩_bilibili\n    \n    【计算机网络】stanford cs144 学习笔记\n    \n    kangyupl.gitee.io\n\n\n# 操作系统 & 系统编程\n\n 1. 《csapp》（高性价比）： 神书，有时间一定要看，一定要看，一定要看，没时间最好也看看别人的读书笔记，面试官很爱问里面的内容，对应有一门课程视频：2015 cmu 15-213 csapp 深入理解计算机系统 课程视频_哔哩哔哩_bilibili\n    \n    还有一些辅助视频：[原创] 深入理解计算机系统 - csapp 重点导读（更新完毕）_哔哩哔哩_bilibili\n    \n    【csapp-深入理解计算机系统】1-1.计算机系统漫游_哔哩哔哩_bilibili\n\n 2. 李慧芹 《apue》（高性价比）：是的又是她，已经不知道多少次推荐了，从基础到提高都有她的身影。课讲的真得非常好，无脑推荐，看完你会爱上这个女人的 ～ （整个系统编程课程使用的教材也是最经典的《apue》）。\n    \n    链接视频的后半段：史上最强最细腻的 linux 嵌入式 c 语言学习教程【李慧芹老师】_哔哩哔哩_bilibili\n    \n    系统编程(上面视频后半段单独拿出来)linux 系统编程（李慧琴）_哔哩哔哩_bilibili\n\n 3. 南大 jyyos 课（高性价比）：国内最好的 os 课，如果你能cover的住，在初学篇就可以开始跟着看了，看过的都说好，看不懂就多看几遍。\n    \n    绿导师原谅你了的个人空间-绿导师原谅你了个人主页-哔哩哔哩视频\n\n 4. s6.081（重要不必要） : os神课，并附带一个课程 lab ，能当作项目，但是其实对于非 sys 选手来说，也并不是一定要做。。。（主要是做的人太多了，太多人都在简历上写上这门课，导致含金量下降）\n\n6.s081 / fall 2020\n\n【操作系统工程】精译【mit 公开课 mit6.s081】_哔哩哔哩_bilibili\n\n\n# 网络编程\n\n 1. 项目：webserver （高性价比）：c++后端人手一个的项目，烂大街可不代表其质量不行，烂大街的另一种说法叫“经典咏流传”， 所以你的简历上可以不写这个项目，但你不能研究一遍这玩意。。。\n    \n    huixxi.github.io\n    \n    github - qinguoyi/tinywebserver: 🔥 linux 下 c++ 轻量级 webserver 服务器\n\n 2. 项目：muduo 网络库(高性价比) ：学习该项目的前置条件是需要过一遍 apue或者比较了解webserver，不然你一定会一头雾水，经典中的经典，我想我不用过多介绍，直接贴点以前收藏的链接。\n    \n    muduo - 学习总结 | c++ 全栈知识体系\n    \n    muduo 源码剖析\n    \n    github - chenshuo/muduo: event-driven network library for multi-threaded linux server in c++11\n\n\n# 分布式\n\n 1. s6.824(高性价比)：学分布式，就没有不看这门课的。b 站上有相关的课，网上资料也很多，这里我贴一个之前感觉写的比较好的博客，相当于是课程的文字版。\n    \n    简介 | mit6.824\n    \n    解读共识算法raft\n    \n    2020 6.824 课程视频合集\n\n如果提高篇中的每个模块的内容你都比较熟悉，并且有着一到两个练手项目，八股背的也还不错，那么恭喜你，市面上大部分linux c++ 相关的岗位你投递，都有一定面试机会了，运气比较好的话甚至也可以拿到一些还不错的offer。\n\n但是如果想冲击核心部门，或者ssp，本篇章提到的内容可能还不够，没关系，- c++自救指南-资源分享篇中，我会补充这么些年我收集到的优质资源，选择你感兴趣的部分进行研究，祝你冲击ssp。",charsets:{cjk:!0},lastUpdated:"2024/04/28, 17:23:46",lastUpdatedTimestamp:1714325026e3},{title:"C++自救指南-资源分享篇",frontmatter:{title:"C++自救指南-资源分享篇",date:"2024-04-27T06:06:42.000Z",author:"京都小低调",permalink:"/pages/926294/"},regularPath:"/02.%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/01.cpp%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97/05.C++%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97-%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB%E7%AF%87.html",relativePath:"02.好文分享/01.cpp自救指南/05.C++自救指南-资源分享篇.md",key:"v-78150311",path:"/pages/926294/",headers:[{level:2,title:"八股网站推荐",slug:"八股网站推荐",normalizedTitle:"八股网站推荐",charIndex:26},{level:2,title:"优质书籍推荐",slug:"优质书籍推荐",normalizedTitle:"优质书籍推荐",charIndex:197},{level:2,title:"优质博客推荐",slug:"优质博客推荐",normalizedTitle:"优质博客推荐",charIndex:272},{level:2,title:"优质UP推荐",slug:"优质up推荐",normalizedTitle:"优质up推荐",charIndex:527},{level:2,title:"Github 宝藏级仓库推荐",slug:"github-宝藏级仓库推荐",normalizedTitle:"github 宝藏级仓库推荐",charIndex:748},{level:2,title:"大厂开源",slug:"大厂开源",normalizedTitle:"大厂开源",charIndex:1884}],headersStr:"八股网站推荐 优质书籍推荐 优质博客推荐 优质UP推荐 Github 宝藏级仓库推荐 大厂开源",content:"分享本🐭三年间的一些淘到的宝藏，陆续补充\n\n\n# 八股网站推荐\n\n 1. 编程指北：csguide.cn\n\n 2. 小林 coding,必看的八股：https://xiaolincoding.com/\n\n 3. 阿秀的学习笔记：https://interviewguide.cn/\n\n 4. interviewguide：https://top.interviewguide.cn/\n\n\n# 优质书籍推荐\n\n 1. OSTEP\n\n 2. 高并发的哲学原理\n\n 3. C++并发编程实战\n\n 4. C++20 STL Cookbook\n\n\n# 优质博客推荐\n\n 1. 高性能服务器开发 技术专栏：balloonwj.github.io\n\n 2. b站大佬，讲的都是干货：恋恋风辰官方博客\n\n 3. cs自学网，强烈推荐：https://csdiy.wiki/\n\n 4. 看起来像是钓鱼网站的博客网站：https://www.oschina.net\n\n 5. 看起来更像是钓鱼网站的博客网站：http://www.52im.net\n\n 6. coolshell\n\n 7. mysql实战45讲\n\n 8. 美团技术团队\n\n 9. C++全栈知识体系\n\n\n# 优质UP推荐\n\n戌米的论文笔记\n\n我不是匠人\n\n双笙子佯谬\n\nChunel\n\nmq白cpp\n\n百度技术沙龙\n\n木鸟杂记\n\n爱学习的阿噜\n\n美团技术团队\n\n现代CPP随笔_0CCh\n\n天天写乱码\n\n恋恋风辰zack\n\niker不会写代码\n\n宅学部落\n\n等疾风\n\n飘零的落花\n\nzhengwei_xmucs\n\n硬核课堂\n\nyaaangmin\n\n阿西拜编程\n\n郭郭wg\n\n老罗学CPP\n\nMoody-老师\n\n阿苏EEer\n\n简说linux\n\n\n# Github 宝藏级仓库推荐\n\n懂得都懂：GitHub - coder2gwy/coder2gwy: 互联网首份程序员考公指南，由 3 位已经进入体制内的前大厂程序员联合献上。\n\nGitHub - GrindGold/pdf: 📚 计算机经典编程书籍、大黑书、编程电子书、电子书、编程书籍，包括计算机基础、C/C++、Java、Python、面试题、架构设计、算法系列等经典电子书\n\nGitHub - GrowingGit/GitHub-Chinese-Top-Charts: 🇨🇳 GitHub 中文排行榜，各语言分设「软件 | 资料」榜单，精准定位中文好项目。各取所需，高效学习\n\nGitHub - huihut/interview: 📚 C/C++ 技术面试基础知识总结，包括语言、程序库、数据结构、算法、系统、网络、链接装载库等知识及面试经验、招聘、内推等信息。This rep\n\nGitHub - 0voice/cpp_new_features: 2021 年最新整理， C++ 学习资料，含 C++ 11 / 14 / 17 / 20 / 23 新特性、入门教程、推荐书籍、优质文章\n\nGitHub - wolverinn/Waking-Up: 计算机基础（计算机网络/操作系统/数据库/Git...）面试问题全面总结，包含详细的 follow-up question 以及答案；全部采用【\n\nGitHub - changkun/modern-cpp-tutorial: 📚 Modern C++ Tutorial: C++11/14/17/20 On the Fly | https://ch\n\nGitHub - 0voice/introduce_c-cpp_manual: 一个收集 C/C++ 新手学习的入门项目，整理收纳开发者开源的小项目、工具、框架、游戏等，视频，书籍，面试题/算法题，技术文\n\nGitHub - rongweihe/CPPNotes: 【C++ 面试 + C++ 学习指南】 一份涵盖大部分 C++ 程序员所需要掌握的核心知识。\n\nGitHub - soulteary/forever-coolshell: 酷壳 - CoolShell 电子存档，🕯️ 谨纪念和保存陈皓先生的公开的技术分享内容，感恩皓叔对中文互联网，尤其是技术领域\n\nGitHub - 7-sevens/Developer-Books: 编程开发相关书单列表整理\n\nGitHub - ruanyf/weekly: 科技爱好者周刊，每周五发布\n\nC++ 开源项目排行榜, GitHub 上最受欢迎的 C++ 项目推荐 | GitHub 中文社区\n\n\n# 大厂开源\n\n 1. 百度开源\n\n 2. 字节跳动开源\n\n 3. 阿里开源\n\n 4. 腾讯开源\n\n 5. 华为开源",normalizedContent:"分享本🐭三年间的一些淘到的宝藏，陆续补充\n\n\n# 八股网站推荐\n\n 1. 编程指北：csguide.cn\n\n 2. 小林 coding,必看的八股：https://xiaolincoding.com/\n\n 3. 阿秀的学习笔记：https://interviewguide.cn/\n\n 4. interviewguide：https://top.interviewguide.cn/\n\n\n# 优质书籍推荐\n\n 1. ostep\n\n 2. 高并发的哲学原理\n\n 3. c++并发编程实战\n\n 4. c++20 stl cookbook\n\n\n# 优质博客推荐\n\n 1. 高性能服务器开发 技术专栏：balloonwj.github.io\n\n 2. b站大佬，讲的都是干货：恋恋风辰官方博客\n\n 3. cs自学网，强烈推荐：https://csdiy.wiki/\n\n 4. 看起来像是钓鱼网站的博客网站：https://www.oschina.net\n\n 5. 看起来更像是钓鱼网站的博客网站：http://www.52im.net\n\n 6. coolshell\n\n 7. mysql实战45讲\n\n 8. 美团技术团队\n\n 9. c++全栈知识体系\n\n\n# 优质up推荐\n\n戌米的论文笔记\n\n我不是匠人\n\n双笙子佯谬\n\nchunel\n\nmq白cpp\n\n百度技术沙龙\n\n木鸟杂记\n\n爱学习的阿噜\n\n美团技术团队\n\n现代cpp随笔_0cch\n\n天天写乱码\n\n恋恋风辰zack\n\niker不会写代码\n\n宅学部落\n\n等疾风\n\n飘零的落花\n\nzhengwei_xmucs\n\n硬核课堂\n\nyaaangmin\n\n阿西拜编程\n\n郭郭wg\n\n老罗学cpp\n\nmoody-老师\n\n阿苏eeer\n\n简说linux\n\n\n# github 宝藏级仓库推荐\n\n懂得都懂：github - coder2gwy/coder2gwy: 互联网首份程序员考公指南，由 3 位已经进入体制内的前大厂程序员联合献上。\n\ngithub - grindgold/pdf: 📚 计算机经典编程书籍、大黑书、编程电子书、电子书、编程书籍，包括计算机基础、c/c++、java、python、面试题、架构设计、算法系列等经典电子书\n\ngithub - growinggit/github-chinese-top-charts: 🇨🇳 github 中文排行榜，各语言分设「软件 | 资料」榜单，精准定位中文好项目。各取所需，高效学习\n\ngithub - huihut/interview: 📚 c/c++ 技术面试基础知识总结，包括语言、程序库、数据结构、算法、系统、网络、链接装载库等知识及面试经验、招聘、内推等信息。this rep\n\ngithub - 0voice/cpp_new_features: 2021 年最新整理， c++ 学习资料，含 c++ 11 / 14 / 17 / 20 / 23 新特性、入门教程、推荐书籍、优质文章\n\ngithub - wolverinn/waking-up: 计算机基础（计算机网络/操作系统/数据库/git...）面试问题全面总结，包含详细的 follow-up question 以及答案；全部采用【\n\ngithub - changkun/modern-cpp-tutorial: 📚 modern c++ tutorial: c++11/14/17/20 on the fly | https://ch\n\ngithub - 0voice/introduce_c-cpp_manual: 一个收集 c/c++ 新手学习的入门项目，整理收纳开发者开源的小项目、工具、框架、游戏等，视频，书籍，面试题/算法题，技术文\n\ngithub - rongweihe/cppnotes: 【c++ 面试 + c++ 学习指南】 一份涵盖大部分 c++ 程序员所需要掌握的核心知识。\n\ngithub - soulteary/forever-coolshell: 酷壳 - coolshell 电子存档，🕯️ 谨纪念和保存陈皓先生的公开的技术分享内容，感恩皓叔对中文互联网，尤其是技术领域\n\ngithub - 7-sevens/developer-books: 编程开发相关书单列表整理\n\ngithub - ruanyf/weekly: 科技爱好者周刊，每周五发布\n\nc++ 开源项目排行榜, github 上最受欢迎的 c++ 项目推荐 | github 中文社区\n\n\n# 大厂开源\n\n 1. 百度开源\n\n 2. 字节跳动开源\n\n 3. 阿里开源\n\n 4. 腾讯开源\n\n 5. 华为开源",charsets:{cjk:!0},lastUpdated:"2024/04/28, 17:23:46",lastUpdatedTimestamp:1714325026e3},{title:"C++自救指南-方向梳理篇",frontmatter:{title:"C++自救指南-方向梳理篇",date:"2024-04-27T06:05:41.000Z",author:"京都小低调",permalink:"/pages/b217bd/"},regularPath:"/02.%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/01.cpp%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97/04.C++%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97-%E6%96%B9%E5%90%91%E6%A2%B3%E7%90%86%E7%AF%87.html",relativePath:"02.好文分享/01.cpp自救指南/04.C++自救指南-方向梳理篇.md",key:"v-6b050715",path:"/pages/b217bd/",headers:[{level:2,title:"嵌入式",slug:"嵌入式",normalizedTitle:"嵌入式",charIndex:195},{level:3,title:"大疆嵌入式",slug:"大疆嵌入式",normalizedTitle:"大疆嵌入式",charIndex:386},{level:4,title:"嵌入式底层软件开发",slug:"嵌入式底层软件开发",normalizedTitle:"嵌入式底层软件开发",charIndex:419},{level:4,title:"嵌入式中间件开发",slug:"嵌入式中间件开发",normalizedTitle:"嵌入式中间件开发",charIndex:610},{level:4,title:"相机嵌入式",slug:"相机嵌入式",normalizedTitle:"相机嵌入式",charIndex:870},{level:4,title:"智能驾驶-高性能计算",slug:"智能驾驶-高性能计算",normalizedTitle:"智能驾驶-高性能计算",charIndex:922},{level:3,title:"小米嵌入式",slug:"小米嵌入式",normalizedTitle:"小米嵌入式",charIndex:1148},{level:4,title:"嵌入式软件工程师",slug:"嵌入式软件工程师",normalizedTitle:"嵌入式软件工程师",charIndex:1196},{level:4,title:"机器人-嵌入式软件工程师",slug:"机器人-嵌入式软件工程师",normalizedTitle:"机器人-嵌入式软件工程师",charIndex:1287},{level:4,title:"汽车 OS 研发",slug:"汽车-os-研发",normalizedTitle:"汽车 os 研发",charIndex:1377},{level:4,title:"软件开发工程师-BSP 方向",slug:"软件开发工程师-bsp-方向",normalizedTitle:"软件开发工程师-bsp 方向",charIndex:1444},{level:2,title:"后端",slug:"后端",normalizedTitle:"后端",charIndex:1527},{level:3,title:"字节",slug:"字节",normalizedTitle:"字节",charIndex:1712},{level:4,title:"后端-抖音电商",slug:"后端-抖音电商",normalizedTitle:"后端-抖音电商",charIndex:1761},{level:3,title:"腾讯",slug:"腾讯",normalizedTitle:"腾讯",charIndex:1828},{level:4,title:"后台开发",slug:"后台开发",normalizedTitle:"后台开发",charIndex:1906},{level:3,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:2338},{level:2,title:"量化/高频",slug:"量化-高频",normalizedTitle:"量化/高频",charIndex:2536},{level:2,title:"基础架构 Infra",slug:"基础架构-infra",normalizedTitle:"基础架构 infra",charIndex:2558},{level:3,title:"存储",slug:"存储",normalizedTitle:"存储",charIndex:2665},{level:4,title:"智臾科技 ： C++ 后端开发工程师",slug:"智臾科技-c-后端开发工程师",normalizedTitle:"智臾科技 ： c++ 后端开发工程师",charIndex:3015},{level:4,title:"快手：数据库研发工程师",slug:"快手-数据库研发工程师",normalizedTitle:"快手：数据库研发工程师",charIndex:3220},{level:4,title:"蚂蚁：应用研发工程师-C/C++",slug:"蚂蚁-应用研发工程师-c-c",normalizedTitle:"蚂蚁：应用研发工程师-c/c++",charIndex:3263},{level:4,title:"小米：分布式存储研发工程师",slug:"小米-分布式存储研发工程师",normalizedTitle:"小米：分布式存储研发工程师",charIndex:3363},{level:4,title:"总结",slug:"总结-2",normalizedTitle:"总结",charIndex:2338},{level:3,title:"计算",slug:"计算",normalizedTitle:"计算",charIndex:930},{level:4,title:"小红书：搜推工程",slug:"小红书-搜推工程",normalizedTitle:"小红书：搜推工程",charIndex:3810},{level:4,title:"百度：AI 异构计算工程师",slug:"百度-ai-异构计算工程师",normalizedTitle:"百度：ai 异构计算工程师",charIndex:4064},{level:4,title:"字节：机器学习编译优化工程师 & 硬件加速器工具链软件",slug:"字节-机器学习编译优化工程师-硬件加速器工具链软件",normalizedTitle:"字节：机器学习编译优化工程师 &amp; 硬件加速器工具链软件",charIndex:null},{level:4,title:"百度：分布式计算研发工程师",slug:"百度-分布式计算研发工程师",normalizedTitle:"百度：分布式计算研发工程师",charIndex:4266},{level:4,title:"百度：向量检索",slug:"百度-向量检索",normalizedTitle:"百度：向量检索",charIndex:4385},{level:4,title:"字节：搜索架构",slug:"字节-搜索架构",normalizedTitle:"字节：搜索架构",charIndex:4429},{level:4,title:"总结",slug:"总结-3",normalizedTitle:"总结",charIndex:2338},{level:2,title:"音视频",slug:"音视频",normalizedTitle:"音视频",charIndex:4703},{level:2,title:"客户端",slug:"客户端",normalizedTitle:"客户端",charIndex:72}],headersStr:"嵌入式 大疆嵌入式 嵌入式底层软件开发 嵌入式中间件开发 相机嵌入式 智能驾驶-高性能计算 小米嵌入式 嵌入式软件工程师 机器人-嵌入式软件工程师 汽车 OS 研发 软件开发工程师-BSP 方向 后端 字节 后端-抖音电商 腾讯 后台开发 总结 量化/高频 基础架构 Infra 存储 智臾科技 ： C++ 后端开发工程师 快手：数据库研发工程师 蚂蚁：应用研发工程师-C/C++ 小米：分布式存储研发工程师 总结 计算 小红书：搜推工程 百度：AI 异构计算工程师 字节：机器学习编译优化工程师 & 硬件加速器工具链软件 百度：分布式计算研发工程师 百度：向量检索 字节：搜索架构 总结 音视频 客户端",content:"在本篇章中，我会根据我浅薄的行业理解，并结合各家招聘网站上的 JD(Job description)来谈一谈，C++ 到底能干啥，当然，类似游戏客户端等Windows平台为主的C++岗位除外， 这里主要谈的是Linux端的C++岗位，或者跨平台的C++岗位。\n\n> Tips：活学活用，将你梦中情岗的任职要求扔给大语言模型，并让他给你制定一个详细的学习计划，看看对你有什么启发 ～\n\n\n# 嵌入式\n\n我对嵌入式没啥了解，而且随着时代的发展，这个方向也在不断变化着，以往的嵌入式 99.9% 都是 C，现在因为硬件的不断升级，嵌入式中的一些工作可能会使用到 C++，我们以嵌入式殿堂级公司大疆为例，看一看他们的嵌入式岗位需要用到什么技术栈，跟着 JD 学就完了。\n\n下面只列出部分公司的部分岗位，详细信息去各家官网的招聘网站，都是有的~ 有些信息还是需要靠自己收集\n\n\n# 大疆嵌入式\n\n职位投递 - 校园招聘 - DJI 大疆招聘\n\n# 嵌入式底层软件开发\n\n\n\n卓驭科技就是大疆分离出来的做驾驶的公司，底软也就是这类公司最常见的开发岗位。\n\n看任职要求中，除了掌握基本的语言以外，这个岗位还尤其看重面试者对于 Linux 底层机制的认识，比如进程调度管理啊，内存管理啊，文件系统等等，所以对于嵌入式选手来说，熟悉 Linux 就是基本功，如果想要跟应聘该类岗位，你的主要精力就需要放在研究 Linux 内核上。\n\n# 嵌入式中间件开发\n\n\n\n不知道自动驾驶中的中间件的可以去读一下这篇科普文章：一文读懂自动驾驶的“中间件”\n\n可以看到和嵌入式底软的任职要求有一点不同的是，大疆嵌入式中间件开发的语言要求明确了该岗位使用的是 C++，从我不多的投递经验来看，通常来说，写熟悉 C/C++ 的大概率是写 C，只有明确写 C++ 的岗位，进去才可能真写 C++。\n\n像这种任职要求，通常的 Linux C++ 选手都可以尝试投递，算是比较 match，基本就是一套东西的，唯一可能需要单独准备的就是一些行业的编码规范(任职要求的第二条)\n\n# 相机嵌入式\n\n\n\n除了大疆，一些手机厂会有类似相关的岗位，说实话我不太懂这个。。大伙自己琢磨吧。\n\n# 智能驾驶-高性能计算\n\n\n\n这就是典型的新时代下诞生的嵌入式岗位，看任职要求的介绍，这个团队应该是 C C++ 都用，同时还需要有比较深入的 AI 相关的知识，那么会使用 CUDA 就是几乎必要的条件了（注意：优先条件往往就是必要条件。。。除非实在招不到人）想要应聘相关岗位的同学，可以尝试在一些嵌入式平台上部署一些模型，来练练手。这种嵌入式岗位，个人感觉和老牌嵌入式的用人需求是不太一样的，不需要太底层的知识，做的大部分都是软件层面的事了。\n\n\n# 小米嵌入式\n\n校园招聘\n\n再来介绍一个手机厂代表吧(而且小米汽车岗位也不少，利好嵌入式)\n\n# 嵌入式软件工程师\n\n\n\nemmm，完全看不懂，岗位描述的五个方向，像是五个不同的部门。。。不过核心还是研究 Linux Kernel 啦，然后有一些 RTOS 经验就更好了。\n\n# 机器人-嵌入式软件工程师\n\n\n\n像是更偏硬件了。。。完全不懂哎。。。不过和其他岗位一样，不管什么嵌入式，都要研究 Linux Kernel，所以究竟要学什么，就很明了了吧~\n\n# 汽车 OS 研发\n\n\n\n感觉和大疆的中间件岗位类似，只有这类岗位，才会使用 C++ 进行开发，其他的岗位，基本都是 C 为主。\n\n# 软件开发工程师-BSP 方向\n\n\n\n又是完全不懂的领域。。。不过看岗位要求，还是和基本的嵌入式岗位类似； 总之，学好 Linux Kernel，肯定有饭吃~\n\n\n# 后端\n\n好了，来到了 C++ 寄中之寄的岗位，后端(这里专指 Web Server)。 首先，C++ 就不适合去做后端 CRUD 的任务，不到万不得已的情况下，谁会给自己找麻烦？但是因为历史原因，或者其他什么的，一些企业会使用 C++ 来开发后端，现在也很少见了。\n\n由于实在找不到纯 C++ 后端的 JD，所以我就整理一些后端 JD 来 ~~凑个数 ~~介绍\n\n\n# 字节\n\n字节跳动校园招聘\n\n字节的岗位是先划分部门，再划分岗位，个人觉得这种排列方式更好。\n\n# 后端-抖音电商\n\n\n\n字节的 JD 还是偏向基础的，没看出什么特殊要求来，不过在 JD 中寻找亮点~\n\n后端该学谁一目了然。\n\n\n# 腾讯\n\n腾讯招聘的分层逻辑就是先选岗位类别，再选部门，这也是大多数公司招聘岗位的逻辑。\n\nhttps://join.qq.com/post.html\n\n# 后台开发\n\n\n\n可以发现，后端的岗位对于语言没有那么多限制，而是更多考察网络、系统、数据库等相关的基础知识（TX 尤其爱问网络）所以，实际上你学什么语言都可以去投后端岗，而这么多语言中，C++ 的学习成本明显更高，就算拿到 offer，进去以后可能也是转 Go 或者转 Java，所以，何必呢。\n\n我稍微说一下后端同学可能需要学的知识，其实 TX 的 JD 写的已经蛮清楚了，除了常见的网络，操作系统之类的基础知识， 数据库也是必须要学的（C++ 其他方向还真不用学）。\n\n常用的关系型数据库（MySQL）， 非关系型（Redis） 都是工作中必须掌握的技能，如果你是想走后端，请自行搜索资料去学习。\n\n另外，在这个内卷的时代，学会上面的这些往往也是不够的，记得我前面说过的话吗：加分项也都是必须项！\n\n所以，一些分布式相关的技术，系统的设计：如何高可用，如何灾备份，等等等等。 都是你要掌握的， 后面我会开一个章节 分享一下如何快速了解相关的一些知识。\n\n\n# 总结\n\n后端岗位通常对语言的要求不会卡那么死，不同公司也会有自己偏爱的后端语言，比如阿里系，美团等基本都是 Java；字节，腾讯等新开的项目后端基本都是 Go， 拿 C++ 来 CRUD 确实非常少见，C++ 在互联网公司中，更多是用来做基础框架的开发工作，其中也细分为很多个小方向，后续我会介绍。\n\n如果你想做后端，请学**Java **or Go，面向就业市场就业，不要和主流对抗~\n\n\n# 量化/高频\n\n抱歉，我不够格。。。\n\n\n# 基础架构 Infra\n\n终于来到了 C++ 被大量使用的领域了，这也是互联网企业 C++ 选手的聚集地，大多 C++ 岗位也都是此类部门提供。\n\n什么行业需要使用 C++ 来构建 Infra 呢？ 涉及到海量数据的存储，海量数据的计算。\n\n什么样的部门会涉及到呢？ Data 部门，AI 部门，搜广推的架构部门、etc。\n\n我把其中涉及到的最多两个方向：存储、计算 单独抽出来说一下。\n\n\n# 存储\n\n嵌入式领域 C 占大头，后端国内基本是 Java 和 Go 的天下，但存储方向，那基本都是 C++ 的地盘。（我把数据库相关的方向也归为存储应该没人会打我吧~）\n\n不过不同存储系统间的技术栈亦有差异，可以观看下面的视频，详细了解（jyy，yyds）：\n\n现代存储系统 (关系数据库和分布式存储系统) [南京大学 2022 操作系统-P30]_哔哩哔哩_bilibili\n\n下面我将介绍几个存储方向具有头代表性的公司和岗位\n\n这是一家非常有名的数据库厂商，旗下分布式时序数据库 DolphinDB 相当有名\n\n# 智臾科技 ： C++ 后端开发工程师\n\n\n\n虽然写的是后端。。但是其实这和其他后端干的活可不太一样（如果你觉得这也算后端的话那就是你对），看岗位要求应该是就维护并开发自家的数据库。\n\n所需要的技术栈也就是 Linux C++ 常见的那些技能（网络编程、多线程、模板等），加上对数据库引擎的了解。\n\n把握住 JD 当中的关键点：**加分项，**这家公司范围都已经给你写出来了，如果想进去，那就抓紧学去吧。\n\n# 快手：数据库研发工程师\n\n\n\n重点都写在 JD 里了，挑其中一个开源项目猛学！\n\n# 蚂蚁：应用研发工程师-C/C++\n\n\n\n蚂蚁的数据库明星产品 OceanBase，这也是蚂蚁为数不多的 C++ 岗位，还是一样，如果想提前准备的话，关注 JD 中的加分项，照着加分项学就完了。\n\n# 小米：分布式存储研发工程师\n\n\n\n小米的分布式存储研发岗，其实具体的工作就是照着那几个开源项目爆改罢了\n\n# 总结\n\n存储岗看起来比较高大上，但需求相较于后端是比较小的，卷度也非常高，请慎重选择。\n\n\n# 计算\n\n又是一个 C++ 的大基本盘，也是本 🐀 的所从事的方向了（大概）。\n\n高性能一直是 C++ 的底裤，也是为什么这个语言被设计地如此抽象的原因，几乎一切都是为了性能。\n\n深度学习时代，近乎无限的计算需求无疑是给 C++ 这个 20 多岁的老东西续了一口大奶。\n\n作为这个领域无可撼动的老大哥，其实大部分 cpper 的梦中情岗也聚集在这里，当然，卷度也是拉满了的。\n\n> 这个世界上几乎一切计算密集型任务都逃不开 C/C++， 那什么是计算？ 或许你可以看看这些： 一文讲清超算，高性能计算，并行计算，分布式计算的区别 并行计算:高性能计算学习路线(针对大二同学) - orion-orion - 博客园 异构计算分析\n\n下面我将介绍一些比较相关的典型岗位，并进行分析。\n\n# 小红书：搜推工程\n\n\n\n这就是新时代下的互联网企业 C++ 相关招人相对较多的一类岗位，需要对深度学习的算法以及部署工具要有足够的认识与实践经验，通常这类岗位也是企业当中的核心中的核心，所以对同学的要求也是非常之高。\n\n另外，相较于其他 C++ 岗位， 这种 AI 工程化的岗位，还需要学习相关的很多行业知识，一些常见的深度学习模型，肯定是要了解的，CUDA 编程更是吃饭的手艺，还有需要掌握常见的模型推理框架，如 NCNN 之类的，这些对于其他方向的选手来说可能用不太上，算是这类方向的专属技术栈。\n\n# 百度：AI 异构计算工程师\n\n\n\n比小红书那个 JD 要更加全面，同时也展示了这个方向与其他方向的不同：需要学习很多方向不太通用的知识\n\n这一块我不是特别特别懂，有相关经验的大佬可以跟我分享，我来补充。。。\n\n# 字节：机器学习编译优化工程师 & 硬件加速器工具链软件\n\n\n\n\n\n方向过于小众。。而且不应该放在这里的。。但是实在没地方放了，这种岗位主要就是工具链部门，招人基本都是要求 C/C++\n\n# 百度：分布式计算研发工程师\n\n\n\n通常这类岗位，计算和存储都是同一个小组内的，这种类似的岗位算是 C++er 的梦中情岗了(卷度爆表)， 其中核心技术栈就是分布式技术，谷歌的三驾马车肯定是要熟悉的。然后就去学一学开源的分布式项目。\n\n# 百度：向量检索\n\n\n\nemmm，不了解，但是很多大厂都有这个岗位，和普通人无关。\n\n# 字节：搜索架构\n\n\n\n通常来说，架构的核心计算层，很多都是使用 C++ 封装，然后供其他语言使用（当然有的厂也不一定用 C++ 写这些。。。）\n\n# 总结\n\n目前，相当多互联网企业的 Data 部门，AI 部门等，当中涉及到的高性能计算平台和存储平台都是使用 C++ 搭建的，此类岗位相对较少，竞争比较激烈，平时工作压力也是拉满。\n\n同时，Infra 岗，业务层面其实涉及到的不多，架构层难免逃不掉 On Call 的命运，涨薪机会也没有业务仔多， 裁员时也容易被认为产出低被干掉。。。\n\n好处是：出去跟别人吹的时候，很装逼~（一无是处）\n\n\n# 音视频\n\nTODO\n\n\n# 客户端\n\nTODO",normalizedContent:"在本篇章中，我会根据我浅薄的行业理解，并结合各家招聘网站上的 jd(job description)来谈一谈，c++ 到底能干啥，当然，类似游戏客户端等windows平台为主的c++岗位除外， 这里主要谈的是linux端的c++岗位，或者跨平台的c++岗位。\n\n> tips：活学活用，将你梦中情岗的任职要求扔给大语言模型，并让他给你制定一个详细的学习计划，看看对你有什么启发 ～\n\n\n# 嵌入式\n\n我对嵌入式没啥了解，而且随着时代的发展，这个方向也在不断变化着，以往的嵌入式 99.9% 都是 c，现在因为硬件的不断升级，嵌入式中的一些工作可能会使用到 c++，我们以嵌入式殿堂级公司大疆为例，看一看他们的嵌入式岗位需要用到什么技术栈，跟着 jd 学就完了。\n\n下面只列出部分公司的部分岗位，详细信息去各家官网的招聘网站，都是有的~ 有些信息还是需要靠自己收集\n\n\n# 大疆嵌入式\n\n职位投递 - 校园招聘 - dji 大疆招聘\n\n# 嵌入式底层软件开发\n\n\n\n卓驭科技就是大疆分离出来的做驾驶的公司，底软也就是这类公司最常见的开发岗位。\n\n看任职要求中，除了掌握基本的语言以外，这个岗位还尤其看重面试者对于 linux 底层机制的认识，比如进程调度管理啊，内存管理啊，文件系统等等，所以对于嵌入式选手来说，熟悉 linux 就是基本功，如果想要跟应聘该类岗位，你的主要精力就需要放在研究 linux 内核上。\n\n# 嵌入式中间件开发\n\n\n\n不知道自动驾驶中的中间件的可以去读一下这篇科普文章：一文读懂自动驾驶的“中间件”\n\n可以看到和嵌入式底软的任职要求有一点不同的是，大疆嵌入式中间件开发的语言要求明确了该岗位使用的是 c++，从我不多的投递经验来看，通常来说，写熟悉 c/c++ 的大概率是写 c，只有明确写 c++ 的岗位，进去才可能真写 c++。\n\n像这种任职要求，通常的 linux c++ 选手都可以尝试投递，算是比较 match，基本就是一套东西的，唯一可能需要单独准备的就是一些行业的编码规范(任职要求的第二条)\n\n# 相机嵌入式\n\n\n\n除了大疆，一些手机厂会有类似相关的岗位，说实话我不太懂这个。。大伙自己琢磨吧。\n\n# 智能驾驶-高性能计算\n\n\n\n这就是典型的新时代下诞生的嵌入式岗位，看任职要求的介绍，这个团队应该是 c c++ 都用，同时还需要有比较深入的 ai 相关的知识，那么会使用 cuda 就是几乎必要的条件了（注意：优先条件往往就是必要条件。。。除非实在招不到人）想要应聘相关岗位的同学，可以尝试在一些嵌入式平台上部署一些模型，来练练手。这种嵌入式岗位，个人感觉和老牌嵌入式的用人需求是不太一样的，不需要太底层的知识，做的大部分都是软件层面的事了。\n\n\n# 小米嵌入式\n\n校园招聘\n\n再来介绍一个手机厂代表吧(而且小米汽车岗位也不少，利好嵌入式)\n\n# 嵌入式软件工程师\n\n\n\nemmm，完全看不懂，岗位描述的五个方向，像是五个不同的部门。。。不过核心还是研究 linux kernel 啦，然后有一些 rtos 经验就更好了。\n\n# 机器人-嵌入式软件工程师\n\n\n\n像是更偏硬件了。。。完全不懂哎。。。不过和其他岗位一样，不管什么嵌入式，都要研究 linux kernel，所以究竟要学什么，就很明了了吧~\n\n# 汽车 os 研发\n\n\n\n感觉和大疆的中间件岗位类似，只有这类岗位，才会使用 c++ 进行开发，其他的岗位，基本都是 c 为主。\n\n# 软件开发工程师-bsp 方向\n\n\n\n又是完全不懂的领域。。。不过看岗位要求，还是和基本的嵌入式岗位类似； 总之，学好 linux kernel，肯定有饭吃~\n\n\n# 后端\n\n好了，来到了 c++ 寄中之寄的岗位，后端(这里专指 web server)。 首先，c++ 就不适合去做后端 crud 的任务，不到万不得已的情况下，谁会给自己找麻烦？但是因为历史原因，或者其他什么的，一些企业会使用 c++ 来开发后端，现在也很少见了。\n\n由于实在找不到纯 c++ 后端的 jd，所以我就整理一些后端 jd 来 ~~凑个数 ~~介绍\n\n\n# 字节\n\n字节跳动校园招聘\n\n字节的岗位是先划分部门，再划分岗位，个人觉得这种排列方式更好。\n\n# 后端-抖音电商\n\n\n\n字节的 jd 还是偏向基础的，没看出什么特殊要求来，不过在 jd 中寻找亮点~\n\n后端该学谁一目了然。\n\n\n# 腾讯\n\n腾讯招聘的分层逻辑就是先选岗位类别，再选部门，这也是大多数公司招聘岗位的逻辑。\n\nhttps://join.qq.com/post.html\n\n# 后台开发\n\n\n\n可以发现，后端的岗位对于语言没有那么多限制，而是更多考察网络、系统、数据库等相关的基础知识（tx 尤其爱问网络）所以，实际上你学什么语言都可以去投后端岗，而这么多语言中，c++ 的学习成本明显更高，就算拿到 offer，进去以后可能也是转 go 或者转 java，所以，何必呢。\n\n我稍微说一下后端同学可能需要学的知识，其实 tx 的 jd 写的已经蛮清楚了，除了常见的网络，操作系统之类的基础知识， 数据库也是必须要学的（c++ 其他方向还真不用学）。\n\n常用的关系型数据库（mysql）， 非关系型（redis） 都是工作中必须掌握的技能，如果你是想走后端，请自行搜索资料去学习。\n\n另外，在这个内卷的时代，学会上面的这些往往也是不够的，记得我前面说过的话吗：加分项也都是必须项！\n\n所以，一些分布式相关的技术，系统的设计：如何高可用，如何灾备份，等等等等。 都是你要掌握的， 后面我会开一个章节 分享一下如何快速了解相关的一些知识。\n\n\n# 总结\n\n后端岗位通常对语言的要求不会卡那么死，不同公司也会有自己偏爱的后端语言，比如阿里系，美团等基本都是 java；字节，腾讯等新开的项目后端基本都是 go， 拿 c++ 来 crud 确实非常少见，c++ 在互联网公司中，更多是用来做基础框架的开发工作，其中也细分为很多个小方向，后续我会介绍。\n\n如果你想做后端，请学**java **or go，面向就业市场就业，不要和主流对抗~\n\n\n# 量化/高频\n\n抱歉，我不够格。。。\n\n\n# 基础架构 infra\n\n终于来到了 c++ 被大量使用的领域了，这也是互联网企业 c++ 选手的聚集地，大多 c++ 岗位也都是此类部门提供。\n\n什么行业需要使用 c++ 来构建 infra 呢？ 涉及到海量数据的存储，海量数据的计算。\n\n什么样的部门会涉及到呢？ data 部门，ai 部门，搜广推的架构部门、etc。\n\n我把其中涉及到的最多两个方向：存储、计算 单独抽出来说一下。\n\n\n# 存储\n\n嵌入式领域 c 占大头，后端国内基本是 java 和 go 的天下，但存储方向，那基本都是 c++ 的地盘。（我把数据库相关的方向也归为存储应该没人会打我吧~）\n\n不过不同存储系统间的技术栈亦有差异，可以观看下面的视频，详细了解（jyy，yyds）：\n\n现代存储系统 (关系数据库和分布式存储系统) [南京大学 2022 操作系统-p30]_哔哩哔哩_bilibili\n\n下面我将介绍几个存储方向具有头代表性的公司和岗位\n\n这是一家非常有名的数据库厂商，旗下分布式时序数据库 dolphindb 相当有名\n\n# 智臾科技 ： c++ 后端开发工程师\n\n\n\n虽然写的是后端。。但是其实这和其他后端干的活可不太一样（如果你觉得这也算后端的话那就是你对），看岗位要求应该是就维护并开发自家的数据库。\n\n所需要的技术栈也就是 linux c++ 常见的那些技能（网络编程、多线程、模板等），加上对数据库引擎的了解。\n\n把握住 jd 当中的关键点：**加分项，**这家公司范围都已经给你写出来了，如果想进去，那就抓紧学去吧。\n\n# 快手：数据库研发工程师\n\n\n\n重点都写在 jd 里了，挑其中一个开源项目猛学！\n\n# 蚂蚁：应用研发工程师-c/c++\n\n\n\n蚂蚁的数据库明星产品 oceanbase，这也是蚂蚁为数不多的 c++ 岗位，还是一样，如果想提前准备的话，关注 jd 中的加分项，照着加分项学就完了。\n\n# 小米：分布式存储研发工程师\n\n\n\n小米的分布式存储研发岗，其实具体的工作就是照着那几个开源项目爆改罢了\n\n# 总结\n\n存储岗看起来比较高大上，但需求相较于后端是比较小的，卷度也非常高，请慎重选择。\n\n\n# 计算\n\n又是一个 c++ 的大基本盘，也是本 🐀 的所从事的方向了（大概）。\n\n高性能一直是 c++ 的底裤，也是为什么这个语言被设计地如此抽象的原因，几乎一切都是为了性能。\n\n深度学习时代，近乎无限的计算需求无疑是给 c++ 这个 20 多岁的老东西续了一口大奶。\n\n作为这个领域无可撼动的老大哥，其实大部分 cpper 的梦中情岗也聚集在这里，当然，卷度也是拉满了的。\n\n> 这个世界上几乎一切计算密集型任务都逃不开 c/c++， 那什么是计算？ 或许你可以看看这些： 一文讲清超算，高性能计算，并行计算，分布式计算的区别 并行计算:高性能计算学习路线(针对大二同学) - orion-orion - 博客园 异构计算分析\n\n下面我将介绍一些比较相关的典型岗位，并进行分析。\n\n# 小红书：搜推工程\n\n\n\n这就是新时代下的互联网企业 c++ 相关招人相对较多的一类岗位，需要对深度学习的算法以及部署工具要有足够的认识与实践经验，通常这类岗位也是企业当中的核心中的核心，所以对同学的要求也是非常之高。\n\n另外，相较于其他 c++ 岗位， 这种 ai 工程化的岗位，还需要学习相关的很多行业知识，一些常见的深度学习模型，肯定是要了解的，cuda 编程更是吃饭的手艺，还有需要掌握常见的模型推理框架，如 ncnn 之类的，这些对于其他方向的选手来说可能用不太上，算是这类方向的专属技术栈。\n\n# 百度：ai 异构计算工程师\n\n\n\n比小红书那个 jd 要更加全面，同时也展示了这个方向与其他方向的不同：需要学习很多方向不太通用的知识\n\n这一块我不是特别特别懂，有相关经验的大佬可以跟我分享，我来补充。。。\n\n# 字节：机器学习编译优化工程师 & 硬件加速器工具链软件\n\n\n\n\n\n方向过于小众。。而且不应该放在这里的。。但是实在没地方放了，这种岗位主要就是工具链部门，招人基本都是要求 c/c++\n\n# 百度：分布式计算研发工程师\n\n\n\n通常这类岗位，计算和存储都是同一个小组内的，这种类似的岗位算是 c++er 的梦中情岗了(卷度爆表)， 其中核心技术栈就是分布式技术，谷歌的三驾马车肯定是要熟悉的。然后就去学一学开源的分布式项目。\n\n# 百度：向量检索\n\n\n\nemmm，不了解，但是很多大厂都有这个岗位，和普通人无关。\n\n# 字节：搜索架构\n\n\n\n通常来说，架构的核心计算层，很多都是使用 c++ 封装，然后供其他语言使用（当然有的厂也不一定用 c++ 写这些。。。）\n\n# 总结\n\n目前，相当多互联网企业的 data 部门，ai 部门等，当中涉及到的高性能计算平台和存储平台都是使用 c++ 搭建的，此类岗位相对较少，竞争比较激烈，平时工作压力也是拉满。\n\n同时，infra 岗，业务层面其实涉及到的不多，架构层难免逃不掉 on call 的命运，涨薪机会也没有业务仔多， 裁员时也容易被认为产出低被干掉。。。\n\n好处是：出去跟别人吹的时候，很装逼~（一无是处）\n\n\n# 音视频\n\ntodo\n\n\n# 客户端\n\ntodo",charsets:{cjk:!0},lastUpdated:"2024/04/28, 17:23:46",lastUpdatedTimestamp:1714325026e3},{title:"C++自救指南-项目实战篇",frontmatter:{title:"C++自救指南-项目实战篇",date:"2024-04-27T06:07:11.000Z",author:"京都小低调",permalink:"/pages/5a3138/"},regularPath:"/02.%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/01.cpp%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97/06.C++%E8%87%AA%E6%95%91%E6%8C%87%E5%8D%97-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E7%AF%87.html",relativePath:"02.好文分享/01.cpp自救指南/06.C++自救指南-项目实战篇.md",key:"v-31c0582d",path:"/pages/5a3138/",headers:[{level:3,title:"如何跑通一个C++开源项目",slug:"如何跑通一个c-开源项目",normalizedTitle:"如何跑通一个c++开源项目",charIndex:60},{level:2,title:"项目推荐",slug:"项目推荐",normalizedTitle:"项目推荐",charIndex:693},{level:3,title:"项目推荐: 后端篇章",slug:"项目推荐-后端篇章",normalizedTitle:"项目推荐: 后端篇章",charIndex:770},{level:3,title:"项目推荐: 存储篇",slug:"项目推荐-存储篇",normalizedTitle:"项目推荐: 存储篇",charIndex:1920},{level:3,title:"项目推荐：计算篇",slug:"项目推荐-计算篇",normalizedTitle:"项目推荐：计算篇",charIndex:3067},{level:3,title:"项目推荐: 杂项",slug:"项目推荐-杂项",normalizedTitle:"项目推荐: 杂项",charIndex:4126}],headersStr:"如何跑通一个C++开源项目 项目推荐 项目推荐: 后端篇章 项目推荐: 存储篇 项目推荐：计算篇 项目推荐: 杂项",content:"本篇章推荐 本🐭 仓库中珍藏的一些项目，有个人练手项目，也有企业级开源项目。选择一两个感兴趣的，抄 学起来！\n\n\n# 如何跑通一个C++开源项目\n\n现在，我们来尝试拉一个开源项目，来看看通常的 C++ 项目该如何构建\n\n这里我选取了一个 0 依赖项目：Workflow\n\n拉项目，并进入项目文件夹，然后切换打开文件夹（切换工作路径）：\n\ngit clone https://github.com/sogou/workflow.git\ncd workflow/\n\n\n\n\n来看一下基本结构：\n\n\n\n这里我的 cmake 插件在打开文件夹后自动帮我构建了一个 build，并编译了.\n\n看一下官网文档如何编译的：\n\n\n\n会发现，官方结构中 tutorial 是单独编译的，所以我们再次将工作目录调整到 tutorial 下：\n\n\n\n有的友友操作时可能头文件在疯狂爆红，而我的头文件索引却是正确的，爆红的原因是因为你的 clangd 没有被正确地配置，请使用 GPT 学习如何让 clangd 正确的工作，并在 clangd 抽风的时候重启它（vscode 如何 ctrl + shift + p）：\n\n\n\n现在，开始调试代码，和之前的脚手架一样，右键调试：\n\n\n\n\n\n至此，你已成功可以编译，调试 80% 以上的 C++ 项目了，之后就是 深入学习 CMake 的逻辑，和灵活使用 CMake Tools 插件罢了。\n\n再三提醒，如果当中出现了各种各样奇怪的问题，尝试百度，但是依旧无法解决，可以将问题抛给 GPT，看看它是如何解决的 ～\n\n新时代码农，要善于使用新时代工具 🔧\n\n\n# 项目推荐\n\n由于前后整理时间节点不同，本小节在内容划分上存在一些缺陷，各位见谅，链接都贴上了，大家找自己感兴趣的学就好了，不要管我的胡言乱语😭\n\n\n# 项目推荐: 后端篇章\n\n 1. WebServer：很烂大街。。但是你至少得看一遍。。。\n\nhttps://github.com/qinguoyi/TinyWebServer\n\n 2. Muduo ： 人手一个，不论是不是后端方向都可以学一学\n\n施磊老师有出过一门手写Muduo的课，有条件的可以去看看。\n\nGitHub - chenshuo/muduo: Event-driven network library for multi-threaded Linux server in C++11\n\n 3. 恋恋辰风-全栈聊天项目：b 站某大佬目前在更新的项目，手把手教\n\nC++ 全栈聊天项目(1)架构概述和登录界面_哔哩哔哩_bilibili\n\n 4. sylar 服务器： 大佬全程手敲，不过字有点小\n\n[C++ 高级教程]从零开始开发服务器框架(sylar)_哔哩哔哩_bilibili\n\nGitHub - sylar-yin/sylar: C++ 高性能分布式服务器框架,webserver,websocket server,自定义 tcp_server（包含日志模块，配置模块，线程模块，协\n\n 5. TinyRPC：我能想到的 C++ 能够写的为数不多的有用的项目就只有 RPC 框架了，这个是一众同质化产品当中文档最丰富的。。。\n\nGitHub - Gooddbird/tinyrpc: c++ async rpc framework. 14w+qps.\n\n 6. workflow：和上面的玩具不同，这个可是真正的在生产环境上部署的项目，如果上面的玩具满足不了你，就来看这个吧。网上也有非常多的资料，自行搜索。\n\nGitHub - sogou/workflow: C++ Parallel Computing and Asynchronous Networking Framework\n\n 7. brpc：伟大，无需多言。 国内开源产品中文档写的最牛的项目之一，含金量懂的都懂。\n\nGitHub - apache/brpc: brpc is an Industrial-grade RPC framework using C++ Language, which is often u\n\n 8. braft ： 基于 brpc 构建的分布式一致性算法实现，Curve 当中使用的一致性算法组件就是它。（不知道该把这个项目放在哪，索性就放这里了，其实这只能算是分布式项目）\n\nGitHub - baidu/braft: An industrial-grade C++ implementation of RAFT consensus algorithm based on br\n\n\n# 项目推荐: 存储篇\n\n 1. cmu15-445： 手搓数据库引擎，存储方向应该人均一个吧\n\nCMU 15-445/645 :: Intro to Database Systems (Fall 2022)\n\nCMU 数据库系统导论-学习资料\n\n 2. Leveldb ： 基于磁盘的 KV 存储引擎，谷歌出品，文档丰富，也是存储仔的人均项目\n\n【硬核课堂】LevelDB 源码分析\n\nGitHub - google/leveldb: LevelDB is a fast key-value storage library written at Google that provides\n\n 3. 代码随想录：Raft + KV 存储： 预定下一个烂大街项目榜首，但是该学还得学。。。\n\nGitHub - youngyangyang04/KVstorageBaseRaft-cpp: 【代码随想录知识星球】项目分享-基于 Raft 的 k-v 存储数据库 🔥\n\n 4. 成电分布式实验室新生计划：\n\nGitHub - CDDSCLab/training-plan: 电子科技大学分布式存储与计算实验室新生训练计划\n\n 5. Curve：网易数帆 云原生分布式存储系统，社区对学生友好，参与过开源之夏\n\nGitHub - opencurve/curve: Curve is a sandbox project hosted by the CNCF Foundation. It's cloud-nativ\n\n 6. ceph: 大多数公司都在用的分布式存储平台\n\nGitHub - ceph/ceph: Ceph is a distributed object, block, and file storage platform\n\n 7. Doris ： 实时数仓 非常有名\n\nGitHub - apache/doris: Apache Doris is an easy-to-use, high performance and unified analytics databa\n\n 8. ClickHouse ：OLAP 实时分析的列式数据库 好火好火\n\nGitHub - ClickHouse/ClickHouse: ClickHouse® is a free analytics DBMS for big data\n\n 9. oceanbase： 蚂蚁开源，分布式关系型数据库\n\nGitHub - oceanbase/oceanbase: OceanBase is an enterprise distributed relational database with high a\n\n\n# 项目推荐：计算篇\n\n 1. 高性能计算学习路线\n\n高性能计算学习路线 | 高性能计算学习路线\n\n 2. workspace ： 轻量级异步执行框架， 适合新人 抄 学习\n\nhttps://github.com/CodingHanYa/workspace\n\n 3. concurrencpp ： C++ 并发库，可以学习如何实现各种并发编程的技巧\n\nGitHub - David-Haim/concurrencpp: Modern concurrency for C++. Tasks, executors, timers and C++20 cor\n\n 4. CGraph ： 国人编写的图计算引擎，文档友好，非常适合新人学习\n\nGitHub - ChunelFeng/CGraph: 【A common used C++ DAG framework】 一个通用的、无三方依赖的、跨平台的、收录于 awesome-cpp 的、基于流图\n\n 5. taskflow ： 图计算引擎的行业标杆，并行计算的王者，支持异构计算，文档友好（如果你英语还可以的话）\n\nGitHub - taskflow/taskflow: A General-purpose Parallel and Heterogeneous Task Programming System\n\n 6. PACMAN 组的 repo，短小精悍。每一个小项目背后可能都是一篇顶刊 or 顶会，很适合用来水简历\n\nPACMAN Group, Tsinghua University\n\n 7. workflow ： 并行计算与异步通信框架，之前有介绍过\n\nGitHub - sogou/workflow: C++ Parallel Computing and Asynchronous Networking Framework\n\n 8. nndeploy： 面向教学的模型端到端部署框架\n\nGitHub - nndeploy/nndeploy: nndeploy 是一款模型端到端部署框架。以多端推理以及基于有向无环图模型部署为基础，致力为用户提供跨平台、简单易用、高性能的模型部署体验。\n\n 9. NCNN ： 高性能神经网络前向计算框架， 面向移动端\n\nGitHub - Tencent/ncnn: ncnn is a high-performance neural network inference framework optimized for t\n\n\n# 项目推荐: 杂项\n\nC++ 选手最苦恼的一个问题就是没有好的项目可以 抄 学习， 一届一届都多少年了，还是那个的 WebServer，作为一个把 github 当 b 站逛的闲人，我的 star 库存了一堆看起来还不错的项目，这次一把分享出来，解决大伙的项目焦虑\n\n(注：古早以前整理，直接复制粘贴过来的，没有区分方向，而且可能有些项目上面已经推荐过了)\n\n 1.  多生产多消费的无锁队列，8k star：GitHub - cameron314/concurrentqueue: A fast multi-producer, multi-consumer lock-free concurrent queu\n 2.  C++20 纯头文件网络库，项目比较新，且有使用文档：GitHub - fawdlstty/libfv: libfv is C++20 header-only network library, support TCP/SSL/Http/websocket\n 3.  coke，协程化的 workflow，大佬背书：GitHub - kedixa/coke: Coroutine C++ Workflow based on C++ 20\n 4.  kcp：用户态下的 ARQ 协议实现，游戏界内很出名，issue 中有很多网络相关的讨论，值得学习：GitHub - skywind3000/kcp: ⚡️ KCP - A Fast and Reliable ARQ Protocol、GitHub - frimin/learning-kcp-protocol: KCP 协议基本数据结构和算法图文介绍\n 5.  evpp：高度参考 muduo，看完 muduo 后可以研究一下：GitHub - Qihoo360/evpp: A modern C++ network library for developing high performance network service\n 6.  cloriSearch：简易引擎内核（貌似作者弃坑了）感兴趣可以看看：GitHub - shpilu/cloriSearch: 广告检索引擎(针对在线广告设计，支持简单倒排检索、范围检索、LBS 检索，持续完善中)\n 7.  yesdb:一个基于 Bitcask 的 KV 存储引擎(作者貌似是我关注的一个 b 站 up？可以看看他的仓库)：GitHub - SYaoJun/yesdb: bitcask storage system【WIP】\n 8.  work-stealing-queue：workflow 中拆分出来的 work-steal 队列，类似 goroutine 和 bthread 的设计，很值得学习：GitHub - taskflow/work-stealing-queue: A fast work-stealing queue template in C++\n 9.  wfrest：workflow 的 restfull api，作者文档写的很完善：GitHub - wfrest/wfrest: C++ Web Framework REST API\n 10. cv 模型推理服务器，workflow 的生态项目，算是科研课题与后端结合的案例： GitHub - MaybeShewill-CV/mortred_model_server: High Performan Ai Model Web Server. Mainly support co\n 11. Turtle：C++17 的网络库，文档比较丰富，可以学习：GitHub - YukunJ/Turtle: A C++17-based lightweight high-performance network library\n 12. smallkv:一个列存的、基于 LSM 架构的存储引擎，学过 15445 的应该很容器上手：GitHub - yangyang233333/smallkv: A small Key-Value storage engine written in C++.\n 13. 八股文章集合，量大管饱：GitHub - 0voice/cpp_backend_awsome_blog: 2023 年最新整理 c++ 后端开发，1000 篇优秀博文，含内存，网络，架构设计，高性能，数据结构，基础组件，中间件，分\n 14. acid：C++ 实现的分布式服务治理项目，貌似作者有出教程？！：GitHub - zavier-wong/acid: A distributed service governance framework. 分布式服务治理框架\n 15. rocket，tinyrpc 作者新作，设计值得学习：GitHub - Gooddbird/rocket: c++ rpc framework, simplified version of tinyrpc。\n 16. C++ 实现的跨平台开发框架，作者挺牛的：GitHub - lailongwei/llbc: 一个简洁、高效、跨平台、多语言支持的服务端开发框架，面向 Service 及 Component，底层 c++ 实现。\n 17. muduo 的简化版，核心逻辑和 muduo 完全一致，作者有提供文档：GitHub - guangqianpeng/tinyev: Multithreaded network library in C++17\n 18. C++ 新特性教程，C++11 已经是 10 年前了，多学点新东西方便吹 GitHub - changkun/modern-cpp-tutorial: 📚 Modern C++ Tutorial: C++11/14/17/20 On the Fly | https://ch\n 19. demo 级别的 socket 编程项目，适合刚看完游双后的新人：GitHub - eminfedar/async-sockets-cpp: Simple thread-based asynchronous TCP & UDP Socket classes in C\n 20. 高 star 的线程池项目，文档非常丰富，适合英语较好的同学：GitHub - bshoshany/thread-pool: BS::thread_pool: a fast, lightweight, and easy-to-use C++17 thread p\n 21. 作者在知乎高强度宣传，非常现代的 C 网络库，有兴趣可以看看：GitHub - ithewei/libhv: 🔥 比 libevent/libuv/asio 更易用的网络库。A c/c++ network library for developing TCP/UDP\n 22. 知名 go 项目或者 C++ 项目的注解版本索引项目，很赞：GitHub - chenyahui/AnnotatedCode: 知名开源代码库的注释版：C++、Golang 等\n 23. wfrest 作者学生时代的网络库作品，文档依旧丰富，为作者点赞：GitHub - BurgerGroup/Burger: 🍔 c++11 Server based on coroutine and reactor\n 24. cnatra：一个高效易用的 c++20 http 框架:GitHub - qicosmos/cinatra: modern c++(c++20), cross-platform, header-only, easy to use http framewor\n 25. C++ 协程实现的 IO 库，外国作者，做了非常多 banckmark，值得学习：GitHub - netcan/asyncio: asyncio is a c++20 library to write concurrent code using the async/await s\n 26. C++ 协程封装库，文档很丰富：GitHub - jbaldwin/libcoro: C++20 coroutine library\n 27. C++20 + io_uring 实现的网络库，浙大 ✌️ 的项目，可惜我能力有限我看不明白，作者本人在 b 站也有号：GitHub - Codesire-Deng/co_context: A coroutine framework aimed at high-concurrency io with reasonabl\n 28. 一堆八股文章：GitHub - hengqiali/AwesomeCpp: ---AWESOME--- C++ 学习笔记和常见面试知识点，C++11 特性，包括智能指针、四种强制转换、function 和 bind、移动语\n 29. demo 级别的缓存池项目，还有对应的教程，适合新手：GitHub - hansionz/ConcurrentMemoryPool: 📚 一个三级缓存的高并发内存池\n 30. 适合新人，手把手教你写 webserver，但是作者很久没更新了。。：GitHub - yuesong-feng/30dayMakeCppServer: 30 天自制 C++ 服务器，包含教程和源代码\n 31. 经典 webserver，1.3w star 了，惊！！ 我刚学的时候才 6k 多呢。。C++ 后端太恐怖了：GitHub - qinguoyi/TinyWebServer: 🔥 Linux 下 C++ 轻量级 WebServer 服务器\n\n现在的项目同质化非常严重，所以要尽量要寻找自己和其他人有核心差异点，这也是面试官重点会问到的\n\n深入学习一至两个中小规模的项目，不用贪多，因为面试时间有限，面试官通常只会专注问一两个。",normalizedContent:"本篇章推荐 本🐭 仓库中珍藏的一些项目，有个人练手项目，也有企业级开源项目。选择一两个感兴趣的，抄 学起来！\n\n\n# 如何跑通一个c++开源项目\n\n现在，我们来尝试拉一个开源项目，来看看通常的 c++ 项目该如何构建\n\n这里我选取了一个 0 依赖项目：workflow\n\n拉项目，并进入项目文件夹，然后切换打开文件夹（切换工作路径）：\n\ngit clone https://github.com/sogou/workflow.git\ncd workflow/\n\n\n\n\n来看一下基本结构：\n\n\n\n这里我的 cmake 插件在打开文件夹后自动帮我构建了一个 build，并编译了.\n\n看一下官网文档如何编译的：\n\n\n\n会发现，官方结构中 tutorial 是单独编译的，所以我们再次将工作目录调整到 tutorial 下：\n\n\n\n有的友友操作时可能头文件在疯狂爆红，而我的头文件索引却是正确的，爆红的原因是因为你的 clangd 没有被正确地配置，请使用 gpt 学习如何让 clangd 正确的工作，并在 clangd 抽风的时候重启它（vscode 如何 ctrl + shift + p）：\n\n\n\n现在，开始调试代码，和之前的脚手架一样，右键调试：\n\n\n\n\n\n至此，你已成功可以编译，调试 80% 以上的 c++ 项目了，之后就是 深入学习 cmake 的逻辑，和灵活使用 cmake tools 插件罢了。\n\n再三提醒，如果当中出现了各种各样奇怪的问题，尝试百度，但是依旧无法解决，可以将问题抛给 gpt，看看它是如何解决的 ～\n\n新时代码农，要善于使用新时代工具 🔧\n\n\n# 项目推荐\n\n由于前后整理时间节点不同，本小节在内容划分上存在一些缺陷，各位见谅，链接都贴上了，大家找自己感兴趣的学就好了，不要管我的胡言乱语😭\n\n\n# 项目推荐: 后端篇章\n\n 1. webserver：很烂大街。。但是你至少得看一遍。。。\n\nhttps://github.com/qinguoyi/tinywebserver\n\n 2. muduo ： 人手一个，不论是不是后端方向都可以学一学\n\n施磊老师有出过一门手写muduo的课，有条件的可以去看看。\n\ngithub - chenshuo/muduo: event-driven network library for multi-threaded linux server in c++11\n\n 3. 恋恋辰风-全栈聊天项目：b 站某大佬目前在更新的项目，手把手教\n\nc++ 全栈聊天项目(1)架构概述和登录界面_哔哩哔哩_bilibili\n\n 4. sylar 服务器： 大佬全程手敲，不过字有点小\n\n[c++ 高级教程]从零开始开发服务器框架(sylar)_哔哩哔哩_bilibili\n\ngithub - sylar-yin/sylar: c++ 高性能分布式服务器框架,webserver,websocket server,自定义 tcp_server（包含日志模块，配置模块，线程模块，协\n\n 5. tinyrpc：我能想到的 c++ 能够写的为数不多的有用的项目就只有 rpc 框架了，这个是一众同质化产品当中文档最丰富的。。。\n\ngithub - gooddbird/tinyrpc: c++ async rpc framework. 14w+qps.\n\n 6. workflow：和上面的玩具不同，这个可是真正的在生产环境上部署的项目，如果上面的玩具满足不了你，就来看这个吧。网上也有非常多的资料，自行搜索。\n\ngithub - sogou/workflow: c++ parallel computing and asynchronous networking framework\n\n 7. brpc：伟大，无需多言。 国内开源产品中文档写的最牛的项目之一，含金量懂的都懂。\n\ngithub - apache/brpc: brpc is an industrial-grade rpc framework using c++ language, which is often u\n\n 8. braft ： 基于 brpc 构建的分布式一致性算法实现，curve 当中使用的一致性算法组件就是它。（不知道该把这个项目放在哪，索性就放这里了，其实这只能算是分布式项目）\n\ngithub - baidu/braft: an industrial-grade c++ implementation of raft consensus algorithm based on br\n\n\n# 项目推荐: 存储篇\n\n 1. cmu15-445： 手搓数据库引擎，存储方向应该人均一个吧\n\ncmu 15-445/645 :: intro to database systems (fall 2022)\n\ncmu 数据库系统导论-学习资料\n\n 2. leveldb ： 基于磁盘的 kv 存储引擎，谷歌出品，文档丰富，也是存储仔的人均项目\n\n【硬核课堂】leveldb 源码分析\n\ngithub - google/leveldb: leveldb is a fast key-value storage library written at google that provides\n\n 3. 代码随想录：raft + kv 存储： 预定下一个烂大街项目榜首，但是该学还得学。。。\n\ngithub - youngyangyang04/kvstoragebaseraft-cpp: 【代码随想录知识星球】项目分享-基于 raft 的 k-v 存储数据库 🔥\n\n 4. 成电分布式实验室新生计划：\n\ngithub - cddsclab/training-plan: 电子科技大学分布式存储与计算实验室新生训练计划\n\n 5. curve：网易数帆 云原生分布式存储系统，社区对学生友好，参与过开源之夏\n\ngithub - opencurve/curve: curve is a sandbox project hosted by the cncf foundation. it's cloud-nativ\n\n 6. ceph: 大多数公司都在用的分布式存储平台\n\ngithub - ceph/ceph: ceph is a distributed object, block, and file storage platform\n\n 7. doris ： 实时数仓 非常有名\n\ngithub - apache/doris: apache doris is an easy-to-use, high performance and unified analytics databa\n\n 8. clickhouse ：olap 实时分析的列式数据库 好火好火\n\ngithub - clickhouse/clickhouse: clickhouse® is a free analytics dbms for big data\n\n 9. oceanbase： 蚂蚁开源，分布式关系型数据库\n\ngithub - oceanbase/oceanbase: oceanbase is an enterprise distributed relational database with high a\n\n\n# 项目推荐：计算篇\n\n 1. 高性能计算学习路线\n\n高性能计算学习路线 | 高性能计算学习路线\n\n 2. workspace ： 轻量级异步执行框架， 适合新人 抄 学习\n\nhttps://github.com/codinghanya/workspace\n\n 3. concurrencpp ： c++ 并发库，可以学习如何实现各种并发编程的技巧\n\ngithub - david-haim/concurrencpp: modern concurrency for c++. tasks, executors, timers and c++20 cor\n\n 4. cgraph ： 国人编写的图计算引擎，文档友好，非常适合新人学习\n\ngithub - chunelfeng/cgraph: 【a common used c++ dag framework】 一个通用的、无三方依赖的、跨平台的、收录于 awesome-cpp 的、基于流图\n\n 5. taskflow ： 图计算引擎的行业标杆，并行计算的王者，支持异构计算，文档友好（如果你英语还可以的话）\n\ngithub - taskflow/taskflow: a general-purpose parallel and heterogeneous task programming system\n\n 6. pacman 组的 repo，短小精悍。每一个小项目背后可能都是一篇顶刊 or 顶会，很适合用来水简历\n\npacman group, tsinghua university\n\n 7. workflow ： 并行计算与异步通信框架，之前有介绍过\n\ngithub - sogou/workflow: c++ parallel computing and asynchronous networking framework\n\n 8. nndeploy： 面向教学的模型端到端部署框架\n\ngithub - nndeploy/nndeploy: nndeploy 是一款模型端到端部署框架。以多端推理以及基于有向无环图模型部署为基础，致力为用户提供跨平台、简单易用、高性能的模型部署体验。\n\n 9. ncnn ： 高性能神经网络前向计算框架， 面向移动端\n\ngithub - tencent/ncnn: ncnn is a high-performance neural network inference framework optimized for t\n\n\n# 项目推荐: 杂项\n\nc++ 选手最苦恼的一个问题就是没有好的项目可以 抄 学习， 一届一届都多少年了，还是那个的 webserver，作为一个把 github 当 b 站逛的闲人，我的 star 库存了一堆看起来还不错的项目，这次一把分享出来，解决大伙的项目焦虑\n\n(注：古早以前整理，直接复制粘贴过来的，没有区分方向，而且可能有些项目上面已经推荐过了)\n\n 1.  多生产多消费的无锁队列，8k star：github - cameron314/concurrentqueue: a fast multi-producer, multi-consumer lock-free concurrent queu\n 2.  c++20 纯头文件网络库，项目比较新，且有使用文档：github - fawdlstty/libfv: libfv is c++20 header-only network library, support tcp/ssl/http/websocket\n 3.  coke，协程化的 workflow，大佬背书：github - kedixa/coke: coroutine c++ workflow based on c++ 20\n 4.  kcp：用户态下的 arq 协议实现，游戏界内很出名，issue 中有很多网络相关的讨论，值得学习：github - skywind3000/kcp: ⚡️ kcp - a fast and reliable arq protocol、github - frimin/learning-kcp-protocol: kcp 协议基本数据结构和算法图文介绍\n 5.  evpp：高度参考 muduo，看完 muduo 后可以研究一下：github - qihoo360/evpp: a modern c++ network library for developing high performance network service\n 6.  clorisearch：简易引擎内核（貌似作者弃坑了）感兴趣可以看看：github - shpilu/clorisearch: 广告检索引擎(针对在线广告设计，支持简单倒排检索、范围检索、lbs 检索，持续完善中)\n 7.  yesdb:一个基于 bitcask 的 kv 存储引擎(作者貌似是我关注的一个 b 站 up？可以看看他的仓库)：github - syaojun/yesdb: bitcask storage system【wip】\n 8.  work-stealing-queue：workflow 中拆分出来的 work-steal 队列，类似 goroutine 和 bthread 的设计，很值得学习：github - taskflow/work-stealing-queue: a fast work-stealing queue template in c++\n 9.  wfrest：workflow 的 restfull api，作者文档写的很完善：github - wfrest/wfrest: c++ web framework rest api\n 10. cv 模型推理服务器，workflow 的生态项目，算是科研课题与后端结合的案例： github - maybeshewill-cv/mortred_model_server: high performan ai model web server. mainly support co\n 11. turtle：c++17 的网络库，文档比较丰富，可以学习：github - yukunj/turtle: a c++17-based lightweight high-performance network library\n 12. smallkv:一个列存的、基于 lsm 架构的存储引擎，学过 15445 的应该很容器上手：github - yangyang233333/smallkv: a small key-value storage engine written in c++.\n 13. 八股文章集合，量大管饱：github - 0voice/cpp_backend_awsome_blog: 2023 年最新整理 c++ 后端开发，1000 篇优秀博文，含内存，网络，架构设计，高性能，数据结构，基础组件，中间件，分\n 14. acid：c++ 实现的分布式服务治理项目，貌似作者有出教程？！：github - zavier-wong/acid: a distributed service governance framework. 分布式服务治理框架\n 15. rocket，tinyrpc 作者新作，设计值得学习：github - gooddbird/rocket: c++ rpc framework, simplified version of tinyrpc。\n 16. c++ 实现的跨平台开发框架，作者挺牛的：github - lailongwei/llbc: 一个简洁、高效、跨平台、多语言支持的服务端开发框架，面向 service 及 component，底层 c++ 实现。\n 17. muduo 的简化版，核心逻辑和 muduo 完全一致，作者有提供文档：github - guangqianpeng/tinyev: multithreaded network library in c++17\n 18. c++ 新特性教程，c++11 已经是 10 年前了，多学点新东西方便吹 github - changkun/modern-cpp-tutorial: 📚 modern c++ tutorial: c++11/14/17/20 on the fly | https://ch\n 19. demo 级别的 socket 编程项目，适合刚看完游双后的新人：github - eminfedar/async-sockets-cpp: simple thread-based asynchronous tcp & udp socket classes in c\n 20. 高 star 的线程池项目，文档非常丰富，适合英语较好的同学：github - bshoshany/thread-pool: bs::thread_pool: a fast, lightweight, and easy-to-use c++17 thread p\n 21. 作者在知乎高强度宣传，非常现代的 c 网络库，有兴趣可以看看：github - ithewei/libhv: 🔥 比 libevent/libuv/asio 更易用的网络库。a c/c++ network library for developing tcp/udp\n 22. 知名 go 项目或者 c++ 项目的注解版本索引项目，很赞：github - chenyahui/annotatedcode: 知名开源代码库的注释版：c++、golang 等\n 23. wfrest 作者学生时代的网络库作品，文档依旧丰富，为作者点赞：github - burgergroup/burger: 🍔 c++11 server based on coroutine and reactor\n 24. cnatra：一个高效易用的 c++20 http 框架:github - qicosmos/cinatra: modern c++(c++20), cross-platform, header-only, easy to use http framewor\n 25. c++ 协程实现的 io 库，外国作者，做了非常多 banckmark，值得学习：github - netcan/asyncio: asyncio is a c++20 library to write concurrent code using the async/await s\n 26. c++ 协程封装库，文档很丰富：github - jbaldwin/libcoro: c++20 coroutine library\n 27. c++20 + io_uring 实现的网络库，浙大 ✌️ 的项目，可惜我能力有限我看不明白，作者本人在 b 站也有号：github - codesire-deng/co_context: a coroutine framework aimed at high-concurrency io with reasonabl\n 28. 一堆八股文章：github - hengqiali/awesomecpp: ---awesome--- c++ 学习笔记和常见面试知识点，c++11 特性，包括智能指针、四种强制转换、function 和 bind、移动语\n 29. demo 级别的缓存池项目，还有对应的教程，适合新手：github - hansionz/concurrentmemorypool: 📚 一个三级缓存的高并发内存池\n 30. 适合新人，手把手教你写 webserver，但是作者很久没更新了。。：github - yuesong-feng/30daymakecppserver: 30 天自制 c++ 服务器，包含教程和源代码\n 31. 经典 webserver，1.3w star 了，惊！！ 我刚学的时候才 6k 多呢。。c++ 后端太恐怖了：github - qinguoyi/tinywebserver: 🔥 linux 下 c++ 轻量级 webserver 服务器\n\n现在的项目同质化非常严重，所以要尽量要寻找自己和其他人有核心差异点，这也是面试官重点会问到的\n\n深入学习一至两个中小规模的项目，不用贪多，因为面试时间有限，面试官通常只会专注问一两个。",charsets:{cjk:!0},lastUpdated:"2024/04/28, 17:23:46",lastUpdatedTimestamp:1714325026e3},{title:"go语言开发",frontmatter:{title:"go语言开发",date:"2024-04-27T16:28:57.000Z",author:"ethandu",permalink:"/pages/771788/"},regularPath:"/02.%E5%A5%BD%E6%96%87%E5%88%86%E4%BA%AB/02.go%E6%8C%87%E5%8D%97/01.go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91.html",relativePath:"02.好文分享/02.go指南/01.go语言开发.md",key:"v-0d0bcb1d",path:"/pages/771788/",headers:[{level:3,title:"Golang生态拓展介绍“站在巨人的肩膀上”",slug:"golang生态拓展介绍-站在巨人的肩膀上",normalizedTitle:"golang生态拓展介绍“站在巨人的肩膀上”",charIndex:57},{level:3,title:"GOPROXY",slug:"goproxy",normalizedTitle:"goproxy",charIndex:99},{level:2,title:"Golang的优势",slug:"golang的优势",normalizedTitle:"golang的优势",charIndex:430},{level:2,title:"Golang适合做什么",slug:"golang适合做什么",normalizedTitle:"golang适合做什么",charIndex:708},{level:2,title:"Golang明星作品",slug:"golang明星作品",normalizedTitle:"golang明星作品",charIndex:938},{level:2,title:"Golang的不足",slug:"golang的不足",normalizedTitle:"golang的不足",charIndex:959},{level:2,title:"main函数初见",slug:"main函数初见",normalizedTitle:"main函数初见",charIndex:1090},{level:2,title:"变量的声明",slug:"变量的声明",normalizedTitle:"变量的声明",charIndex:1984},{level:3,title:"多变量声明：",slug:"多变量声明",normalizedTitle:"多变量声明：",charIndex:2753},{level:2,title:"常量",slug:"常量",normalizedTitle:"常量",charIndex:3352},{level:3,title:"优雅的常量 iota",slug:"优雅的常量-iota",normalizedTitle:"优雅的常量 iota",charIndex:4281},{level:3,title:"自增长",slug:"自增长",normalizedTitle:"自增长",charIndex:4770},{level:3,title:"iota和表达式",slug:"iota和表达式",normalizedTitle:"iota和表达式",charIndex:4957},{level:2,title:"函数",slug:"函数",normalizedTitle:"函数",charIndex:1094},{level:3,title:"函数返回多个值",slug:"函数返回多个值",normalizedTitle:"函数返回多个值",charIndex:6676},{level:3,title:"init函数与import",slug:"init函数与import",normalizedTitle:"init函数与import",charIndex:6936},{level:3,title:"函数参数",slug:"函数参数",normalizedTitle:"函数参数",charIndex:8594},{level:5,title:"值传递",slug:"值传递",normalizedTitle:"值传递",charIndex:8665},{level:5,title:"引用传递(指针传递)",slug:"引用传递-指针传递",normalizedTitle:"引用传递(指针传递)",charIndex:9689},{level:3,title:"匿名函数和闭包",slug:"匿名函数和闭包",normalizedTitle:"匿名函数和闭包",charIndex:11057},{level:2,title:"slice和map",slug:"slice和map",normalizedTitle:"slice和map",charIndex:11941},{level:4,title:"定义切片",slug:"定义切片",normalizedTitle:"定义切片",charIndex:12076},{level:4,title:"切片初始化",slug:"切片初始化",normalizedTitle:"切片初始化",charIndex:12324},{level:4,title:"len() 和 cap() 函数",slug:"len-和-cap-函数",normalizedTitle:"len() 和 cap() 函数",charIndex:12732},{level:4,title:"空(nil)切片",slug:"空-nil-切片",normalizedTitle:"空(nil)切片",charIndex:13063},{level:4,title:"切片截取",slug:"切片截取",normalizedTitle:"切片截取",charIndex:13388},{level:4,title:"append() 和 copy() 函数",slug:"append-和-copy-函数",normalizedTitle:"append() 和 copy() 函数",charIndex:14398},{level:4,title:"map",slug:"map",normalizedTitle:"map",charIndex:11947},{level:2,title:"面向对象的特征",slug:"面向对象的特征",normalizedTitle:"面向对象的特征",charIndex:16772},{level:4,title:"方法",slug:"方法",normalizedTitle:"方法",charIndex:12770},{level:5,title:"心法",slug:"心法",normalizedTitle:"心法",charIndex:17661},{level:4,title:"方法值和方法表达式",slug:"方法值和方法表达式",normalizedTitle:"方法值和方法表达式",charIndex:17958},{level:5,title:"方法值",slug:"方法值",normalizedTitle:"方法值",charIndex:17958},{level:5,title:"方法表达式",slug:"方法表达式",normalizedTitle:"方法表达式",charIndex:17962},{level:4,title:"理清楚",slug:"理清楚",normalizedTitle:"理清楚",charIndex:21795},{level:5,title:"receiver可以使用指针",slug:"receiver可以使用指针",normalizedTitle:"receiver可以使用指针",charIndex:22740},{level:5,title:"如何判断receiver是否要用指针",slug:"如何判断receiver是否要用指针",normalizedTitle:"如何判断receiver是否要用指针",charIndex:23097},{level:2,title:"interface与类型断言",slug:"interface与类型断言",normalizedTitle:"interface与类型断言",charIndex:23440},{level:2,title:"反射reflect",slug:"反射reflect",normalizedTitle:"反射reflect",charIndex:25759},{level:4,title:"编程语言中反射的概念",slug:"编程语言中反射的概念",normalizedTitle:"编程语言中反射的概念",charIndex:25772},{level:4,title:"interface 和 反射",slug:"interface-和-反射",normalizedTitle:"interface 和 反射",charIndex:26050},{level:4,title:"Golang的反射reflect",slug:"golang的反射reflect",normalizedTitle:"golang的反射reflect",charIndex:27756},{level:4,title:"通过reflect.Value设置实际变量的值",slug:"通过reflect-value设置实际变量的值",normalizedTitle:"通过reflect.value设置实际变量的值",charIndex:31533},{level:4,title:"通过reflect.ValueOf来进行方法的调用",slug:"通过reflect-valueof来进行方法的调用",normalizedTitle:"通过reflect.valueof来进行方法的调用",charIndex:32876},{level:4,title:"Golang的反射reflect性能",slug:"golang的反射reflect性能",normalizedTitle:"golang的反射reflect性能",charIndex:34735},{level:4,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:35322},{level:4,title:"反射的基本原理",slug:"反射的基本原理",normalizedTitle:"反射的基本原理",charIndex:35871},{level:2,title:"结构体标签",slug:"结构体标签",normalizedTitle:"结构体标签",charIndex:35885},{level:2,title:"Go Modules",slug:"go-modules",normalizedTitle:"go modules",charIndex:36385},{level:4,title:"A、什么是Go Modules?",slug:"a、什么是go-modules",normalizedTitle:"a、什么是go modules?",charIndex:36399},{level:4,title:"B、GOPATH的工作模式",slug:"b、gopath的工作模式",normalizedTitle:"b、gopath的工作模式",charIndex:36679},{level:5,title:"(1) Wait is GOPATH?",slug:"_1-wait-is-gopath",normalizedTitle:"(1) wait is gopath?",charIndex:36814},{level:5,title:"(2) GOPATH模式的弊端",slug:"_2-gopath模式的弊端",normalizedTitle:"(2) gopath模式的弊端",charIndex:37302},{level:4,title:"C、Go Modules模式",slug:"c、go-modules模式",normalizedTitle:"c、go modules模式",charIndex:37679},{level:5,title:"(1) go mod命令",slug:"_1-go-mod命令",normalizedTitle:"(1) go mod命令",charIndex:37760},{level:5,title:"(2) go mod环境变量",slug:"_2-go-mod环境变量",normalizedTitle:"(2) go mod环境变量",charIndex:37778},{level:6,title:"GO111MODULE",slug:"go111module",normalizedTitle:"go111module",charIndex:37826},{level:6,title:"GOPROXY",slug:"goproxy-2",normalizedTitle:"goproxy",charIndex:99},{level:6,title:"修改goproxy",slug:"修改goproxy",normalizedTitle:"修改goproxy",charIndex:38948},{level:6,title:"GOSUMDB",slug:"gosumdb",normalizedTitle:"gosumdb",charIndex:37900},{level:6,title:"GONOPROXY/GONOSUMDB/GOPRIVATE",slug:"gonoproxy-gonosumdb-goprivate",normalizedTitle:"gonoproxy/gonosumdb/goprivate",charIndex:39491},{level:4,title:"D、使用Go Modules初始化项目",slug:"d、使用go-modules初始化项目",normalizedTitle:"d、使用go modules初始化项目",charIndex:40143},{level:5,title:"(1) 开启Go Modules",slug:"_1-开启go-modules",normalizedTitle:"(1) 开启go modules",charIndex:40166},{level:5,title:"(2) 初始化项目",slug:"_2-初始化项目",normalizedTitle:"(2) 初始化项目",charIndex:40296},{level:5,title:"(3) 查看go.mod文件",slug:"_3-查看go-mod文件",normalizedTitle:"(3) 查看go.mod文件",charIndex:41685},{level:5,title:"(4) 查看go.sum文件",slug:"_4-查看go-sum文件",normalizedTitle:"(4) 查看go.sum文件",charIndex:42148},{level:4,title:"E、修改模块的版本依赖关系",slug:"e、修改模块的版本依赖关系",normalizedTitle:"e、修改模块的版本依赖关系",charIndex:43194},{level:2,title:"goroutine",slug:"goroutine",normalizedTitle:"goroutine",charIndex:550},{level:4,title:"协程并发",slug:"协程并发",normalizedTitle:"协程并发",charIndex:44780},{level:4,title:"Go并发",slug:"go并发",normalizedTitle:"go并发",charIndex:45205},{level:4,title:"什么是Goroutine",slug:"什么是goroutine",normalizedTitle:"什么是goroutine",charIndex:45606},{level:4,title:"创建Goroutine",slug:"创建goroutine",normalizedTitle:"创建goroutine",charIndex:45897},{level:4,title:"Goroutine特性",slug:"goroutine特性",normalizedTitle:"goroutine特性",charIndex:46568},{level:4,title:"Goexit函数",slug:"goexit函数",normalizedTitle:"goexit函数",charIndex:46930},{level:2,title:"channel",slug:"channel",normalizedTitle:"channel",charIndex:45594},{level:4,title:"定义channel变量",slug:"定义channel变量",normalizedTitle:"定义channel变量",charIndex:47682},{level:4,title:"无缓冲的channel",slug:"无缓冲的channel",normalizedTitle:"无缓冲的channel",charIndex:48867},{level:4,title:"有缓冲的channel",slug:"有缓冲的channel",normalizedTitle:"有缓冲的channel",charIndex:50241},{level:4,title:"关闭channel",slug:"关闭channel",normalizedTitle:"关闭channel",charIndex:51618},{level:4,title:"单向channel及应用",slug:"单向channel及应用",normalizedTitle:"单向channel及应用",charIndex:52635},{level:2,title:"Select",slug:"select",normalizedTitle:"select",charIndex:53988},{level:4,title:"select作用",slug:"select作用",normalizedTitle:"select作用",charIndex:53998}],headersStr:"Golang生态拓展介绍“站在巨人的肩膀上” GOPROXY Golang的优势 Golang适合做什么 Golang明星作品 Golang的不足 main函数初见 变量的声明 多变量声明： 常量 优雅的常量 iota 自增长 iota和表达式 函数 函数返回多个值 init函数与import 函数参数 值传递 引用传递(指针传递) 匿名函数和闭包 slice和map 定义切片 切片初始化 len() 和 cap() 函数 空(nil)切片 切片截取 append() 和 copy() 函数 map 面向对象的特征 方法 心法 方法值和方法表达式 方法值 方法表达式 理清楚 receiver可以使用指针 如何判断receiver是否要用指针 interface与类型断言 反射reflect 编程语言中反射的概念 interface 和 反射 Golang的反射reflect 通过reflect.Value设置实际变量的值 通过reflect.ValueOf来进行方法的调用 Golang的反射reflect性能 总结 反射的基本原理 结构体标签 Go Modules A、什么是Go Modules? B、GOPATH的工作模式 (1) Wait is GOPATH? (2) GOPATH模式的弊端 C、Go Modules模式 (1) go mod命令 (2) go mod环境变量 GO111MODULE GOPROXY 修改goproxy GOSUMDB GONOPROXY/GONOSUMDB/GOPRIVATE D、使用Go Modules初始化项目 (1) 开启Go Modules (2) 初始化项目 (3) 查看go.mod文件 (4) 查看go.sum文件 E、修改模块的版本依赖关系 goroutine 协程并发 Go并发 什么是Goroutine 创建Goroutine Goroutine特性 Goexit函数 channel 定义channel变量 无缓冲的channel 有缓冲的channel 关闭channel 单向channel及应用 Select select作用",content:'https://www.yuque.com/aceld/mo95lb/haizwm\n\n\n# 一、引言\n\n\n\n\n# Golang生态拓展介绍“站在巨人的肩膀上”\n\n\n\n\n# 二、go开发环境\n\n\n# GOPROXY\n\nGo1.14版本之后，都推荐使用go mod模式来管理依赖了，也不再强制我们把代码必须写在GOPATH下面的src目录了，你可以在你电脑的任意位置编写go代码。\n\n默认GoPROXY配置是：GOPROXY=https://proxy.golang.org,direct， 由于国内访问不到 https://proxy.golang.org 所以我们需要换一个PROXY，这里推荐使用https://goproxy.io 或 https://goproxy.cn。\n\n可以执行下面的命令修改GOPROXY：\n\n`go env -w GOPROXY=https://goproxy.cn,direct`\n\n\n\n# 三、Golang语言特性\n\n\n# Golang的优势\n\n\n\n\n\n(和动态类型的js不同)\n\n\n\n\n\npackage main\n  \nimport (\n    "fmt"\n    "time"\n)\n\nfunc goFunc(i int) {\n    fmt.Println("goroutine ", i, " ...")\n}\n\nfunc main() {\n    for i := 0; i < 10000; i++ {\n        go goFunc(i) //开启一个并发协程\n    }\n\n    time.Sleep(time.Second)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Golang适合做什么\n\n(1)、云计算基础设施领域\n\n代表项目：docker、kubernetes、etcd、consul、cloudflare CDN、七牛云存储等。\n\n(2)、基础后端软件\n\n代表项目：tidb、influxdb、cockroachdb等。\n\n(3)、微服务\n\n代表项目：go-kit、micro、monzo bank的typhon、bilibili等。\n\n(4)、互联网基础设施\n\n代表项目：以太坊、hyperledger等。\n\n\n# Golang明星作品\n\n\n\n\n\n\n\n\n# Golang的不足\n\n1、包管理，大部分包都在github上\n\n2、无泛化类型\n\n3、所有Excepiton都用Error来处理(比较有争议)。\n\n4、对C的降级处理，并非无缝，没有C降级到asm那么完美(序列化问题)\n\n\n# 四、Golang语法新奇\n\n\n# main函数初见\n\npackage main\n\n\n  import "fmt"\n\n\n  func main() {\n          /* 简单的程序 万能的hello world */\n          fmt.Println("Hello Go")\n  }\n\n\n$ go run test1_hello.go \nHello Go\n$\n\n\n\n\ngo run 表示 直接编译go语言并执行应用程序，一步完成\n\n你也可以先编译，然后再执行\n\n\n\n * 第一行代码package main定义了包名。你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。\n * 下一行**import "fmt"**告诉 Go 编译器这个程序需要使用 fmt 包（的函数，或其他元素），fmt 包实现了格式化 IO（输入/输出）的函数。\n * 下一行func main()是程序开始执行的函数。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。\n\n注意：这里面go语言的语法，定义函数的时候，‘{’ 必须和函数名在同一行，不能另起一行。(这个按照java的规范就ok了)\n\n * 下一行 /.../ 是注释，在程序执行时将被忽略。单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 / 开头，并以 / 结尾，且不可以嵌套使用，多行注释一般用于包的文档描述或注释成块的代码片段。\n * 下一行fmt.Println(...)可以将字符串输出到控制台，并在最后自动增加换行字符 \\n。 使用 fmt.Print("hello, world\\n") 可以得到相同的结果。 Print 和 Println 这两个函数也支持使用变量，如：fmt.Println(arr)。如果没有特别指定，它们会以默认的打印格式将变量 arr 输出到控制台。\n\n\n# 变量的声明\n\n声明变量的一般形式是使用 var 关键字\n\n变量声明\n\n第一种，指定变量类型，声明后若不赋值，使用默认值0。(不赋值的话，实际上就是js的声明方式再加上type约束)\n\nvar v_name v_type\nv_name = value\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n        var a int\n        fmt.Printf(" = %d\\n", a)\n}\n\n\n$go run test.go\na = 0\n\n\n第二种，根据值自行判定变量类型。\n\nvar v_name = value\n\n\n第三种，省略var, 注意 :=左侧的变量不应该是已经声明过的，否则会导致编译错误。\n\n:=声明 go语言特产\n\nv_name := value\n\n\n// 例如\nvar a int = 10\nvar b = 10\nc : = 10\n\n\n例如：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n        //第一种 使用默认值\n        var a int\n        fmt.Printf("a = %d\\n", a)\n\n\n        //第二种\n        var b int = 10\n        fmt.Printf("b = %d\\n", b)\n\n\n        //第三种 省略后面的数据类型,自动匹配类型\n        var c = 20\n        fmt.Printf("c = %d\\n", c)\n\n\n        //第四种 省略var关键字\n        d := 3.14\n        fmt.Printf("d = %f\\n", d)\n}\n\n\n\n# 多变量声明：\n\nvar(\n\na int\n\nb bool\n\n)\n\n这种写法多用于全局变量声明。并且注意中间不需要加”，“或者”；“只需要换行就好了，然后注意到，go语言好像就不需要写";"\n\npackage main\n\n\nimport "fmt"\n\n\nvar x, y int\nvar ( //这种分解的写法,一般用于声明全局变量\n        a int\n        b bool\n)\n\n\nvar c, d int = 1, 2\nvar e, f = 123, "liudanbing"\n\n\n//这种不带声明格式的只能在函数体内声明\n//g, h := 123, "需要在func函数体内实现"\n\n\nfunc main() {\n        g, h := 123, "需要在func函数体内实现"\n        fmt.Println(x, y, a, b, c, d, e, f, g, h)\n\n\n        //不能对g变量再次做初始化声明\n        //g := 400\n\n\n        _, value := 7, 5  //实际上7的赋值被废弃，变量 _  不具备读特性\n        //fmt.Println(_) //_变量的是读不出来的\n        fmt.Println(value) //5\n}\n\n\n这样的写法就和python很像了！\n\n\n# 常量\n\n常量是一个简单值的标识符，在程序运行时，不会被修改的量。\n\n常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。\n\n常量的定义格式：\n\nconst identifier [type] = value\n\n\n你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。\n\n * 显式类型定义：\n\nconst b string = "abc"\n\n\n * 隐式类型定义：\n\nconst b = "abc"\n\n\n例如：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   const LENGTH int = 10\n   const WIDTH int = 5   \n   var area int\n   const a, b, c = 1, false, "str" //多重赋值\n\n\n   area = LENGTH * WIDTH\n   fmt.Printf("面积为 : %d\\n", area)\n   println(a, b, c)   \n}\n\n\n以上实例运行结果为：\n\n面积为 : 50\n1 false str\n\n\n常量还可以用作枚举：\n\nconst (\n    Unknown = 0\n    Female = 1\n    Male = 2\n)\n\n\n数字 0、1 和 2 分别代表未知性别、女性和男性。\n\n常量可以用len(), cap(), unsafe.Sizeof()常量计算表达式的值。常量表达式中，函数必须是内置函数，否则编译不过：\n\npackage main\n\n\nimport "unsafe"\nconst (\n    a = "abc"\n    b = len(a)\n    c = unsafe.Sizeof(a)\n)\n\n\nfunc main(){\n    println(a, b, c)\n}\n\n\n输出结果为：abc, 3, 16\n\n> unsafe.Sizeof(a)输出的结果是16 。\n> \n> 字符串类型在 go 里是个结构, 包含指向底层数组的指针和长度,这两部分每部分都是 8 个字节，所以字符串类型大小为 16 个字节。\n\n\n# 优雅的常量 iota\n\n有些概念有名字，并且有时候我们关注这些名字，甚至（特别）是在我们代码中。\n\nconst (\n    CCVisa            = "Visa"\n    CCMasterCard      = "MasterCard"\n    CCAmericanExpress = "American Express"\n)\n\n\n在其他时候，我们仅仅关注能把一个东西与其他的做区分。有些时候，有些时候一件事没有本质上的意义。比如，我们在一个数据库表中存储产品，我们可能不想以 string 存储他们的分类。我们不关注这个分类是怎样命名的，此外，该名字在市场上一直在变化。\n\n我们仅仅关注它们是怎么彼此区分的。\n\nconst (\n    CategoryBooks    = 0\n    CategoryHealth   = 1\n    CategoryClothing = 2\n)\n\n\n使用 0, 1, 和 2 代替，我们也可以选择 17， 43， 和 61。这些值是任意的。\n\n在 Go，常量有许多微妙之处。当用好了，可以使得代码非常优雅且易维护的。\n\n\n# 自增长\n\n在 golang 中，一个方便的习惯就是使用iota标示符，它简化了常量用于增长数字的定义，给以上相同的值以准确的分类。\n\nconst (\n    CategoryBooks = iota // 0\n    CategoryHealth       // 1\n    CategoryClothing     // 2\n)\n\n\n(可能这种写法比较优雅吧)\n\n\n# iota和表达式\n\niota可以做更多事情，而不仅仅是 increment。更精确地说，iota总是用于 increment，但是它可以用于表达式，在常量中的存储结果值。\n\ntype Allergen int\n\n\nconst (\n    IgEggs Allergen = 1 << iota         // 1 << 0 which is 00000001\n    IgChocolate                         // 1 << 1 which is 00000010\n    IgNuts                              // 1 << 2 which is 00000100\n    IgStrawberries                      // 1 << 3 which is 00001000\n    IgShellfish                         // 1 << 4 which is 00010000\n)\n\n\n（常量的声明中运用了iota放在表达式的写法，实际上在这个一行行声明的过程中，iota在increment，并且其它的常量都遵循这个表达式的规则。于是常量中实际存的式表达式的结果值）\n\n（iota的自增性质用于区分概念常量）\n\n这个工作是因为当你在一个const组中仅仅有一个标示符在一行的时候，它将使用增长的iota取得前面的表达式并且再运用它，。在 Go 语言的spec中， 这就是所谓的隐性重复最后一个非空的表达式列表.\n\n如果你对鸡蛋，巧克力和海鲜过敏，把这些 bits 翻转到 “on” 的位置（从左到右映射 bits）。然后你将得到一个 bit 值00010011，它对应十进制的 19。\n\nfmt.Println(IgEggs | IgChocolate | IgShellfish)\n\n\n// output:\n// 19\ntype ByteSize float64\n\n\nconst (\n    _           = iota                   // ignore first value by assigning to blank identifier\n    KB ByteSize = 1 << (10 * iota)       // 1 << (10*1)\n    MB                                   // 1 << (10*2)\n    GB                                   // 1 << (10*3)\n    TB                                   // 1 << (10*4)\n    PB                                   // 1 << (10*5)\n    EB                                   // 1 << (10*6)\n    ZB                                   // 1 << (10*7)\n    YB                                   // 1 << (10*8)\n)\n\n\n当你在把两个常量定义在一行的时候会发生什么？\n\nBanana 的值是什么？ 2 还是 3？ Durian 的值又是？\n\nconst (\n    Apple, Banana = iota + 1, iota + 2\n    Cherimoya, Durian\n    Elderberry, Fig\n)\n\n\n在下一行增长，而不是立即取得它的引用。（这里说明引用的概念是可以套用的）\n\n// Apple: 1\n// Banana: 2\n// Cherimoya: 2\n// Durian: 3\n// Elderberry: 3\n// Fig: 4\n\n\n(iota是编译器编译的时候是按照行自增规则来的)\n\n\n# 函数\n\n\n# 函数返回多个值\n\nGo 函数可以返回多个值，例如：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc swap(x, y string) (string, string) {\n   return y, x\n}\n\n\nfunc main() {\n   a, b := swap("Mahesh", "Kumar")\n   fmt.Println(a, b)\n}\n\n\n以上实例执行结果为：\n\nKumar Mahesh\n\n(这个swap的写法讲实话还是挺骚的。。。)\n\n(这个写法py好像也能写)\n\n\n# init函数与import\n\n首先我们看一个例子：init函数：\n\ninit 函数可在package main中，可在其他package中，可在同一个package中出现多次。\n\nmain函数\n\nmain 函数只能在package main中。\n\n执行顺序\n\ngolang里面有两个保留的函数：init函数（能够应用于所有的package）和main函数（只能应用于package main）。这两个函数在定义时不能有任何的参数和返回值。\n\n虽然一个package里面可以写任意多个init函数，但这无论是对于可读性还是以后的可维护性来说，我们都强烈建议用户在一个package中每个文件只写一个init函数。\n\ngo程序会自动调用init()和main()，所以你不需要在任何地方调用这两个函数。每个package中的init函数都是可选的，但package main就必须包含一个main函数。\n\n程序的初始化和执行都起始于main包。\n\n如果main包还导入了其它的包，那么就会在编译时将它们依次导入。有时一个包会被多个包同时导入，那么它只会被导入一次（例如很多包可能都会用到fmt包，但它只会被导入一次，因为没有必要导入多次）。\n\n当一个包被导入时，如果该包还导入了其它的包，那么会先将其它包导入进来，然后再对这些包中的包级常量和变量进行初始化，接着执行init函数（如果有的话），依次类推。\n\n等所有被导入的包都加载完毕了，就会开始对main包中的包级常量和变量进行初始化，然后执行main包中的init函数（如果存在的话），最后执行main函数。下图详细地解释了整个执行过程：\n\n\n\n(包管理的概念，这个跟nodejs是一样的。Java的Spring则是用的ioc容器。)\n\n除了main包是执行完import然后是声明式然后执行init()->main()函数的逻辑\n\n其它的包都是执行完import然后是声明式然后是init()\n\n（这里的init()如果在nodeJS的概念中有可能是go自动调用的export？）\n\n首先我们看一个例子：\n\n代码结构：\n\n\n\nLib1.go\n\npackage InitLib1\n\nimport "fmt"\n\nfunc init() {\n    fmt.Println("lib1")\n}\n\n\nLib2.go\n\npackage InitLib2\n\nimport "fmt"\n\nfunc init() {\n    fmt.Println("lib2")\n}\n\n\nmain.go\n\npackage main\n\nimport (\n    "fmt"\n    _ "GolangTraining/InitLib1"\n    _ "GolangTraining/InitLib2"\n)\n\nfunc init() {\n    fmt.Println("libmain init")\n}\n\nfunc main() {\n    fmt.Println("libmian main")\n}\n\n\n代码很简单，只是一些简单的输出\n\nlib1\nlib2\nlibmain init\nlibmian main\n\n\n输出的顺序与我们上面图给出的顺序是一致的\n\n那我们现在就改动一个地方，Lib1包导入Lib2，main包不管\n\npackage InitLib1\n\nimport (\n    "fmt"\n    _ "GolangTraining/InitLib2"\n)\n\nfunc init() {\n    fmt.Println("lib1")\n}\n\n\n输出：\n\nlib2\nlib1\nlibmain init\nlibmian main\n\n\nmain包以及Lib1包都导入了Lib2，但是只出现一次，并且最先输出，\n\n==说明如果一个包会被多个包同时导入，那么它只会被导入一次，而先输出lib2是因为main包中导入Lib1时，Lib1又导入了Lib2，会首先初始化Lib2包的东西==\n\n\n# 函数参数\n\n函数如果使用参数，该变量可称为函数的形参。\n\n形参就像定义在函数体内的局部变量。\n\n调用函数，可以通过两种方式来传递参数：\n\n# 值传递\n\n值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。\n\n默认情况下，Go 语言使用的是值传递，即在调用过程中不会影响到实际参数。\n\n（Java中只有值传递，只是对象（的引用）作为参数的时候传递过去的值是地址值，然后函数形参本身和对象（的引用）的地位相同，接受它的值，然后实际也是得到了对象的引用。我习惯理解成引用也是对象，值存的就是真实对象的地址值。\n\n而放到基本类型（包括String）来看就没这么麻烦了，就是传值（普遍意义上的）而已（传递了值得拷贝）\n\n）\n\n以下定义了 swap() 函数：\n\n/* 定义相互交换值的函数 */\nfunc swap(x, y int) int {\n   var temp int\n\n\n   temp = x /* 保存 x 的值 */\n   x = y    /* 将 y 值赋给 x */\n   y = temp /* 将 temp 值赋给 y*/\n\n\n   return temp;\n}\n\n\n接下来，让我们使用值传递来调用 swap() 函数：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   /* 定义局部变量 */\n   var a int = 100\n   var b int = 200\n\n\n   fmt.Printf("交换前 a 的值为 : %d\\n", a )\n   fmt.Printf("交换前 b 的值为 : %d\\n", b )\n\n\n   /* 通过调用函数来交换值 */\n   swap(a, b)\n\n\n   fmt.Printf("交换后 a 的值 : %d\\n", a )\n   fmt.Printf("交换后 b 的值 : %d\\n", b )\n}\n\n\n/* 定义相互交换值的函数 */\nfunc swap(x, y int) int {\n   var temp int\n\n\n   temp = x /* 保存 x 的值 */\n   x = y    /* 将 y 值赋给 x */\n   y = temp /* 将 temp 值赋给 y*/\n\n\n   return temp;\n}\n\n\n以下代码执行结果为：\n\n交换前 a 的值为 : 100\n\n\n\n交换前 b 的值为 : 200\n\n\n\n交换后 a 的值 : 100\n\n\n\n交换后 b 的值 : 200\n\n\n# 引用传递(指针传递)\n\n指针\n\nGo 语言中指针是很容易学习的，Go 语言中使用指针可以更简单的执行一些任务。\n\n接下来让我们来一步步学习 Go 语言指针。\n\n我们都知道，变量是一种使用方便的占位符，用于引用计算机内存地址。\n\nGo 语言的取地址符是 &，放到一个变量前使用就会返回相应变量的内存地址。\n\n以下实例演示了变量在内存中地址：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   var a int = 10   \n\n\n   fmt.Printf("变量的地址: %x\\n", &a  )\n}\n\n\n执行以上代码输出结果为：\n\n变量的地址: 20818a220\n\n\n现在我们已经了解了什么是内存地址和如何去访问它。接下来我们将具体介绍指针。\n\n引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。\n\n引用传递指针参数传递到函数内，以下是交换函数 swap() 使用了引用传递：\n\n/* 定义交换值函数*/\nfunc swap(x *int, y *int) {\n   var temp int\n   temp = *x    /* 保持 x 地址上的值 */\n   *x = *y      /* 将 y 值赋给 x */\n   *y = temp    /* 将 temp 值赋给 y */\n}\n\n\n以下我们通过使用引用传递来调用 swap() 函数：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   /* 定义局部变量 */\n   var a int = 100\n   var b int= 200\n\n\n   fmt.Printf("交换前，a 的值 : %d\\n", a )\n   fmt.Printf("交换前，b 的值 : %d\\n", b )\n\n\n   /* 调用 swap() 函数\n   * &a 指向 a 指针，a 变量的地址\n   * &b 指向 b 指针，b 变量的地址\n   */\n   swap(&a, &b)\n\n\n   fmt.Printf("交换后，a 的值 : %d\\n", a )\n   fmt.Printf("交换后，b 的值 : %d\\n", b )\n}\n\n\nfunc swap(x *int, y *int) {\n   var temp int\n   temp = *x    /* 保存 x 地址上的值 */\n   *x = *y      /* 将 y 值赋给 x */\n   *y = temp    /* 将 temp 值赋给 y */\n}\n\n\n(Java中由于只有传值，所以想做到和它们这种支持传址（传引用）的语言相比就麻烦些。需要用到数组等对象辅助)\n\n(传值就是形参获取实参的值的拷贝。传址就是形参获取实参的地址，直接对地址操作)\n\n//交换两个整数\nprivate static void swap(int[] source, int i, int j) {\n\n    int temp = source[i];\n    source[i] = source[j];\n    source[j] = temp;\n}\n\n\n\n# 匿名函数和闭包\n\n详细解释：\n\n在Go语言中匿名函数和闭包是一个概念：\n\n闭包是可以包含自由（未绑定到特定对象）变量的代码块，这些变量不在这个代码块内或者 任何全局上下文中定义，而是在定义代码块的环境中定义。要执行的代码块（由于自由变量包含 在代码块中，所以这些自由变量以及它们引用的对象没有被释放）为自由变量提供绑定的计算环 境（作用域）。\n\n闭包的价值: 闭包的价值在于可以作为函数对象或者匿名函数，对于类型系统而言，这意味着不仅要表示 数据还要表示代码。支持闭包的多数语言都将函数作为第一级对象，就是说这些函数可以存储到 变量中作为参数传递给其他函数，最重要的是能够被函数动态创建和返回。(总的来说就是可以使用匿名函数返回，匿名函数层层依赖到外面的变量)\n\nGo语言中的闭包同样也会引用到函数外的变量。闭包的实现确保只要闭包还被使用，那么被闭包引用的变量会一直存在。\n\n例子：\n\nGo 函数可以是一个闭包。闭包是一个函数值（就是return的那个玩意），它引用了其函数体之外的变量（adder()中的sum）。该函数可以访问并赋予其引用的变量的值(sum)，换句话说，该函数（匿名的函数）被这些变量（sum）“绑定”在一起。\n\n例如，函数 adder 返回一个闭包。每个闭包都被绑定在其各自的 sum 变量上。\n\npackage main\n\n\nfunc adder() func(int) int {\n\tsum := 0\n\treturn func(x int) int {\n\t\tsum += x\n\t\treturn sum\n\t}\n}\n\nfunc main() {\n\tpos, neg := adder(), adder()\n\tfor i := 0; i < 10; i++ {\n\t\tfmt.Println(\n\t\t\tpos(i),\n\t\t\tneg(-2*i),\n\t\t)\n\t}\n}import "fmt"\n\n\n这里就可以很好的理解我们刚才的解释了，在函数addr()中，sum这个变量就被”包“在了另一个匿名函数中了。这个匿名函数就是我们上面的自由变量的概念。\n\n\n# slice和map\n\n==Go 语言切片是对数组的抽象。==\n\nGo 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go中提供了一种灵活，功能强悍的内置类型切片("动态数组"),与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。\n\n# 定义切片\n\n你可以声明一个未指定大小的数组来定义切片：\n\nvar identifier []type\n\n\n切片不需要说明长度。\n\n或使用make()函数来创建切片:\n\nvar slice1 []type = make([]type, len)\n\n\n也可以简写为\n\n\nslice1 := make([]type, len)\n\n\n也可以指定容量，其中capacity为可选参数。\n\nmake([]T, length, capacity)\n\n\n这里 len 是数组的长度并且也是切片的初始长度。\n\n# 切片初始化\n\ns :=[] int {1,2,3 }\n\n\n直接初始化切片，[]表示是切片类型，{1,2,3}初始化值依次是1,2,3.其cap=len=3\n\ns := arr[:]\n\n\n初始化切片s,是数组arr的引用\n\ns := arr[startIndex:endIndex]\n\n\n将arr中从下标startIndex到endIndex-1 下的元素创建为一个新的切片\n\ns := arr[startIndex:]\n\n\n缺省endIndex时将表示一直到arr的最后一个元素\n\ns := arr[:endIndex]\n\n\n缺省startIndex时将表示从arr的第一个元素开始\n\ns1 := s[startIndex:endIndex]\n\n\n通过切片s初始化切片s1\n\ns :=make([]int,len,cap)\n\n\n通过内置函数make()初始化切片s,[]int 标识为其元素类型为int的切片\n\n# len() 和 cap() 函数\n\n切片是可索引的，并且可以由 len() 方法获取长度。\n\n切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。\n\n以下为具体实例：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   var numbers = make([]int,3,5)\n\n\n   printSlice(numbers)\n}\n\n\nfunc printSlice(x []int){\n   fmt.Printf("len=%d cap=%d slice=%v\\n",len(x),cap(x),x)\n}\n\n\n以上实例运行输出结果为:\n\nlen=3 cap=5 slice=[0 0 0]\n\n\n# 空(nil)切片\n\n一个切片在未初始化之前默认为 nil，长度为 0，实例如下：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   var numbers []int\n\n\n   printSlice(numbers)\n\n\n   if(numbers == nil){\n      fmt.Printf("切片是空的")\n   }\n}\n\n\nfunc printSlice(x []int){\n   fmt.Printf("len=%d cap=%d slice=%v\\n",len(x),cap(x),x)\n}\n\n\n以上实例运行输出结果为:\n\nlen=0 cap=0 slice=[]\n切片是空的\n\n\n# 切片截取\n\n可以通过设置下限及上限来设置截取切片*[lower-bound:upper-bound]*，实例如下：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   /* 创建切片 */\n   numbers := []int{0,1,2,3,4,5,6,7,8}   \n   printSlice(numbers)\n\n\n   /* 打印原始切片 */\n   fmt.Println("numbers ==", numbers)\n\n\n   /* 打印子切片从索引1(包含) 到索引4(不包含)*/\n   fmt.Println("numbers[1:4] ==", numbers[1:4])\n\n\n   /* 默认下限为 0*/\n   fmt.Println("numbers[:3] ==", numbers[:3])\n\n\n   /* 默认上限为 len(s)*/\n   fmt.Println("numbers[4:] ==", numbers[4:])\n\n\n   numbers1 := make([]int,0,5)\n   printSlice(numbers1)\n\n\n   /* 打印子切片从索引  0(包含) 到索引 2(不包含) */\n   number2 := numbers[:2]\n   printSlice(number2)\n\n\n   /* 打印子切片从索引 2(包含) 到索引 5(不包含) */\n   number3 := numbers[2:5]\n   printSlice(number3)\n\n\n}\n\n\nfunc printSlice(x []int){\n   fmt.Printf("len=%d cap=%d slice=%v\\n",len(x),cap(x),x)\n}\n\n\n执行以上代码输出结果为：\n\nlen=9 cap=9 slice=[0 1 2 3 4 5 6 7 8]\nnumbers == [0 1 2 3 4 5 6 7 8]\nnumbers[1:4] == [1 2 3]\nnumbers[:3] == [0 1 2]\nnumbers[4:] == [4 5 6 7 8]\nlen=0 cap=5 slice=[]\nlen=2 cap=9 slice=[0 1]\nlen=3 cap=7 slice=[2 3 4]\n\n\n# append() 和 copy() 函数\n\n如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。\n\n下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法。\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   var numbers []int\n   printSlice(numbers)\n\n\n   /* 允许追加空切片 */\n   numbers = append(numbers, 0)\n   printSlice(numbers)\n\n\n   /* 向切片添加一个元素 */\n   numbers = append(numbers, 1)\n   printSlice(numbers)\n\n\n   /* 同时添加多个元素 */\n   numbers = append(numbers, 2,3,4)\n   printSlice(numbers)\n\n\n   /* 创建切片 numbers1 是之前切片的两倍容量*/\n   numbers1 := make([]int, len(numbers), (cap(numbers))*2)\n\n\n   /* 拷贝 numbers 的内容到 numbers1 */\n   copy(numbers1,numbers)\n   printSlice(numbers1)   \n}\n\n\nfunc printSlice(x []int){\n   fmt.Printf("len=%d cap=%d slice=%v\\n",len(x),cap(x),x)\n}\n\n\n以上代码执行输出结果为：\n\nlen=0 cap=0 slice=[]\nlen=1 cap=1 slice=[0]\nlen=2 cap=2 slice=[0 1]\nlen=5 cap=6 slice=[0 1 2 3 4]\nlen=5 cap=12 slice=[0 1 2 3 4]\n\n\n# map\n\nmap和slice类似，只不过是数据结构不同，下面是map的一些声明方式。\n\npackage main\nimport (\n    "fmt"\n)\n\nfunc main() {\n    //第一种声明\n    var test1 map[string]string\n    //在使用map前，需要先make，make的作用就是给map分配数据空间\n    test1 = make(map[string]string, 10) \n    test1["one"] = "php"\n    test1["two"] = "golang"\n    test1["three"] = "java"\n    fmt.Println(test1) //map[two:golang three:java one:php]\n\n\n    //第二种声明\n    test2 := make(map[string]string)\n    test2["one"] = "php"\n    test2["two"] = "golang"\n    test2["three"] = "java"\n    fmt.Println(test2) //map[one:php two:golang three:java]\n\n    //第三种声明\n    test3 := map[string]string{\n        "one" : "php",\n        "two" : "golang",\n        "three" : "java",\n    }\n    fmt.Println(test3) //map[one:php two:golang three:java]\n\n\n    \n    language := make(map[string]map[string]string)\n    language["php"] = make(map[string]string, 2)\n    language["php"]["id"] = "1"\n    language["php"]["desc"] = "php是世界上最美的语言"\n    language["golang"] = make(map[string]string, 2)\n    language["golang"]["id"] = "2"\n    language["golang"]["desc"] = "golang抗并发非常good"\n    \n    fmt.Println(language) //map[php:map[id:1 desc:php是世界上最美的语言] golang:map[id:2 desc:golang抗并发非常good]]\n\n\n    //增删改查\n    // val, key := language["php"]  //查找是否有php这个子元素\n    // if key {\n    //     fmt.Printf("%v", val)\n    // } else {\n    //     fmt.Printf("no");\n    // }\n\n    //language["php"]["id"] = "3" //修改了php子元素的id值\n    //language["php"]["nickname"] = "啪啪啪" //增加php元素里的nickname值\n    //delete(language, "php")  //删除了php子元素\n    fmt.Println(language)\n}\n\n\n\n# 面向对象的特征\n\n# 方法\n\n假设有两个方法，一个方法的接收者是指针类型，一个方法的接收者是值类型，那么：\n\n * 对于值类型的变量和指针类型的变量，这两个方法有什么区别？\n * 如果这两个方法是为了实现一个接口，那么这两个方法都可以调用吗？\n * 如果方法是嵌入到其他结构体中的，那么上面两种情况又是怎样的？\n\npackage main\n\n\nimport "fmt"\n\n\n//定义一个结构体\ntype T struct {\n    name string\n}\n\n\nfunc (t T) method1() {\n    t.name = "new name1"\n}\n\n\nfunc (t *T) method2() {\n    t.name = "new name2"\n}\n\n\nfunc main() {\n\n\n    t := T{"old name"}\n\n\n    fmt.Println("method1 调用前 ", t.name)\n    t.method1()\n    fmt.Println("method1 调用后 ", t.name)\n\n\n    fmt.Println("method2 调用前 ", t.name)\n    t.method2()\n    fmt.Println("method2 调用后 ", t.name)\n}\n\n\nmethod1 调用前  old name\nmethod1 调用后  old name\nmethod2 调用前  old name\nmethod2 调用后  new name2\n\n\n当调用t.method1()时相当于method1(t)，实参和行参都是类型 T，可以接受。此时在method1()中的t只是参数t的值拷贝，所以method1()的修改影响不到main中的t变量。\n\n当调用t.method2()=>method2(t)，这是将 T 类型传给了 *T 类型，go可能会取 t 的地址传进去：method2(&t)。所以 method1() 的修改可以影响 t。\n\nT 类型的变量这两个方法都是拥有的。\n\n# 心法\n\n(这里想用Java的方式理解可能会比较困难。毕竟go和js的自定义类一样都是不被class结构给约束的，这里可以看出，正常的成员变量声明还是放在结构里面的。然后方法参考js，对象是通过原型，直接无中生有一个引用来接收方法对象。所以实际上我们可以想到只要给了方法类型的对象的地址就好了，这样就能操作对象里面的成员了。怎么个给法就是语法问题。==所以感觉golang编程的时候不用太关心类和对象的概念，只需要清楚你想达到这种效果需要什么条件，然后按照语法把条件给它，最后达到的效果实际上每个语言都是一样的==)\n\n(==然后这里点名表扬一下java是可以做到完全带着概念编程的==)\n\n# 方法值和方法表达式\n\n# 方法值\n\n我们经常选择一个方法，并且在同一个表达式里执行，比如常见的p.Distance()形式，实际上将其分成两步来执行也是可能的。p.Distance叫作“选择器”，\n\n选择器会返回一个方法"值"\n\n一个将方法(Point.Distance)绑定到特定接收器变量的函数。\n\n这个函数可以不通过指定其接收器即可被调用；即调用时不需要指定接收器，只要传入函数的参数即可：\n\npackage main\n\n\nimport "fmt"\nimport "math"\n\n\ntype Point struct{ X, Y float64 }\n\n\n//这是给struct Point类型定义一个方法\nfunc (p Point) Distance(q Point) float64 {\n    return math.Hypot(q.X-p.X, q.Y-p.Y)\n}\n\n\nfunc main() {\n\n\n    p := Point{1, 2}\n    q := Point{4, 6}\n\n\n    distanceFormP := p.Distance   // 方法值(相当于C语言的函数地址,函数指针)\n    fmt.Println(distanceFormP(q)) // "5"\n    fmt.Println(p.Distance(q))    // "5"\n\n\n    //实际上distanceFormP 就绑定了 p接收器的方法Distance\n\n\n    distanceFormQ := q.Distance   //\n    fmt.Println(distanceFormQ(p)) // "5"\n    fmt.Println(q.Distance(p))    // "5"\n\n\n    //实际上distanceFormQ 就绑定了 q接收器的方法Distance\n}\n\n\n在一个包的API需要一个函数值、且调用方希望操作的是某一个绑定了对象的方法的话，方法"值"会非常实用.\n\n举例来说，下面例子中的time.AfterFunc这个函数的功能是在指定的延迟时间之后来执行一个(译注：另外的)函数。且这个函数操作的是一个Rocket对象r\n\ntype Rocket struct { /* ... */ }\nfunc (r *Rocket) Launch() { /* ... */ }\nr := new(Rocket)\ntime.AfterFunc(10 * time.Second, func() { r.Launch() })\n\n\n直接用方法"值"传入AfterFunc的话可以更为简短：\n\ntime.AfterFunc(10 * time.Second, r.Launch)\n\n\n省掉了上面那个例子里的匿名函数。\n\n(嘛，这个方法"值"的概念感觉吹的有点花哨了，实际上就是可以理解成是方法对象嘛，选择器不就是方法对象的引用名嘛,只是清楚这个选择器是主动自动返回方法"值"的就行)\n\n# 方法表达式\n\n和方法"值"相关的还有方法表达式。当调用一个方法时，与调用一个普通的函数相比，我们必须要用选择器(p.Distance)语法来指定方法的接收器。\n\n当T是一个类型时，方法表达式可能会写作T.f或者(*T).f，会返回一个函数"值"，这种函数会将其第一个参数用作接收器，所以可以用通常(译注：不写选择器)的方式来对其进行调用：\n\npackage main\n\n\nimport "fmt"\nimport "math"\n\n\ntype Point struct{ X, Y float64 }\n\n\n//这是给struct Point类型定义一个方法\nfunc (p Point) Distance(q Point) float64 {\n    return math.Hypot(q.X-p.X, q.Y-p.Y)\n}\n\n\nfunc main() {\n\n\n    p := Point{1, 2}\n    q := Point{4, 6}\n\n\n\n\n    distance1 := Point.Distance //方法表达式, 是一个函数值(相当于C语言的函数指针)\n    fmt.Println(distance1(p, q))\n    fmt.Printf("%T\\n", distance1) //%T表示打出数据类型 ,这个必须放在Printf使用\n\n\n    distance2 := (*Point).Distance //方法表达式,必须传递指针类型\n    distance2(&p, q)\n    fmt.Printf("%T\\n", distance2)\n\n\n}\n\n\n执行结果\n\n5\nfunc(main.Point, main.Point) float64\nfunc(*main.Point, main.Point) float64\n// 这个Distance实际上是指定了Point对象为接收器的一个方法func (p Point) Distance()，\n// 但通过Point.Distance得到的函数需要比实际的Distance方法多一个参数，\n// 即其需要用第一个额外参数指定接收器，后面排列Distance方法的参数。\n// 看起来本书中函数和方法的区别是指有没有接收器，而不像其他语言那样是指有没有返回值。\n\n\n当你根据一个变量来决定调用同一个类型的哪个函数时，方法表达式就显得很有用了。你可以根据选择来调用接收器各不相同的方法。下面的例子，变量op代表Point类型的addition或者subtraction方法，Path.TranslateBy方法会为其Path数组中的每一个Point来调用对应的方法：\n\npackage main\n\n\nimport "fmt"\nimport "math"\n\n\ntype Point struct{ X, Y float64 }\n\n\n//这是给struct Point类型定义一个方法\nfunc (p Point) Distance(q Point) float64 {\n        return math.Hypot(q.X-p.X, q.Y-p.Y)\n}\n\n\nfunc (p Point) Add(another Point) Point {\n        return Point{p.X + another.X, p.Y + another.Y}\n}\n\n\nfunc (p Point) Sub(another Point) Point {\n        return Point{p.X - another.X, p.Y - another.Y}\n}\n\n\nfunc (p Point) Print() {\n        fmt.Printf("{%f, %f}\\n", p.X, p.Y)\n}\n\n\n//定义一个Point切片类型 Path\ntype Path []Point\n\n\n//方法的接收器 是Path类型数据, 方法的选择器是TranslateBy(Point, bool)\nfunc (path Path) TranslateBy(another Point, add bool) {\n        var op func(p, q Point) Point //定义一个 op变量 类型是方法表达式 能够接收Add,和 Sub方法\n        if add == true {\n                op = Point.Add //给op变量赋值为Add方法\n        } else {\n                op = Point.Sub //给op变量赋值为Sub方法\n        }\n\n\n        for i := range path {\n                //调用 path[i].Add(another) 或者 path[i].Sub(another)\n                path[i] = op(path[i], another)\n                path[i].Print()\n        }\n}\n\n\nfunc main() {\n\n        points := Path{\n                {10, 10},\n                {11, 11},\n        }\n\n\n        anotherPoint := Point{5, 5}\n\n\n        points.TranslateBy(anotherPoint, false)\n\n\n        fmt.Println("------------------")\n\n\n        points.TranslateBy(anotherPoint, true)\n}\n\n\n运行结果：\n\n{5.000000, 5.000000}\n{6.000000, 6.000000}\n------------------\n{10.000000, 10.000000}\n{11.000000, 11.000000}\n\n\n# 理清楚\n\nGo 语言的方法非常纯粹， 可以看作特殊类型的函数， 其显式地将对象实例或指针作为函数的第一个参数， 并且参数名可以自己指定， 而不强制要求一定是 this 或 self 。这个对象实例或指针称为方法的接收者（reciever）。\n\n（给方法找个归属，它是在哪个类里面的，哪个对象里面的。或者直接理解成方法的调用者就好了嘛，就是this的概念!只是可以写在前面，或者让编译器指定参数表中的第一个参数为这个角色）\n\n为命名类型定义方法的语法格式如下：\n\n// 类型方法接收者是值类型\nfunc (t TypeName) MethodName (ParamList ) (Returnlist) {\n\t//method body\n}\n\n// 类型方法接收者是指针\nfunc (t *TypeName) MethodName (ParamList) (Returnlist) {\n\t//method body\n}\n\n\n说明：\n\nt 是接收者或者叫接收器变量，官方建议使用接收器类型名 TypeName 的 第一个小写字母，而不是 self 、 this 之类的命名。例如， Socket 类型的接收器变量应该命名为 s， Connector 类型的接收器变量应该命名为 c 等；\n\nTypeName 为命名类型的类型名；\n\nMethodName 为方法名，是一个自定义标识符；\n\nParamList 是形参列表；\n\nReturnList 是返回值列表；\n\n接收者的定义和普通变量、函数参数等一样，前面是变量名，后面是接收者类型。\n\nGo 方法实质上是以方法的 receiver 参数作为第一个参数的普通函数，没有使用隐式的指针，我们可以将类型的方法改写为常规的函数。示例如下：\n\n//类型方法接收者是值类型\nfunc TypName_MethodName(t TypeName , otherParamList) (Returnlist) {\n\t//method body\n}\n//类型方法接收者是指针\nfunc TypName_MethodName (t *TypeName , otherParamList) (Returnlist) {\n\t//method body\n}\n\n\n# receiver可以使用指针\n\npackage main\n\nimport "fmt"\n\ntype MyStruct struct {\n    x int\n}\n\nfunc (m MyStruct) Set1() {\n    m.x = 1\n}\n\nfunc (m *MyStruct) Set2() {\n    m.x = 2\n}\n\nfunc main() {\n    s := MyStruct{x: 0}\n    s.Set1()\n    fmt.Println(s.x)\n    s.Set2()\n    fmt.Println(s.x)\n}\n\n\n输出\n\n0\n2\n\n\n可以看出，Set1并没有修改值，Set2才修改了值，是因为指针receiver才是修改原来的值，否则只是复制变量出来成为函数里的局部变量\n\n# 如何判断receiver是否要用指针\n\nmethod的value receiver和pointer receiver怎么选择，官方说了2个原因来使用pointer receiver\n\n 1. 需要修改原来的值\n 2. 防止每次调用method时候都拷贝value，比如当struct很大的时候每次都拷贝value会降低效率\n\n下面是我个人理解，不一定准确：\n\n实际应用中，有一个情况是不能用pointer receiver：pointer可能造成安全风险，例如某个method只是要获取金额，而不是修改金额，那么使用pointer的话就存在当内存被泄露等情况导致金额被修改。\n\n因此，若没有涉及性能问题，且method的功能是读，而非写的时候，首选value receiver\n\n\n# interface与类型断言\n\nGolang的语言中提供了断言的功能。golang中的所有程序都实现了interface{}的接口，这意味着，所有的类型如string,int,int64甚至是自定义的struct类型都就此拥有了interface{}的接口，这种做法和java中的Object类型比较类似。那么在一个数据通过func funcName(interface{})的方式传进来的时候，也就意味着这个参数被自动的转为interface{}的类型。\n\nfunc funcName(a interface{}) string {\n     return string(a)\n}\n\n\n编译器会返回\n\ncannot convert a (type interface{}) to type string: need type assertion\n\n\n此时，意味着整个转化的过程需要类型断言。类型断言有以下几种形式：(其实就是类型转型)\n\n1）直接断言使用\n\nvar a interface{}\n\n\nfmt.Println("Where are you,Jonny?", a.(string))\n\n\n但是如果断言失败一般会导致panic的发生。所以为了防止panic的发生，我们需要在断言前进行一定的判断\n\nvalue, ok := a.(string)\n\n\n如果断言失败，那么ok的值将会是false,但是如果断言成功ok的值将会是true,同时value将会得到所期待的正确的值。示例：\n\nvalue, ok := a.(string)\nif !ok {\n    fmt.Println("It\'s not ok for type string")\n    return\n}\nfmt.Println("The value is ", value)\n\n\n完整例子如下：\n\npackage main\n\n\nimport "fmt"\n\n\n/*\nfunc funcName(a interface{}) string {\n        return string(a)\n}\n*/\n\n\nfunc funcName(a interface{}) string {\n        value, ok := a.(string)\n        if !ok {\n                fmt.Println("It is not ok for type string")\n                return ""\n        }\n        fmt.Println("The value is ", value)\n\n\n        return value\n}\n\n\nfunc main() {\n        //      str := "123"\n        //      funcName(str)\n        //var a interface{}\n        //var a string = "123"\n        var a int = 10\n        funcName(a)\n}\n\n\n2）配合switch使用\n\nvar t interface{}\nt = functionOfSomeType()\nswitch t := t.(type) {\ndefault:\n    fmt.Printf("unexpected type %T", t)       // %T prints whatever type t has\ncase bool:\n    fmt.Printf("boolean %t\\n", t)             // t has type bool\ncase int:\n    fmt.Printf("integer %d\\n", t)             // t has type int\ncase *bool:\n    fmt.Printf("pointer to boolean %t\\n", *t) // t has type *bool\ncase *int:\n    fmt.Printf("pointer to integer %d\\n", *t) // t has type *int\n}\n\n\n或者如下使用方法\n\nfunc sqlQuote(x interface{}) string {\n    if x == nil {\n        return "NULL"\n    } else if _, ok := x.(int); ok {\n        return fmt.Sprintf("%d", x)\n    } else if _, ok := x.(uint); ok {\n        return fmt.Sprintf("%d", x)\n    } else if b, ok := x.(bool); ok {\n        if b {\n            return "TRUE"\n        }\n        return "FALSE"\n    } else if s, ok := x.(string); ok {\n        return sqlQuoteString(s) // (not shown)\n    } else {\n        panic(fmt.Sprintf("unexpected type %T: %v", x, x))\n    }\n}\n\n\n\n# 反射reflect\n\n# 编程语言中反射的概念\n\n在计算机科学领域，反射是指一类应用，它们能够自描述和自控制。也就是说，这类应用通过采用某种机制来实现对自己行为的描述（self-representation）和监测（examination），并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。\n\n每种语言的反射模型都不同，并且有些语言根本不支持反射。Golang语言实现了反射，反射机制就是在运行时动态的调用对象的方法和属性，官方自带的reflect包就是反射相关的，只要包含这个包就可以使用。\n\n多插一句，Golang的gRPC也是通过反射实现的。\n\n# interface 和 反射\n\n在讲反射之前，先来看看Golang关于类型设计的一些原则\n\n * 变量包括（type, value）两部分\n * type 包括 static type和concrete type. 简单来说 static type是你在编码是看见的类型(如int、string)，concrete type是runtime系统看见的类型\n * 类型断言能否成功，取决于变量的concrete type，而不是static type. 因此，一个 reader变量如果它的concrete type也实现了write方法的话，它也可以被类型断言为writer.\n\n接下来要讲的反射，就是建立在类型之上的，Golang的指定类型的变量的类型是静态的（也就是指定int、string这些的变量，它的type是static type），在创建变量的时候就已经确定，反射主要与Golang的interface类型相关（它的type是concrete type），只有interface类型才有反射一说。\n\n在Golang的实现中，每个interface变量都有一个对应pair，pair中记录了实际变量的值和类型:\n\n(value, type)\n\n\nvalue是实际变量值，type是实际变量的类型。一个interface{}类型的变量包含了2个指针，一个指针指向值的类型【对应concrete type】，另外一个指针指向实际的值【对应value】。\n\n例如，创建类型为*os.File的变量，然后将其赋给一个接口变量r：\n\ntty, err := os.OpenFile("/dev/tty", os.O_RDWR, 0)\n\nvar r io.Reader\nr = tty\n\n\n接口变量r的pair中将记录如下信息：(tty, *os.File)，这个pair在接口变量的连续赋值过程中是不变的，将接口变量r赋给另一个接口变量w:\n\nvar w io.Writer\nw = r.(io.Writer)\n\n\n接口变量w的pair与r的pair相同，都是:(tty, *os.File)，即使w是空接口类型，pair也是不变的。\n\ninterface及其pair的存在，是Golang中实现反射的前提，理解了pair，就更容易理解反射。反射就是用来检测存储在接口变量内部(值value；类型concrete type) pair对的一种机制。\n\npackage main\n\nimport (\n\t"fmt"\n\t"io"\n\t"os"\n)\n\n\nfunc main() {\n\ttty, err := os.OpenFile("/dev/tty", os.O_RDWR, 0)\n\tif err != nil {\n\t\tfmt.Println("open file error", err)\n\t\treturn\n\t}\n\n\tvar r io.Reader\n\tr = tty\n\n\tvar w io.Writer\n\tw = r.(io.Writer)\n\tw.Write([]byte("HELLO THIS IS A TEST!!!\\n"))\n}\n\n\n再比如:\n\npackage main\n\nimport "fmt"\n\ntype Reader interface {\n\tReadBook()\n}\n\ntype Writer interface {\n\tWriteBook()\n}\n\n//具体类型\ntype Book struct {\n}\n\nfunc (this *Book) ReadBook() {\n\tfmt.Println("Read a book.")\n}\n\nfunc (this *Book) WriteBook() {\n\tfmt.Println("Write a book.")\n}\n\nfunc main() {\n\tb := &Book{}\n\n\tvar r Reader\n\tr = b\n\n\tr.ReadBook()\n\n\tvar w Writer\n\tw = r.(Writer)\n\tw.WriteBook()\n}\n\n\n# Golang的反射reflect\n\nreflect的基本功能TypeOf和ValueOf\n\n既然反射就是用来检测存储在接口变量内部(值value；类型concrete type) pair对的一种机制。那么在Golang的reflect反射包中有什么样的方式可以让我们直接获取到变量内部的信息呢？ 它提供了两种类型（或者说两个方法）让我们可以很容易的访问接口变量内容，分别是reflect.ValueOf() 和 reflect.TypeOf()，看看官方的解释\n\n// ValueOf returns a new Value initialized to the concrete value\n// stored in the interface i.  ValueOf(nil) returns the zero \nfunc ValueOf(i interface{}) Value {...}\n\n//ValueOf用来获取输入参数接口中的数据的值，如果接口为空则返回0\n\n\n// TypeOf returns the reflection Type that represents the dynamic type of i.\n// If i is a nil interface value, TypeOf returns nil.\nfunc TypeOf(i interface{}) Type {...}\n\n//TypeOf用来动态获取输入参数接口中的值的类型，如果接口为空则返回nil\n\n\nreflect.TypeOf()是获取pair中的type，reflect.ValueOf()获取pair中的value，示例如下：\n\npackage main\n\nimport (\n    "fmt"\n    "reflect"\n)\n\nfunc main() {\n    var num float64 = 1.2345\n\n    fmt.Println("type: ", reflect.TypeOf(num))\n    fmt.Println("value: ", reflect.ValueOf(num))\n}\n\n运行结果:\ntype:  float64\nvalue:  1.2345\n\n\n说明\n\n 1. reflect.TypeOf： 直接给到了我们想要的type类型，如float64、int、各种pointer、struct 等等真实的类型\n 2. reflect.ValueOf：直接给到了我们想要的具体的值，如1.2345这个具体数值，或者类似&{1 "Allen.Wu" 25} 这样的结构体struct的值\n 3. 也就是说明反射可以将“接口类型变量”转换为“反射类型对象”，反射类型指的是reflect.Type和reflect.Value这两种\n\n从relfect.Value中获取接口interface的信息\n\n当执行reflect.ValueOf(interface)之后，就得到了一个类型为”relfect.Value”变量，可以通过它本身的Interface()方法获得接口变量的真实内容，然后可以通过类型判断进行转换，转换为原有真实类型。不过，我们可能是已知原有类型，也有可能是未知原有类型，因此，下面分两种情况进行说明。\n\n已知原有类型【进行“强制转换”】\n\n已知类型后转换为其对应的类型的做法如下，直接通过Interface方法然后强制转换，如下：\n\nrealValue := value.Interface().(已知的类型)\n\n\n示例如下：\n\npackage main\n\nimport (\n    "fmt"\n    "reflect"\n)\n\nfunc main() {\n    var num float64 = 1.2345\n\n    pointer := reflect.ValueOf(&num)\n    value := reflect.ValueOf(num)\n\n    // 可以理解为“强制转换”，但是需要注意的时候，转换的时候，如果转换的类型不完全符合，则直接panic\n    // Golang 对类型要求非常严格，类型一定要完全符合\n    // 如下两个，一个是*float64，一个是float64，如果弄混，则会panic\n    convertPointer := pointer.Interface().(*float64)\n    convertValue := value.Interface().(float64)\n\n    fmt.Println(convertPointer)\n    fmt.Println(convertValue)\n}\n\n运行结果：\n0xc42000e238\n1.2345\n\n\n说明\n\n 1. 转换的时候，如果转换的类型不完全符合，则直接panic，类型要求非常严格！\n 2. 转换的时候，要区分是指针还是指\n 3. 也就是说反射可以将“反射类型对象”再重新转换为“接口类型变量”\n\n未知原有类型【遍历探测其Filed】\n\n很多情况下，我们可能并不知道其具体类型，那么这个时候，该如何做呢？需要我们进行遍历探测其Filed来得知，示例如下:\n\npackage main\n\nimport (\n    "fmt"\n    "reflect"\n)\n\ntype User struct {\n    Id   int\n    Name string\n    Age  int\n}\n\nfunc (u User) ReflectCallFunc() {\n    fmt.Println("Allen.Wu ReflectCallFunc")\n}\n\nfunc main() {\n\n    user := User{1, "Allen.Wu", 25}\n\n    DoFiledAndMethod(user)\n\n}\n\n// 通过接口来获取任意参数，然后一一揭晓\nfunc DoFiledAndMethod(input interface{}) {\n\n    getType := reflect.TypeOf(input)\n    fmt.Println("get Type is :", getType.Name())\n\n    getValue := reflect.ValueOf(input)\n    fmt.Println("get all Fields is:", getValue)\n\n    // 获取方法字段\n    // 1. 先获取interface的reflect.Type，然后通过NumField进行遍历\n    // 2. 再通过reflect.Type的Field获取其Field\n    // 3. 最后通过Field的Interface()得到对应的value\n    for i := 0; i < getType.NumField(); i++ {\n        field := getType.Field(i)\n        value := getValue.Field(i).Interface()\n        fmt.Printf("%s: %v = %v\\n", field.Name, field.Type, value)\n    }\n\n    // 获取方法\n    // 1. 先获取interface的reflect.Type，然后通过.NumMethod进行遍历\n    for i := 0; i < getType.NumMethod(); i++ {\n        m := getType.Method(i)\n        fmt.Printf("%s: %v\\n", m.Name, m.Type)\n    }\n}\n\n运行结果：\nget Type is : User\nget all Fields is: {1 Allen.Wu 25}\nId: int = 1\nName: string = Allen.Wu\nAge: int = 25\nReflectCallFunc: func(main.User)\n\n\n说明\n\n通过运行结果可以得知获取未知类型的interface的具体变量及其类型的步骤为：\n\n1先获取interface的reflect.Type，然后通过NumField进行遍历\n\n2再通过reflect.Type的Field获取其Field\n\n3最后通过Field的Interface()得到对应的value\n\n通过运行结果可以得知获取未知类型的interface的所属方法（函数）的步骤为：\n\n1先获取interface的reflect.Type，然后通过NumMethod进行遍历\n\n2再分别通过reflect.Type的Method获取对应的真实的方法（函数）\n\n3最后对结果取其Name和Type得知具体的方法名\n\n4也就是说反射可以将“反射类型对象”再重新转换为“接口类型变量”\n\n5struct 或者 struct 的嵌套都是一样的判断处理方式\n\n# 通过reflect.Value设置实际变量的值\n\nreflect.Value是通过reflect.ValueOf(X)获得的，只有当X是指针的时候，才可以通过reflec.Value修改实际变量X的值，即：要修改反射类型的对象就一定要保证其值是“addressable”的。\n\n示例如下：\n\npackage main\n\nimport (\n    "fmt"\n    "reflect"\n)\n\nfunc main() {\n\n    var num float64 = 1.2345\n    fmt.Println("old value of pointer:", num)\n\n    // 通过reflect.ValueOf获取num中的reflect.Value，注意，参数必须是指针才能修改其值\n    pointer := reflect.ValueOf(&num)\n    newValue := pointer.Elem()\n\n    fmt.Println("type of pointer:", newValue.Type())\n    fmt.Println("settability of pointer:", newValue.CanSet())\n\n    // 重新赋值\n    newValue.SetFloat(77)\n    fmt.Println("new value of pointer:", num)\n\n    ////////////////////\n    // 如果reflect.ValueOf的参数不是指针，会如何？\n    pointer = reflect.ValueOf(num)\n    //newValue = pointer.Elem() // 如果非指针，这里直接panic，“panic: reflect: call of reflect.Value.Elem on float64 Value”\n}\n\n运行结果：\nold value of pointer: 1.2345\ntype of pointer: float64\nsettability of pointer: true\nnew value of pointer: 77\n\n\n说明\n\n1需要传入的参数是* float64这个指针，然后可以通过pointer.Elem()去获取所指向的Value，注意一定要是指针。\n\n2如果传入的参数不是指针，而是变量，那么\n\n○通过Elem获取原始值对应的对象则直接panic\n\n○通过CanSet方法查询是否可以设置返回false\n\n3newValue.CantSet()表示是否可以重新设置其值，如果输出的是true则可修改，否则不能修改，修改完之后再进行打印发现真的已经修改了。\n\n4reflect.Value.Elem() 表示获取原始值对应的反射对象，只有原始对象才能修改，当前反射对象是不能修改的\n\n5也就是说如果要修改反射类型对象，其值必须是“addressable”【对应的要传入的是指针，同时要通过Elem方法获取原始值对应的反射对象】\n\n6struct 或者 struct 的嵌套都是一样的判断处理方式\n\n# 通过reflect.ValueOf来进行方法的调用\n\n这算是一个高级用法了，前面我们只说到对类型、变量的几种反射的用法，包括如何获取其值、其类型、如果重新设置新值。但是在工程应用中，另外一个常用并且属于高级的用法，就是通过reflect来进行方法【函数】的调用。比如我们要做框架工程的时候，需要可以随意扩展方法，或者说用户可以自定义方法，那么我们通过什么手段来扩展让用户能够自定义呢？关键点在于用户的自定义方法是未可知的，因此我们可以通过reflect来搞定\n\n示例如下：\n\npackage main\n\nimport (\n    "fmt"\n    "reflect"\n)\n\ntype User struct {\n    Id   int\n    Name string\n    Age  int\n}\n\nfunc (u User) ReflectCallFuncHasArgs(name string, age int) {\n    fmt.Println("ReflectCallFuncHasArgs name: ", name, ", age:", age, "and origal User.Name:", u.Name)\n}\n\nfunc (u User) ReflectCallFuncNoArgs() {\n    fmt.Println("ReflectCallFuncNoArgs")\n}\n\n// 如何通过反射来进行方法的调用？\n// 本来可以用u.ReflectCallFuncXXX直接调用的，但是如果要通过反射，那么首先要将方法注册，也就是MethodByName，然后通过反射调动mv.Call\n\nfunc main() {\n    user := User{1, "Allen.Wu", 25}\n    \n    // 1. 要通过反射来调用起对应的方法，必须要先通过reflect.ValueOf(interface)来获取到reflect.Value，得到“反射类型对象”后才能做下一步处理\n    getValue := reflect.ValueOf(user)\n\n    // 一定要指定参数为正确的方法名\n    // 2. 先看看带有参数的调用方法\n    methodValue := getValue.MethodByName("ReflectCallFuncHasArgs")\n    args := []reflect.Value{reflect.ValueOf("wudebao"), reflect.ValueOf(30)}\n    methodValue.Call(args)\n\n    // 一定要指定参数为正确的方法名\n    // 3. 再看看无参数的调用方法\n    methodValue = getValue.MethodByName("ReflectCallFuncNoArgs")\n    args = make([]reflect.Value, 0)\n    methodValue.Call(args)\n}\n\n\n运行结果：\nReflectCallFuncHasArgs name:  wudebao , age: 30 and origal User.Name: Allen.Wu\nReflectCallFuncNoArgs\n\n\n说明\n\n 1. 要通过反射来调用起对应的方法，必须要先通过reflect.ValueOf(interface)来获取到reflect.Value，得到“反射类型对象”后才能做下一步处理\n 2. reflect.Value.MethodByName这.MethodByName，需要指定准确真实的方法名字，如果错误将直接panic，MethodByName返回一个函数值对应的reflect.Value方法的名字。\n 3. []reflect.Value，这个是最终需要调用的方法的参数，可以没有或者一个或者多个，根据实际参数来定。\n 4. reflect.Value的 Call 这个方法，这个方法将最终调用真实的方法，参数务必保持一致，如果reflect.Value\'Kind不是一个方法，那么将直接panic。\n 5. 本来可以用u.ReflectCallFuncXXX直接调用的，但是如果要通过反射，那么首先要将方法注册，也就是MethodByName，然后通过反射调用methodValue.Call\n\n# Golang的反射reflect性能\n\nGolang的反射很慢，这个和它的API设计有关。在 java 里面，我们一般使用反射都是这样来弄的。\n\nField field = clazz.getField("hello");\nfield.get(obj1);\nfield.get(obj2);\n\n\n但是Golang的反射不是这样设计的:\n\ntype_ := reflect.TypeOf(obj)\nfield, _ := type_.FieldByName("hello")\n\n\n这里取出来的 field 对象是 reflect.StructField 类型，但是它没有办法用来取得对应对象上的值。如果要取值，得用另外一套对object，而不是type的反射\n\ntype_ := reflect.ValueOf(obj)\nfieldValue := type_.FieldByName("hello")\n\n\n这里取出来的 fieldValue 类型是 reflect.Value，它是一个具体的值，而不是一个可复用的反射对象了，每次反射都需要malloc这个reflect.Value结构体，并且还涉及到GC。\n\nGolang reflect慢主要有两个原因\n \n涉及到内存分配以及后续的GC；\nreflect实现里面有大量的枚举，也就是for循环，比如类型之类的.\n\n\n# 总结\n\n上述详细说明了Golang的反射reflect的各种功能和用法，都附带有相应的示例，相信能够在工程应用中进行相应实践，总结一下就是：\n\n * 反射可以大大提高程序的灵活性，使得interface{}有更大的发挥余地\n\n * * 反射必须结合interface才玩得转\n   * 变量的type要是concrete type的（也就是interface变量）才有反射一说\n\n * 反射可以将“接口类型变量”转换为“反射类型对象”\n\n * * 反射使用 TypeOf 和 ValueOf 函数从接口中获取目标对象信息\n\n * 反射可以将“反射类型对象”转换为“接口类型变量\n\n * * reflect.value.Interface().(已知的类型)\n   * 遍历reflect.Type的Field获取其Field\n\n * 反射可以修改反射类型对象，但是其值必须是“addressable”\n\n * * 想要利用反射修改对象状态，前提是 interface.data 是 settable,即 pointer-interface\n\n * 通过反射可以“动态”调用方法\n\n * 因为Golang本身不支持模板，因此在以往需要使用模板的场景下往往就需要使用反射(reflect)来实现\n\n# 反射的基本原理\n\n\n\n\n# 结构体标签\n\npackage main\n\nimport (\n    "fmt"\n    "reflect"\n)\n\ntype resume struct {\n    Name string `json:"name" doc:"我的名字"`\n}\n\nfunc findDoc(stru interface{}) map[string]string {\n    t := reflect.TypeOf(stru).Elem()\n    doc := make(map[string]string)\n\n    for i := 0; i < t.NumField(); i++ {\n        doc[t.Field(i).Tag.Get("json")] = t.Field(i).Tag.Get("doc")\n    }\n\n    return doc\n\n}\n\nfunc main() {\n    var stru resume\n    doc := findDoc(&stru)\n    fmt.Printf("name字段为：%s\\n", doc["name"])\n}\n\n\n\n# 五、高阶\n\n\n# Go Modules\n\n# A、什么是Go Modules?\n\nGo modules 是 Go 语言的依赖解决方案，发布于 Go1.11，成长于 Go1.12，丰富于 Go1.13，正式于 Go1.14 推荐在生产上使用。\n\nGo moudles 目前集成在 Go 的工具链中，只要安装了 Go，自然而然也就可以使用 Go moudles 了，而 Go modules 的出现也解决了在 Go1.11 前的几个常见争议问题：\n\n 1. Go 语言长久以来的依赖管理问题。\n 2. “淘汰”现有的 GOPATH 的使用模式。\n 3. 统一社区中的其它的依赖管理工具（提供迁移功能）。\n\n# B、GOPATH的工作模式\n\nGo Modoules的目的之一就是淘汰GOPATH, 那么GOPATH是个什么?\n\n为什么在 Go1.11 前就使用 GOPATH，而 Go1.11 后就开始逐步建议使用 Go modules，不再推荐 GOPATH 的模式了呢？\n\n# (1) Wait is GOPATH?\n\n$ go env\n\nGOPATH="/home/itheima/go"\n...\n\n\n我们输入go env命令行后可以查看到 GOPATH 变量的结果，我们进入到该目录下进行查看，如下：\n\ngo\n├── bin\n├── pkg\n└── src\n    ├── github.com\n    ├── golang.org\n    ├── google.golang.org\n    ├── gopkg.in\n    ....\n\n\nGOPATH目录下一共包含了三个子目录，分别是：\n\n * bin：存储所编译生成的二进制文件。\n * pkg：存储预编译的目标文件，以加快程序的后续编译速度。\n * src：存储所有.go文件或源代码。在编写 Go 应用程序，程序包和库时，一般会以$GOPATH/src/github.com/foo/bar的路径进行存放。\n\n因此在使用 GOPATH 模式下，我们需要将应用代码存放在固定的$GOPATH/src目录下，并且如果执行go get来拉取外部依赖会自动下载并安装到$GOPATH目录下。\n\n# (2) GOPATH模式的弊端\n\n在 GOPATH 的 $GOPATH/src 下进行 .go 文件或源代码的存储，我们可以称其为 GOPATH 的模式，这个模式拥有一些弊端.\n\n * A. 无版本控制概念. 在执行go get的时候，你无法传达任何的版本信息的期望，也就是说你也无法知道自己当前更新的是哪一个版本，也无法通过指定来拉取自己所期望的具体版本。\n\n * B.无法同步一致第三方版本号. 在运行 Go 应用程序的时候，你无法保证其它人与你所期望依赖的第三方库是相同的版本，也就是说在项目依赖库的管理上，你无法保证所有人的依赖版本都一致。\n\n * C.无法指定当前项目引用的第三方版本号. 你没办法处理 v1、v2、v3 等等不同版本的引用问题，因为 GOPATH 模式下的导入路径都是一样的，都是github.com/foo/bar。\n\n# C、Go Modules模式\n\n我们接下来用Go Modules的方式创建一个项目, 建议为了与GOPATH分开,不要将项目创建在GOPATH/src下.\n\n# (1) go mod命令\n\n\n\n# (2) go mod环境变量\n\n可以通过 go env 命令来进行查看\n\n\n\n$ go env\nGO111MODULE="auto"\nGOPROXY="https://proxy.golang.org,direct"\nGONOPROXY=""\nGOSUMDB="sum.golang.org"\nGONOSUMDB=""\nGOPRIVATE=""\n...\n\n\n# GO111MODULE\n\nGo语言提供了 GO111MODULE这个环境变量来作为 Go modules 的开关，其允许设置以下参数：\n\n * auto：只要项目包含了 go.mod 文件的话启用 Go modules，目前在 Go1.11 至 Go1.14 中仍然是默认值。\n * on：启用 Go modules，推荐设置，将会是未来版本中的默认值。\n * off：禁用 Go modules，不推荐设置。\n\n可以通过来设置\n\n$ go env -w GO111MODULE=on\n\n\n# GOPROXY\n\n这个环境变量主要是用于设置 Go 模块代理（Go module proxy）,其作用是用于使 Go 在后续拉取模块版本时直接通过镜像站点来快速拉取。\n\nGOPROXY 的默认值是：https://proxy.golang.org,direct\n\nproxy.golang.org国内访问不了,需要设置国内的代理.\n\n * 阿里云 https://mirrors.aliyun.com/goproxy/\n * 七牛云 https://goproxy.cn,direct\n\n如:\n\n$ go env -w GOPROXY=https://goproxy.cn,direct\n\n\nGOPROXY 的值是一个以英文逗号 “,” 分割的 Go 模块代理列表，允许设置多个模块代理，假设你不想使用，也可以将其设置为 “off” ，这将会禁止 Go 在后续操作中使用任何 Go 模块代理。\n\n如:\n\n$ go env -w GOPROXY=https://goproxy.cn,https://mirrors.aliyun.com/goproxy/,direct\n\n\ndirect\n\n而在刚刚设置的值中，我们可以发现值列表中有 “direct” 标识，它又有什么作用呢？\n\n实际上 “direct” 是一个特殊指示符，用于指示 Go 回源到模块版本的源地址去抓取（比如 GitHub 等），场景如下：当值列表中上一个 Go 模块代理返回 404 或 410 错误时，Go 自动尝试列表中的下一个，遇见 “direct” 时回源，也就是回到源地址去抓取，而遇见 EOF 时终止并抛出类似 “invalid version: unknown revision...” 的错误。\n\n# 修改goproxy\n\n$env:GOPROXY = "https://goproxy.cn,direct"\n\n\n\n# GOSUMDB\n\n它的值是一个 Go checksum database，用于在拉取模块版本时（无论是从源站拉取还是通过 Go module proxy 拉取）保证拉取到的模块版本数据未经过篡改，若发现不一致，也就是可能存在篡改，将会立即中止。\n\nGOSUMDB 的默认值为：sum.golang.org，在国内也是无法访问的，但是 GOSUMDB 可以被 Go 模块代理所代理（详见：Proxying a Checksum Database）。\n\n因此我们可以通过设置 GOPROXY 来解决，而先前我们所设置的模块代理 goproxy.cn 就能支持代理 sum.golang.org，所以这一个问题在设置 GOPROXY 后，你可以不需要过度关心。\n\n另外若对 GOSUMDB 的值有自定义需求，其支持如下格式：\n\n * 格式 1：<SUMDB_NAME>+<PUBLIC_KEY>。\n * 格式 2：<SUMDB_NAME>+<PUBLIC_KEY> <SUMDB_URL>。\n\n也可以将其设置为“off”，也就是禁止 Go 在后续操作中校验模块版本。\n\n# GONOPROXY/GONOSUMDB/GOPRIVATE\n\n这三个环境变量都是用在当前项目依赖了私有模块，例如像是你公司的私有 git 仓库，又或是 github 中的私有库，都是属于私有模块，都是要进行设置的，否则会拉取失败。\n\n更细致来讲，就是依赖了由 GOPROXY 指定的 Go 模块代理或由 GOSUMDB 指定 Go checksum database 都无法访问到的模块时的场景。\n\n而一般建议直接设置 GOPRIVATE，它的值将作为 GONOPROXY 和 GONOSUMDB 的默认值，所以建议的最佳姿势是直接使用 GOPRIVATE。\n\n并且它们的值都是一个以英文逗号 “,” 分割的模块路径前缀，也就是可以设置多个，例如：\n\n$ go env -w GOPRIVATE="git.example.com,github.com/eddycjy/mquote"\n\n\n设置后，前缀为 git.xxx.com 和 github.com/eddycjy/mquote 的模块都会被认为是私有模块。\n\n如果不想每次都重新设置，我们也可以利用通配符，例如：\n\n$ go env -w GOPRIVATE="*.example.com"\n\n\n这样子设置的话，所有模块路径为 example.com 的子域名（例如：git.example.com）都将不经过 Go module proxy 和 Go checksum database，需要注意的是不包括 example.com 本身。\n\n# D、使用Go Modules初始化项目\n\n# (1) 开启Go Modules\n\n $ go env -w GO111MODULE=on\n\n\n又或是可以通过直接设置系统环境变量（写入对应的~/.bash_profile 文件亦可）来实现这个目的：\n\n$ export GO111MODULE=on\n\n\n# (2) 初始化项目\n\n创建项目目录\n\n$ mkdir -p $HOME/aceld/modules_test\n$ cd $HOME/aceld/modules_test\n\n\n执行Go modules 初始化\n\n$ go mod init github.com/aceld/modules_test\ngo: creating new go.mod: module github.com/aceld/modules_test\n\n\n\n\n在执行 go mod init 命令时，我们指定了模块导入路径为 github.com/aceld/modules_test。接下来我们在该项目根目录下创建 main.go 文件，如下：\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/aceld/zinx/znet"\n    "github.com/aceld/zinx/ziface"\n)\n\n//ping test 自定义路由\ntype PingRouter struct {\n    znet.BaseRouter\n}\n\n//Ping Handle\nfunc (this *PingRouter) Handle(request ziface.IRequest) {\n    //先读取客户端的数据\n    fmt.Println("recv from client : msgId=", request.GetMsgID(), \n              ", data=", string(request.GetData()))\n\n    //再回写ping...ping...ping\n    err := request.GetConnection().SendBuffMsg(0, []byte("ping...ping...ping"))\n    if err != nil {\n      fmt.Println(err)\n    }\n}\n\nfunc main() {\n    //1 创建一个server句柄\n    s := znet.NewServer()\n\n    //2 配置路由\n    s.AddRouter(0, &PingRouter{})\n\n    //3 开启服务\n    s.Serve()\n}\n\n\nOK, 我们先不要关注代码本身,我们看当前的main.go也就是我们的aceld/modules_test项目,是依赖一个叫github.com/aceld/zinx库的. znet和ziface只是zinx的两个模块.\n\n接下来我们在$HOME/aceld/modules_test,本项目的根目录执行\n\n$ go get github.com/aceld/zinx/znet\n\ngo: downloading github.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100\ngo: found github.com/aceld/zinx/znet in github.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100\n\n\n我们会看到 我们的go.mod被修改,同时多了一个go.sum文件.\n\n# (3) 查看go.mod文件\n\naceld/modules_test/go.mod\n\nmodule github.com/aceld/modules_test\n\ngo 1.14\n\nrequire github.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100 // indirect\n\n\n我们来简单看一下这里面的关键字\n\nmodule: 用于定义当前项目的模块路径\n\ngo:标识当前Go版本.即初始化版本\n\nrequire: 当前项目依赖的一个特定的必须版本\n\n// indirect: 示该模块为间接依赖，也就是在当前应用程序中的 import 语句中，并没有发现这个模块的明确引用，有可能是你先手动 go get 拉取下来的，也有可能是你所依赖的模块所依赖的.我们的代码很明显是依赖的"github.com/aceld/zinx/znet"和"github.com/aceld/zinx/ziface",所以就间接的依赖了github.com/aceld/zinx\n\n# (4) 查看go.sum文件\n\n在第一次拉取模块依赖后，会发现多出了一个 go.sum 文件，其详细罗列了当前项目直接或间接依赖的所有模块版本，并写明了那些模块版本的 SHA-256 哈希值以备 Go 在今后的操作中保证项目所依赖的那些模块版本不会被篡改\n\ngithub.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100 h1:Ez5iM6cKGMtqvIJ8nvR9h74Ln8FvFDgfb7bJIbrKv54=\ngithub.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100/go.mod h1:bMiERrPdR8FzpBOo86nhWWmeHJ1cCaqVvWKCGcDVJ5M=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\n\n\n我们可以看到一个模块路径可能有如下两种：\n\nh1:hash情况\n\ngithub.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100 h1:Ez5iM6cKGMtqvIJ8nvR9h74Ln8FvFDgfb7bJIbrKv54=\n\n\ngo.mod hash情况\n\ngithub.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100/go.mod h1:bMiERrPdR8FzpBOo86nhWWmeHJ1cCaqVvWKCGcDVJ5M=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\n\n\nh1 hash 是 Go modules 将目标模块版本的 zip 文件开包后，针对所有包内文件依次进行 hash，然后再把它们的 hash 结果按照固定格式和算法组成总的 hash 值。\n\n而 h1 hash 和 go.mod hash 两者，要不就是同时存在，要不就是只存在 go.mod hash。那什么情况下会不存在 h1 hash 呢，就是当 Go 认为肯定用不到某个模块版本的时候就会省略它的 h1 hash，就会出现不存在 h1 hash，只存在 go.mod hash 的情况。\n\n# E、修改模块的版本依赖关系\n\n为了作尝试,假定我们现在都zinx版本作了升级, 由zinx v0.0.0-20200221135252-8a8954e75100 升级到 zinx v0.0.0-20200306023939-bc416543ae24 (注意zinx是一个没有打版本tag打第三方库,如果有的版本号是有tag的,那么可以直接对应v后面的版本号即可)\n\n那么,我们是怎么知道zinx做了升级呢, 我们又是如何知道的最新的zinx版本号是多少呢?\n\n先回到$HOME/aceld/modules_test,本项目的根目录执行\n\n$ go get github.com/aceld/zinx/znet\ngo: downloading github.com/aceld/zinx v0.0.0-20200306023939-bc416543ae24\ngo: found github.com/aceld/zinx/znet in github.com/aceld/zinx v0.0.0-20200306023939-bc416543ae24\ngo: github.com/aceld/zinx upgrade => v0.0.0-20200306023939-bc416543ae24\n\n\n这样我们,下载了最新的zinx, 版本是v0.0.0-20200306023939-bc416543ae24\n\n然后,我么看一下go.mod\n\nmodule github.com/aceld/modules_test\n\ngo 1.14\n\nrequire github.com/aceld/zinx v0.0.0-20200306023939-bc416543ae24 // indirect\n\n\n我们会看到,当我们执行go get 的时候, 会自动的将本地将当前项目的require更新了.变成了最新的依赖.\n\n好了, 现在我们就要做另外一件事,就是,我们想用一个旧版本的zinx. 来修改当前zinx模块的依赖版本号.\n\n目前我们在$GOPATH/pkg/mod/github.com/aceld下,已经有了两个版本的zinx库\n\n/go/pkg/mod/github.com/aceld$ ls\nzinx@v0.0.0-20200221135252-8a8954e75100\nzinx@v0.0.0-20200306023939-bc416543ae24\n\n\n目前,我们/aceld/modules_test依赖的是zinx@v0.0.0-20200306023939-bc416543ae24 这个是最新版, 我们要改成之前的版本zinx@v0.0.0-20200306023939-bc416543ae24.\n\n回到/aceld/modules_test项目目录下,执行\n\n$ go mod edit -replace=zinx@v0.0.0-20200306023939-bc416543ae24=zinx@v0.0.0-20200221135252-8a8954e75100\n\n\n然后我们打开go.mod查看一下\n\nmodule github.com/aceld/modules_test\n\ngo 1.14\n\nrequire github.com/aceld/zinx v0.0.0-20200306023939-bc416543ae24 // indirect\n\nreplace zinx v0.0.0-20200306023939-bc416543ae24 => zinx v0.0.0-20200221135252-8a8954e75100\n\n\n这里出现了replace关键字.用于将一个模块版本替换为另外一个模块版本。\n\n\n# goroutine\n\n# 协程并发\n\n协程：coroutine。也叫轻量级线程。\n\n与传统的系统级线程和进程相比，协程最大的优势在于“轻量级”。可以轻松创建上万个而不会导致系统资源衰竭。而线程和进程通常很难超过1万个。这也是协程别称“轻量级线程”的原因。\n\n一个线程中可以有任意多个协程，但某一时刻只能有一个协程在运行，多个协程分享该线程分配到的计算机资源。\n\n多数语言在语法层面并不直接支持协程，而是通过库的方式支持，但用库的方式支持的功能也并不完整，比如仅仅提供协程的创建、销毁与切换等能力。如果在这样的轻量级线程中调用一个同步 IO 操作，比如网络通信、本地文件读写，都会阻塞其他的并发执行轻量级线程，从而无法真正达到轻量级线程本身期望达到的目标。\n\n在协程中，调用一个任务就像调用一个函数一样，消耗的系统资源最少！但能达到进程、线程并发相同的效果。\n\n在一次并发任务中，进程、线程、协程均可以实现。从系统资源消耗的角度出发来看，进程相当多，线程次之，协程最少。\n\n# Go并发\n\nGo 在语言级别支持协程，叫goroutine。Go 语言标准库提供的所有系统调用操作（包括所有同步IO操作），都会出让CPU给其他goroutine。这让轻量级线程的切换管理不依赖于系统的线程和进程，也不需要依赖于CPU的核心数量。\n\n有人把Go比作21世纪的C语言。第一是因为Go语言设计简单，第二，21世纪最重要的就是并行程序设计，而Go从语言层面就支持并发。同时，并发程序的内存管理有时候是非常复杂的，而Go语言提供了自动垃圾回收机制。\n\nGo语言为并发编程而内置的上层API基于顺序通信进程模型CSP(communicating sequential processes)。这就意味着显式锁都是可以避免的，因为Go通过相对安全的通道发送和接受数据以实现同步，这大大地简化了并发程序的编写。\n\nGo语言中的并发程序主要使用两种手段来实现。goroutine和channel。\n\n# 什么是Goroutine\n\ngoroutine是Go语言并行设计的核心，有人称之为go程。 Goroutine从量级上看很像协程，它比线程更小，十几个goroutine可能体现在底层就是五六个线程，Go语言内部帮你实现了这些goroutine之间的内存共享。执行goroutine只需极少的栈内存(大概是4~5KB)，当然会根据相应的数据伸缩。也正因为如此，可同时运行成千上万个并发任务。goroutine比thread更易用、更高效、更轻便。\n\n一般情况下，一个普通计算机跑几十个线程就有点负载过大了，但是同样的机器却可以轻松地让成百上千个goroutine进行资源竞争。\n\n# 创建Goroutine\n\n只需在函数调⽤语句前添加 go 关键字，就可创建并发执⾏单元。开发⼈员无需了解任何执⾏细节，调度器会自动将其安排到合适的系统线程上执行。\n\n在并发编程中，我们通常想将一个过程切分成几块，然后让每个goroutine各自负责一块工作，当一个程序启动时，主函数在一个单独的goroutine中运行，我们叫它main goroutine。新的goroutine会用go语句来创建。而go语言的并发设计，让我们很轻松就可以达成这一目的。\n\n示例代码：\n\npackage main\n \nimport (\n    "fmt"\n    "time"\n)\n \nfunc newTask() {\n    i := 0\n    for {\n        i++\n        fmt.Printf("new goroutine: i = %d\\n", i)\n        time.Sleep(1*time.Second) //延时1s\n    }\n}\n \nfunc main() {\n    //创建一个 goroutine，启动另外一个任务\n    go newTask()\n    i := 0\n    //main goroutine 循环打印\n    for {\n        i++\n        fmt.Printf("main goroutine: i = %d\\n", i)\n        time.Sleep(1 * time.Second) //延时1s\n    }\n}\n\n\n程序运行结果：\n\n\n\n# Goroutine特性\n\n主goroutine退出后，其它的工作goroutine也会自动退出：\n\npackage main\n \nimport (\n"fmt"\n"time"\n)\n \nfunc newTask() {\n    i := 0\n    for {\n        i++\n        fmt.Printf("new goroutine: i = %d\\n", i)\n        time.Sleep(1 * time.Second) //延时1s\n    }\n}\n \nfunc main() {\n    //创建一个 goroutine，启动另外一个任务\n    go newTask()\n \n    fmt.Println("main goroutine exit")\n}\n\n\n程序运行结果：\n\n\n\n# Goexit函数\n\n调用 runtime.Goexit() 将立即终止当前 goroutine 执⾏，调度器确保所有已注册 defer 延迟调用被执行。\n\n示例代码：\n\npackage main\n \nimport (\n"fmt"\n"runtime"\n)\n \nfunc main() {\n    go func() {\n        defer fmt.Println("A.defer")\n \n        func() {\n            defer fmt.Println("B.defer")\n            runtime.Goexit() // 终止当前 goroutine, import "runtime"\n            fmt.Println("B") // 不会执行\n        }()\n \n        fmt.Println("A") // 不会执行\n    }()       //不要忘记()\n \n    //死循环，目的不让主goroutine结束\n    for {\n    }\n}\n\n\n程序运行结果：\n\n\n\n\n# channel\n\nchannel是Go语言中的一个核心类型，可以把它看成管道。并发核心单元通过它就可以发送或者接收数据进行通讯，这在一定程度上又进一步降低了编程的难度。\n\nchannel是一个数据类型，主要用来解决go程的同步问题以及go程之间数据共享（数据传递）的问题。\n\ngoroutine运行在相同的地址空间，因此访问共享内存必须做好同步。goroutine 奉行通过通信来共享内存，而不是共享内存来通信。\n\n引⽤类型 channel可用于多个 goroutine 通讯。其内部实现了同步，确保并发安全。\n\n\n\n# 定义channel变量\n\n和map类似，channel也一个对应make创建的底层数据结构的引用。\n\n当我们复制一个channel或用于函数参数传递时，我们只是拷贝了一个channel引用，因此调用者和被调用者将引用同一个channel对象。和其它的引用类型一样，channel的零值也是nil。\n\n定义一个channel时，也需要定义发送到channel的值的类型。channel可以使用内置的make()函数来创建：\n\nchan是创建channel所需使用的关键字。Type 代表指定channel收发数据的类型。\n\n    make(chan Type)  //等价于make(chan Type, 0)\n    make(chan Type, capacity)\n\n\n当我们复制一个channel或用于函数参数传递时，我们只是拷贝了一个channel引用，因此调用者和被调用者将引用同一个channel对象。和其它的引用类型一样，channel的零值也是nil。\n\n当 参数capacity= 0 时，channel 是无缓冲阻塞读写的；当capacity > 0 时，channel 有缓冲、是非阻塞的，直到写满 capacity个元素才阻塞写入。\n\nchannel非常像生活中的管道，一边可以存放东西，另一边可以取出东西。channel通过操作符 <- 来接收和发送数据，发送和接收数据语法：\n\n    channel <- value      //发送value到channel\n    <-channel             //接收并将其丢弃\n    x := <-channel        //从channel中接收数据，并赋值给x\n    x, ok := <-channel    //功能同上，同时检查通道是否已关闭或者是否为空\n\n\n默认情况下，channel接收和发送数据都是阻塞的，除非另一端已经准备好，这样就使得goroutine同步变的更加的简单，而不需要显式的lock。\n\n示例代码：\n\npackage main\n \nimport (\n    "fmt"\n)\n \nfunc main() {\n    c := make(chan int)\n \n    go func() {\n        defer fmt.Println("子go程结束")\n \n        fmt.Println("子go程正在运行……")\n \n        c <- 666 //666发送到c\n    }()\n \n    num := <-c //从c中接收数据，并赋值给num\n \n    fmt.Println("num = ", num)\n    fmt.Println("main go程结束")\n}\n\n\n程序运行结果：\n\n\n\n# 无缓冲的channel\n\n无缓冲的通道（unbuffered channel）是指在接收前没有能力保存任何数据值的通道。\n\n这种类型的通道要求发送goroutine和接收goroutine同时准备好，才能完成发送和接收操作。否则，通道会导致先执行发送或接收操作的 goroutine 阻塞等待。\n\n这种对通道进行发送和接收的交互行为本身就是同步的。其中任意一个操作都无法离开另一个操作单独存在。\n\n**阻塞：**由于某种原因数据没有到达，当前go程（线程）持续处于等待状态，直到条件满足，才解除阻塞。\n\n**同步：**在两个或多个go程（线程）间，保持数据内容一致性的机制。\n\n下图展示两个 goroutine 如何利用无缓冲的通道来共享一个值：\n\n\n\n在第 1 步，两个 goroutine 都到达通道，但哪个都没有开始执行发送或者接收。\n\n● 在第 2 步，左侧的 goroutine 将它的手伸进了通道，这模拟了向通道发送数据的行为。这时，这个 goroutine 会在通道中被锁住，直到交换完成。\n\n● 在第 3 步，右侧的 goroutine 将它的手放入通道，这模拟了从通道里接收数据。这个 goroutine 一样也会在通道中被锁住，直到交换完成。\n\n● 在第 4 步和第 5 步，进行交换，并最终，在第 6 步，两个 goroutine 都将它们的手从通道里拿出来，这模拟了被锁住的 goroutine 得到释放。两个 goroutine 现在都可以去做其他事情了。\n\n无缓冲的channel创建格式：\n\n    make(chan Type)   //等价于make(chan Type, 0)\n\n\n如果没有指定缓冲区容量，那么该通道就是同步的，因此会阻塞到发送者准备好发送和接收者准备好接收。\n\n示例代码：\n\npackage main\n \nimport (\n    "fmt"\n    "time"\n)\n \nfunc main() {\n    c := make(chan int, 0) //创建无缓冲的通道 c \n \n    //内置函数 len 返回未被读取的缓冲元素数量，cap 返回缓冲区大小\n    fmt.Printf("len(c)=%d, cap(c)=%d\\n", len(c), cap(c))\n \n    go func() {\n        defer fmt.Println("子go程结束")\n \n        for i := 0; i < 3; i++ {\n            c <- i\n            fmt.Printf("子go程正在运行[%d]: len(c)=%d, cap(c)=%d\\n", i, len(c), cap(c))\n        }\n    }()\n \n    time.Sleep(2 * time.Second) //延时2s\n \n    for i := 0; i < 3; i++ {\n        num := <-c //从c中接收数据，并赋值给num\n        fmt.Println("num = ", num)\n    }\n \n    fmt.Println("main进程结束")\n}\n\n\n程序运行结果：\n\n\n\n# 有缓冲的channel\n\n有缓冲的通道（buffered channel）是一种在被接收前能存储一个或者多个数据值的通道。\n\n这种类型的通道并不强制要求 goroutine 之间必须同时完成发送和接收。通道会阻塞发送和接收动作的条件也不同。\n\n只有通道中没有要接收的值时，接收动作才会阻塞。\n\n只有通道没有可用缓冲区容纳被发送的值时，发送动作才会阻塞。\n\n这导致有缓冲的通道和无缓冲的通道之间的一个很大的不同：无缓冲的通道保证进行发送和接收的 goroutine 会在同一时间进行数据交换；有缓冲的通道没有这种保证。\n\n示例图如下：\n\n通道\n\n通道\n\n2\n\nGOROUTINE\n\nGOROUTINE\n\nGOROUTINE\n\nGOROUTINE\n\n通道\n\n通道\n\n3\n\nGOROUTINE\n\nGOROUTINE\n\nGOROUTINE\n\nGOROUTINE\n\n使用有缓冲的通道在GOROUTINE之间同步数据\n\n\n\n图片为转载\n\n● 在第 1 步，右侧的 goroutine 正在从通道接收一个值。\n\n● 在第 2 步，右侧的这个 goroutine独立完成了接收值的动作，而左侧的 goroutine 正在发送一个新值到通道里。\n\n● 在第 3 步，左侧的goroutine 还在向通道发送新值，而右侧的 goroutine 正在从通道接收另外一个值。这个步骤里的两个操作既不是同步的，也不会互相阻塞。\n\n● 最后，在第 4 步，所有的发送和接收都完成，而通道里还有几个值，也有一些空间可以存更多的值。\n\n有缓冲的channel创建格式：\n\n    make(chan Type, capacity)\n\n\n如果给定了一个缓冲区容量，通道就是异步的。只要缓冲区有未使用空间用于发送数据，或还包含可以接收的数据，那么其通信就会无阻塞地进行。\n\n借助函数 len(ch) 求取缓冲区中剩余元素个数， cap(ch) 求取缓冲区元素容量大小。\n\n示例代码：\n\nfunc main() {\n    c := make(chan int, 3) //带缓冲的通道\n \n    //内置函数 len 返回未被读取的缓冲元素数量， cap 返回缓冲区大小\n    fmt.Printf("len(c)=%d, cap(c)=%d\\n", len(c), cap(c))\n \n    go func() {\n        defer fmt.Println("子go程结束")\n \n        for i := 0; i < 3; i++ {\n            c <- i\n            fmt.Printf("子go程正在运行[%d]: len(c)=%d, cap(c)=%d\\n", i, len(c), cap(c))\n        }\n    }()\n \n    time.Sleep(2 * time.Second) //延时2s\n    for i := 0; i < 3; i++ {\n        num := <-c //从c中接收数据，并赋值给num\n        fmt.Println("num = ", num)\n    }\n    fmt.Println("main进程结束")\n}\n\n\n程序运行结果：\n\n\n\n# 关闭channel\n\n如果发送者知道，没有更多的值需要发送到channel的话，那么让接收者也能及时知道没有多余的值可接收将是有用的，因为接收者可以停止不必要的接收等待。这可以通过内置的close函数来关闭channel实现。\n\n示例代码：\n\npackage main\n \nimport (\n    "fmt"\n)\n \nfunc main() {\n    c := make(chan int)\n \n    go func() {\n        for i := 0; i < 5; i++ {\n            c <- i\n        }\n        close(c)\n    }()\n \n    for {\n        //ok为true说明channel没有关闭，为false说明管道已经关闭\n        if data, ok := <-c; ok {\n            fmt.Println(data)\n        } else {\n            break\n        }\n    }\n \n    fmt.Println("Finished")\n}\n\n\n程序运行结果：\n\n\n\n注意：\n\nl channel不像文件一样需要经常去关闭，只有当你确实没有任何发送数据了，或者你想显式的结束range循环之类的，才去关闭channel；\n\nl 关闭channel后，无法向channel 再发送数据(引发 panic 错误后导致接收立即返回零值)；\n\nl 关闭channel后，可以继续从channel接收数据；\n\nl 对于nil channel，无论收发都会被阻塞。\n\n可以使用 range 来迭代不断操作channel：\n\npackage main\n \nimport (\n    "fmt"\n)\n \nfunc main() {\n    c := make(chan int)\n \n    go func() {\n        for i := 0; i < 5; i++ {\n            c <- i\n        }\n        close(c)\n    }()\n \n    for data := range c {\n        fmt.Println(data)\n    }\n    fmt.Println("Finished")\n}\n\n\n# 单向channel及应用\n\n默认情况下，通道channel是双向的，也就是，既可以往里面发送数据也可以同里面接收数据。\n\n但是，我们经常见一个通道作为参数进行传递而只希望对方是单向使用的，要么只让它发送数据，要么只让它接收数据，这时候我们可以指定通道的方向。\n\n\n\n单向channel变量的声明非常简单，如下：\n\nvar ch1 chan int       // ch1是一个正常的channel，是双向的\nvar ch2 chan<- float64 // ch2是单向channel，只用于写float64数据\nvar ch3 <-chan int     // ch3是单向channel，只用于读int数据\n\n\nl chan<- 表示数据进入管道，要把数据写进管道，对于调用者就是输出。\n\nl <-chan 表示数据从管道出来，对于调用者就是得到管道的数据，当然就是输入。\n\n可以将 channel 隐式转换为单向队列，只收或只发，不能将单向 channel 转换为普通 channel：\n\n    c := make(chan int, 3)\n    var send chan<- int = c // send-only\n    var recv <-chan int = c // receive-only\n    send <- 1\n    //<-send //invalid operation: <-send (receive from send-only type chan<- int)\n    <-recv\n    //recv <- 2 //invalid operation: recv <- 2 (send to receive-only type <-chan int)\n \n    //不能将单向 channel 转换为普通 channel\n    d1 := (chan int)(send) //cannot convert send (type chan<- int) to type chan int\n    d2 := (chan int)(recv) //cannot convert recv (type <-chan int) to type chan int\n\n\n示例代码：\n\n//   chan<- //只写\nfunc counter(out chan<- int) {\n    defer close(out)\n    for i := 0; i < 5; i++ {\n        out <- i //如果对方不读 会阻塞\n    }\n}\n \n//   <-chan //只读\nfunc printer(in <-chan int) {\n    for num := range in {\n        fmt.Println(num)\n    }\n}\n \nfunc main() {\n    c := make(chan int) //   chan   //读写\n \n    go counter(c) //生产者\n    printer(c)    //消费者\n \n    fmt.Println("done")\n}\n\n\n\n# Select\n\n# select作用\n\nGo里面提供了一个关键字select，通过select可以监听channel上的数据流动。\n\n有时候我们希望能够借助channel发送或接收数据，并避免因为发送或者接收导致的阻塞，尤其是当channel没有准备好写或者读时。select语句就可以实现这样的功能。\n\nselect的用法与switch语言非常类似，由select开始一个新的选择块，每个选择条件由case语句来描述。\n\n与switch语句相比，select有比较多的限制，其中最大的一条限制就是每个case语句里必须是一个IO操作，大致的结构如下：\n\n    select {\n    case <- chan1:\n        // 如果chan1成功读到数据，则进行该case处理语句\n    case chan2 <- 1:\n        // 如果成功向chan2写入数据，则进行该case处理语句\n    default:\n        // 如果上面都没有成功，则进入default处理流程\n    }\n\n\n在一个select语句中，Go语言会按顺序从头至尾评估每一个发送和接收的语句。\n\n如果其中的任意一语句可以继续执行(即没有被阻塞)，那么就从那些可以执行的语句中任意选择一条来使用。\n\n如果没有任意一条语句可以执行(即所有的通道都被阻塞)，那么有两种可能的情况：\n\nl 如果给出了default语句，那么就会执行default语句，同时程序的执行会从select语句后的语句中恢复。\n\nl 如果没有default语句，那么select语句将被阻塞，直到至少有一个通信可以进行下去。\n\n示例代码：\n\npackage main\n \nimport (\n    "fmt"\n)\n \nfunc fibonacci(c, quit chan int) {\n    x, y := 1, 1\n    for {\n        select {\n        case c <- x:\n            x, y = y, x+y\n        case <-quit:\n            fmt.Println("quit")\n            return\n        }\n    }\n}\n \nfunc main() {\n    c := make(chan int)\n    quit := make(chan int)\n \n    go func() {\n        for i := 0; i < 6; i++ {\n            fmt.Println(<-c)\n        }\n        quit <- 0\n    }()\n \n    fibonacci(c, quit)\n}\n\n\n运行结果如下：\n\n\n\n若有收获，就点个赞吧',normalizedContent:'https://www.yuque.com/aceld/mo95lb/haizwm\n\n\n# 一、引言\n\n\n\n\n# golang生态拓展介绍“站在巨人的肩膀上”\n\n\n\n\n# 二、go开发环境\n\n\n# goproxy\n\ngo1.14版本之后，都推荐使用go mod模式来管理依赖了，也不再强制我们把代码必须写在gopath下面的src目录了，你可以在你电脑的任意位置编写go代码。\n\n默认goproxy配置是：goproxy=https://proxy.golang.org,direct， 由于国内访问不到 https://proxy.golang.org 所以我们需要换一个proxy，这里推荐使用https://goproxy.io 或 https://goproxy.cn。\n\n可以执行下面的命令修改goproxy：\n\n`go env -w goproxy=https://goproxy.cn,direct`\n\n\n\n# 三、golang语言特性\n\n\n# golang的优势\n\n\n\n\n\n(和动态类型的js不同)\n\n\n\n\n\npackage main\n  \nimport (\n    "fmt"\n    "time"\n)\n\nfunc gofunc(i int) {\n    fmt.println("goroutine ", i, " ...")\n}\n\nfunc main() {\n    for i := 0; i < 10000; i++ {\n        go gofunc(i) //开启一个并发协程\n    }\n\n    time.sleep(time.second)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n# golang适合做什么\n\n(1)、云计算基础设施领域\n\n代表项目：docker、kubernetes、etcd、consul、cloudflare cdn、七牛云存储等。\n\n(2)、基础后端软件\n\n代表项目：tidb、influxdb、cockroachdb等。\n\n(3)、微服务\n\n代表项目：go-kit、micro、monzo bank的typhon、bilibili等。\n\n(4)、互联网基础设施\n\n代表项目：以太坊、hyperledger等。\n\n\n# golang明星作品\n\n\n\n\n\n\n\n\n# golang的不足\n\n1、包管理，大部分包都在github上\n\n2、无泛化类型\n\n3、所有excepiton都用error来处理(比较有争议)。\n\n4、对c的降级处理，并非无缝，没有c降级到asm那么完美(序列化问题)\n\n\n# 四、golang语法新奇\n\n\n# main函数初见\n\npackage main\n\n\n  import "fmt"\n\n\n  func main() {\n          /* 简单的程序 万能的hello world */\n          fmt.println("hello go")\n  }\n\n\n$ go run test1_hello.go \nhello go\n$\n\n\n\n\ngo run 表示 直接编译go语言并执行应用程序，一步完成\n\n你也可以先编译，然后再执行\n\n\n\n * 第一行代码package main定义了包名。你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main表示一个可独立执行的程序，每个 go 应用程序都包含一个名为 main 的包。\n * 下一行**import "fmt"**告诉 go 编译器这个程序需要使用 fmt 包（的函数，或其他元素），fmt 包实现了格式化 io（输入/输出）的函数。\n * 下一行func main()是程序开始执行的函数。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。\n\n注意：这里面go语言的语法，定义函数的时候，‘{’ 必须和函数名在同一行，不能另起一行。(这个按照java的规范就ok了)\n\n * 下一行 /.../ 是注释，在程序执行时将被忽略。单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 / 开头，并以 / 结尾，且不可以嵌套使用，多行注释一般用于包的文档描述或注释成块的代码片段。\n * 下一行fmt.println(...)可以将字符串输出到控制台，并在最后自动增加换行字符 \\n。 使用 fmt.print("hello, world\\n") 可以得到相同的结果。 print 和 println 这两个函数也支持使用变量，如：fmt.println(arr)。如果没有特别指定，它们会以默认的打印格式将变量 arr 输出到控制台。\n\n\n# 变量的声明\n\n声明变量的一般形式是使用 var 关键字\n\n变量声明\n\n第一种，指定变量类型，声明后若不赋值，使用默认值0。(不赋值的话，实际上就是js的声明方式再加上type约束)\n\nvar v_name v_type\nv_name = value\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n        var a int\n        fmt.printf(" = %d\\n", a)\n}\n\n\n$go run test.go\na = 0\n\n\n第二种，根据值自行判定变量类型。\n\nvar v_name = value\n\n\n第三种，省略var, 注意 :=左侧的变量不应该是已经声明过的，否则会导致编译错误。\n\n:=声明 go语言特产\n\nv_name := value\n\n\n// 例如\nvar a int = 10\nvar b = 10\nc : = 10\n\n\n例如：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n        //第一种 使用默认值\n        var a int\n        fmt.printf("a = %d\\n", a)\n\n\n        //第二种\n        var b int = 10\n        fmt.printf("b = %d\\n", b)\n\n\n        //第三种 省略后面的数据类型,自动匹配类型\n        var c = 20\n        fmt.printf("c = %d\\n", c)\n\n\n        //第四种 省略var关键字\n        d := 3.14\n        fmt.printf("d = %f\\n", d)\n}\n\n\n\n# 多变量声明：\n\nvar(\n\na int\n\nb bool\n\n)\n\n这种写法多用于全局变量声明。并且注意中间不需要加”，“或者”；“只需要换行就好了，然后注意到，go语言好像就不需要写";"\n\npackage main\n\n\nimport "fmt"\n\n\nvar x, y int\nvar ( //这种分解的写法,一般用于声明全局变量\n        a int\n        b bool\n)\n\n\nvar c, d int = 1, 2\nvar e, f = 123, "liudanbing"\n\n\n//这种不带声明格式的只能在函数体内声明\n//g, h := 123, "需要在func函数体内实现"\n\n\nfunc main() {\n        g, h := 123, "需要在func函数体内实现"\n        fmt.println(x, y, a, b, c, d, e, f, g, h)\n\n\n        //不能对g变量再次做初始化声明\n        //g := 400\n\n\n        _, value := 7, 5  //实际上7的赋值被废弃，变量 _  不具备读特性\n        //fmt.println(_) //_变量的是读不出来的\n        fmt.println(value) //5\n}\n\n\n这样的写法就和python很像了！\n\n\n# 常量\n\n常量是一个简单值的标识符，在程序运行时，不会被修改的量。\n\n常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。\n\n常量的定义格式：\n\nconst identifier [type] = value\n\n\n你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。\n\n * 显式类型定义：\n\nconst b string = "abc"\n\n\n * 隐式类型定义：\n\nconst b = "abc"\n\n\n例如：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   const length int = 10\n   const width int = 5   \n   var area int\n   const a, b, c = 1, false, "str" //多重赋值\n\n\n   area = length * width\n   fmt.printf("面积为 : %d\\n", area)\n   println(a, b, c)   \n}\n\n\n以上实例运行结果为：\n\n面积为 : 50\n1 false str\n\n\n常量还可以用作枚举：\n\nconst (\n    unknown = 0\n    female = 1\n    male = 2\n)\n\n\n数字 0、1 和 2 分别代表未知性别、女性和男性。\n\n常量可以用len(), cap(), unsafe.sizeof()常量计算表达式的值。常量表达式中，函数必须是内置函数，否则编译不过：\n\npackage main\n\n\nimport "unsafe"\nconst (\n    a = "abc"\n    b = len(a)\n    c = unsafe.sizeof(a)\n)\n\n\nfunc main(){\n    println(a, b, c)\n}\n\n\n输出结果为：abc, 3, 16\n\n> unsafe.sizeof(a)输出的结果是16 。\n> \n> 字符串类型在 go 里是个结构, 包含指向底层数组的指针和长度,这两部分每部分都是 8 个字节，所以字符串类型大小为 16 个字节。\n\n\n# 优雅的常量 iota\n\n有些概念有名字，并且有时候我们关注这些名字，甚至（特别）是在我们代码中。\n\nconst (\n    ccvisa            = "visa"\n    ccmastercard      = "mastercard"\n    ccamericanexpress = "american express"\n)\n\n\n在其他时候，我们仅仅关注能把一个东西与其他的做区分。有些时候，有些时候一件事没有本质上的意义。比如，我们在一个数据库表中存储产品，我们可能不想以 string 存储他们的分类。我们不关注这个分类是怎样命名的，此外，该名字在市场上一直在变化。\n\n我们仅仅关注它们是怎么彼此区分的。\n\nconst (\n    categorybooks    = 0\n    categoryhealth   = 1\n    categoryclothing = 2\n)\n\n\n使用 0, 1, 和 2 代替，我们也可以选择 17， 43， 和 61。这些值是任意的。\n\n在 go，常量有许多微妙之处。当用好了，可以使得代码非常优雅且易维护的。\n\n\n# 自增长\n\n在 golang 中，一个方便的习惯就是使用iota标示符，它简化了常量用于增长数字的定义，给以上相同的值以准确的分类。\n\nconst (\n    categorybooks = iota // 0\n    categoryhealth       // 1\n    categoryclothing     // 2\n)\n\n\n(可能这种写法比较优雅吧)\n\n\n# iota和表达式\n\niota可以做更多事情，而不仅仅是 increment。更精确地说，iota总是用于 increment，但是它可以用于表达式，在常量中的存储结果值。\n\ntype allergen int\n\n\nconst (\n    igeggs allergen = 1 << iota         // 1 << 0 which is 00000001\n    igchocolate                         // 1 << 1 which is 00000010\n    ignuts                              // 1 << 2 which is 00000100\n    igstrawberries                      // 1 << 3 which is 00001000\n    igshellfish                         // 1 << 4 which is 00010000\n)\n\n\n（常量的声明中运用了iota放在表达式的写法，实际上在这个一行行声明的过程中，iota在increment，并且其它的常量都遵循这个表达式的规则。于是常量中实际存的式表达式的结果值）\n\n（iota的自增性质用于区分概念常量）\n\n这个工作是因为当你在一个const组中仅仅有一个标示符在一行的时候，它将使用增长的iota取得前面的表达式并且再运用它，。在 go 语言的spec中， 这就是所谓的隐性重复最后一个非空的表达式列表.\n\n如果你对鸡蛋，巧克力和海鲜过敏，把这些 bits 翻转到 “on” 的位置（从左到右映射 bits）。然后你将得到一个 bit 值00010011，它对应十进制的 19。\n\nfmt.println(igeggs | igchocolate | igshellfish)\n\n\n// output:\n// 19\ntype bytesize float64\n\n\nconst (\n    _           = iota                   // ignore first value by assigning to blank identifier\n    kb bytesize = 1 << (10 * iota)       // 1 << (10*1)\n    mb                                   // 1 << (10*2)\n    gb                                   // 1 << (10*3)\n    tb                                   // 1 << (10*4)\n    pb                                   // 1 << (10*5)\n    eb                                   // 1 << (10*6)\n    zb                                   // 1 << (10*7)\n    yb                                   // 1 << (10*8)\n)\n\n\n当你在把两个常量定义在一行的时候会发生什么？\n\nbanana 的值是什么？ 2 还是 3？ durian 的值又是？\n\nconst (\n    apple, banana = iota + 1, iota + 2\n    cherimoya, durian\n    elderberry, fig\n)\n\n\n在下一行增长，而不是立即取得它的引用。（这里说明引用的概念是可以套用的）\n\n// apple: 1\n// banana: 2\n// cherimoya: 2\n// durian: 3\n// elderberry: 3\n// fig: 4\n\n\n(iota是编译器编译的时候是按照行自增规则来的)\n\n\n# 函数\n\n\n# 函数返回多个值\n\ngo 函数可以返回多个值，例如：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc swap(x, y string) (string, string) {\n   return y, x\n}\n\n\nfunc main() {\n   a, b := swap("mahesh", "kumar")\n   fmt.println(a, b)\n}\n\n\n以上实例执行结果为：\n\nkumar mahesh\n\n(这个swap的写法讲实话还是挺骚的。。。)\n\n(这个写法py好像也能写)\n\n\n# init函数与import\n\n首先我们看一个例子：init函数：\n\ninit 函数可在package main中，可在其他package中，可在同一个package中出现多次。\n\nmain函数\n\nmain 函数只能在package main中。\n\n执行顺序\n\ngolang里面有两个保留的函数：init函数（能够应用于所有的package）和main函数（只能应用于package main）。这两个函数在定义时不能有任何的参数和返回值。\n\n虽然一个package里面可以写任意多个init函数，但这无论是对于可读性还是以后的可维护性来说，我们都强烈建议用户在一个package中每个文件只写一个init函数。\n\ngo程序会自动调用init()和main()，所以你不需要在任何地方调用这两个函数。每个package中的init函数都是可选的，但package main就必须包含一个main函数。\n\n程序的初始化和执行都起始于main包。\n\n如果main包还导入了其它的包，那么就会在编译时将它们依次导入。有时一个包会被多个包同时导入，那么它只会被导入一次（例如很多包可能都会用到fmt包，但它只会被导入一次，因为没有必要导入多次）。\n\n当一个包被导入时，如果该包还导入了其它的包，那么会先将其它包导入进来，然后再对这些包中的包级常量和变量进行初始化，接着执行init函数（如果有的话），依次类推。\n\n等所有被导入的包都加载完毕了，就会开始对main包中的包级常量和变量进行初始化，然后执行main包中的init函数（如果存在的话），最后执行main函数。下图详细地解释了整个执行过程：\n\n\n\n(包管理的概念，这个跟nodejs是一样的。java的spring则是用的ioc容器。)\n\n除了main包是执行完import然后是声明式然后执行init()->main()函数的逻辑\n\n其它的包都是执行完import然后是声明式然后是init()\n\n（这里的init()如果在nodejs的概念中有可能是go自动调用的export？）\n\n首先我们看一个例子：\n\n代码结构：\n\n\n\nlib1.go\n\npackage initlib1\n\nimport "fmt"\n\nfunc init() {\n    fmt.println("lib1")\n}\n\n\nlib2.go\n\npackage initlib2\n\nimport "fmt"\n\nfunc init() {\n    fmt.println("lib2")\n}\n\n\nmain.go\n\npackage main\n\nimport (\n    "fmt"\n    _ "golangtraining/initlib1"\n    _ "golangtraining/initlib2"\n)\n\nfunc init() {\n    fmt.println("libmain init")\n}\n\nfunc main() {\n    fmt.println("libmian main")\n}\n\n\n代码很简单，只是一些简单的输出\n\nlib1\nlib2\nlibmain init\nlibmian main\n\n\n输出的顺序与我们上面图给出的顺序是一致的\n\n那我们现在就改动一个地方，lib1包导入lib2，main包不管\n\npackage initlib1\n\nimport (\n    "fmt"\n    _ "golangtraining/initlib2"\n)\n\nfunc init() {\n    fmt.println("lib1")\n}\n\n\n输出：\n\nlib2\nlib1\nlibmain init\nlibmian main\n\n\nmain包以及lib1包都导入了lib2，但是只出现一次，并且最先输出，\n\n==说明如果一个包会被多个包同时导入，那么它只会被导入一次，而先输出lib2是因为main包中导入lib1时，lib1又导入了lib2，会首先初始化lib2包的东西==\n\n\n# 函数参数\n\n函数如果使用参数，该变量可称为函数的形参。\n\n形参就像定义在函数体内的局部变量。\n\n调用函数，可以通过两种方式来传递参数：\n\n# 值传递\n\n值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。\n\n默认情况下，go 语言使用的是值传递，即在调用过程中不会影响到实际参数。\n\n（java中只有值传递，只是对象（的引用）作为参数的时候传递过去的值是地址值，然后函数形参本身和对象（的引用）的地位相同，接受它的值，然后实际也是得到了对象的引用。我习惯理解成引用也是对象，值存的就是真实对象的地址值。\n\n而放到基本类型（包括string）来看就没这么麻烦了，就是传值（普遍意义上的）而已（传递了值得拷贝）\n\n）\n\n以下定义了 swap() 函数：\n\n/* 定义相互交换值的函数 */\nfunc swap(x, y int) int {\n   var temp int\n\n\n   temp = x /* 保存 x 的值 */\n   x = y    /* 将 y 值赋给 x */\n   y = temp /* 将 temp 值赋给 y*/\n\n\n   return temp;\n}\n\n\n接下来，让我们使用值传递来调用 swap() 函数：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   /* 定义局部变量 */\n   var a int = 100\n   var b int = 200\n\n\n   fmt.printf("交换前 a 的值为 : %d\\n", a )\n   fmt.printf("交换前 b 的值为 : %d\\n", b )\n\n\n   /* 通过调用函数来交换值 */\n   swap(a, b)\n\n\n   fmt.printf("交换后 a 的值 : %d\\n", a )\n   fmt.printf("交换后 b 的值 : %d\\n", b )\n}\n\n\n/* 定义相互交换值的函数 */\nfunc swap(x, y int) int {\n   var temp int\n\n\n   temp = x /* 保存 x 的值 */\n   x = y    /* 将 y 值赋给 x */\n   y = temp /* 将 temp 值赋给 y*/\n\n\n   return temp;\n}\n\n\n以下代码执行结果为：\n\n交换前 a 的值为 : 100\n\n\n\n交换前 b 的值为 : 200\n\n\n\n交换后 a 的值 : 100\n\n\n\n交换后 b 的值 : 200\n\n\n# 引用传递(指针传递)\n\n指针\n\ngo 语言中指针是很容易学习的，go 语言中使用指针可以更简单的执行一些任务。\n\n接下来让我们来一步步学习 go 语言指针。\n\n我们都知道，变量是一种使用方便的占位符，用于引用计算机内存地址。\n\ngo 语言的取地址符是 &，放到一个变量前使用就会返回相应变量的内存地址。\n\n以下实例演示了变量在内存中地址：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   var a int = 10   \n\n\n   fmt.printf("变量的地址: %x\\n", &a  )\n}\n\n\n执行以上代码输出结果为：\n\n变量的地址: 20818a220\n\n\n现在我们已经了解了什么是内存地址和如何去访问它。接下来我们将具体介绍指针。\n\n引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。\n\n引用传递指针参数传递到函数内，以下是交换函数 swap() 使用了引用传递：\n\n/* 定义交换值函数*/\nfunc swap(x *int, y *int) {\n   var temp int\n   temp = *x    /* 保持 x 地址上的值 */\n   *x = *y      /* 将 y 值赋给 x */\n   *y = temp    /* 将 temp 值赋给 y */\n}\n\n\n以下我们通过使用引用传递来调用 swap() 函数：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   /* 定义局部变量 */\n   var a int = 100\n   var b int= 200\n\n\n   fmt.printf("交换前，a 的值 : %d\\n", a )\n   fmt.printf("交换前，b 的值 : %d\\n", b )\n\n\n   /* 调用 swap() 函数\n   * &a 指向 a 指针，a 变量的地址\n   * &b 指向 b 指针，b 变量的地址\n   */\n   swap(&a, &b)\n\n\n   fmt.printf("交换后，a 的值 : %d\\n", a )\n   fmt.printf("交换后，b 的值 : %d\\n", b )\n}\n\n\nfunc swap(x *int, y *int) {\n   var temp int\n   temp = *x    /* 保存 x 地址上的值 */\n   *x = *y      /* 将 y 值赋给 x */\n   *y = temp    /* 将 temp 值赋给 y */\n}\n\n\n(java中由于只有传值，所以想做到和它们这种支持传址（传引用）的语言相比就麻烦些。需要用到数组等对象辅助)\n\n(传值就是形参获取实参的值的拷贝。传址就是形参获取实参的地址，直接对地址操作)\n\n//交换两个整数\nprivate static void swap(int[] source, int i, int j) {\n\n    int temp = source[i];\n    source[i] = source[j];\n    source[j] = temp;\n}\n\n\n\n# 匿名函数和闭包\n\n详细解释：\n\n在go语言中匿名函数和闭包是一个概念：\n\n闭包是可以包含自由（未绑定到特定对象）变量的代码块，这些变量不在这个代码块内或者 任何全局上下文中定义，而是在定义代码块的环境中定义。要执行的代码块（由于自由变量包含 在代码块中，所以这些自由变量以及它们引用的对象没有被释放）为自由变量提供绑定的计算环 境（作用域）。\n\n闭包的价值: 闭包的价值在于可以作为函数对象或者匿名函数，对于类型系统而言，这意味着不仅要表示 数据还要表示代码。支持闭包的多数语言都将函数作为第一级对象，就是说这些函数可以存储到 变量中作为参数传递给其他函数，最重要的是能够被函数动态创建和返回。(总的来说就是可以使用匿名函数返回，匿名函数层层依赖到外面的变量)\n\ngo语言中的闭包同样也会引用到函数外的变量。闭包的实现确保只要闭包还被使用，那么被闭包引用的变量会一直存在。\n\n例子：\n\ngo 函数可以是一个闭包。闭包是一个函数值（就是return的那个玩意），它引用了其函数体之外的变量（adder()中的sum）。该函数可以访问并赋予其引用的变量的值(sum)，换句话说，该函数（匿名的函数）被这些变量（sum）“绑定”在一起。\n\n例如，函数 adder 返回一个闭包。每个闭包都被绑定在其各自的 sum 变量上。\n\npackage main\n\n\nfunc adder() func(int) int {\n\tsum := 0\n\treturn func(x int) int {\n\t\tsum += x\n\t\treturn sum\n\t}\n}\n\nfunc main() {\n\tpos, neg := adder(), adder()\n\tfor i := 0; i < 10; i++ {\n\t\tfmt.println(\n\t\t\tpos(i),\n\t\t\tneg(-2*i),\n\t\t)\n\t}\n}import "fmt"\n\n\n这里就可以很好的理解我们刚才的解释了，在函数addr()中，sum这个变量就被”包“在了另一个匿名函数中了。这个匿名函数就是我们上面的自由变量的概念。\n\n\n# slice和map\n\n==go 语言切片是对数组的抽象。==\n\ngo 数组的长度不可改变，在特定场景中这样的集合就不太适用，go中提供了一种灵活，功能强悍的内置类型切片("动态数组"),与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。\n\n# 定义切片\n\n你可以声明一个未指定大小的数组来定义切片：\n\nvar identifier []type\n\n\n切片不需要说明长度。\n\n或使用make()函数来创建切片:\n\nvar slice1 []type = make([]type, len)\n\n\n也可以简写为\n\n\nslice1 := make([]type, len)\n\n\n也可以指定容量，其中capacity为可选参数。\n\nmake([]t, length, capacity)\n\n\n这里 len 是数组的长度并且也是切片的初始长度。\n\n# 切片初始化\n\ns :=[] int {1,2,3 }\n\n\n直接初始化切片，[]表示是切片类型，{1,2,3}初始化值依次是1,2,3.其cap=len=3\n\ns := arr[:]\n\n\n初始化切片s,是数组arr的引用\n\ns := arr[startindex:endindex]\n\n\n将arr中从下标startindex到endindex-1 下的元素创建为一个新的切片\n\ns := arr[startindex:]\n\n\n缺省endindex时将表示一直到arr的最后一个元素\n\ns := arr[:endindex]\n\n\n缺省startindex时将表示从arr的第一个元素开始\n\ns1 := s[startindex:endindex]\n\n\n通过切片s初始化切片s1\n\ns :=make([]int,len,cap)\n\n\n通过内置函数make()初始化切片s,[]int 标识为其元素类型为int的切片\n\n# len() 和 cap() 函数\n\n切片是可索引的，并且可以由 len() 方法获取长度。\n\n切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。\n\n以下为具体实例：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   var numbers = make([]int,3,5)\n\n\n   printslice(numbers)\n}\n\n\nfunc printslice(x []int){\n   fmt.printf("len=%d cap=%d slice=%v\\n",len(x),cap(x),x)\n}\n\n\n以上实例运行输出结果为:\n\nlen=3 cap=5 slice=[0 0 0]\n\n\n# 空(nil)切片\n\n一个切片在未初始化之前默认为 nil，长度为 0，实例如下：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   var numbers []int\n\n\n   printslice(numbers)\n\n\n   if(numbers == nil){\n      fmt.printf("切片是空的")\n   }\n}\n\n\nfunc printslice(x []int){\n   fmt.printf("len=%d cap=%d slice=%v\\n",len(x),cap(x),x)\n}\n\n\n以上实例运行输出结果为:\n\nlen=0 cap=0 slice=[]\n切片是空的\n\n\n# 切片截取\n\n可以通过设置下限及上限来设置截取切片*[lower-bound:upper-bound]*，实例如下：\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   /* 创建切片 */\n   numbers := []int{0,1,2,3,4,5,6,7,8}   \n   printslice(numbers)\n\n\n   /* 打印原始切片 */\n   fmt.println("numbers ==", numbers)\n\n\n   /* 打印子切片从索引1(包含) 到索引4(不包含)*/\n   fmt.println("numbers[1:4] ==", numbers[1:4])\n\n\n   /* 默认下限为 0*/\n   fmt.println("numbers[:3] ==", numbers[:3])\n\n\n   /* 默认上限为 len(s)*/\n   fmt.println("numbers[4:] ==", numbers[4:])\n\n\n   numbers1 := make([]int,0,5)\n   printslice(numbers1)\n\n\n   /* 打印子切片从索引  0(包含) 到索引 2(不包含) */\n   number2 := numbers[:2]\n   printslice(number2)\n\n\n   /* 打印子切片从索引 2(包含) 到索引 5(不包含) */\n   number3 := numbers[2:5]\n   printslice(number3)\n\n\n}\n\n\nfunc printslice(x []int){\n   fmt.printf("len=%d cap=%d slice=%v\\n",len(x),cap(x),x)\n}\n\n\n执行以上代码输出结果为：\n\nlen=9 cap=9 slice=[0 1 2 3 4 5 6 7 8]\nnumbers == [0 1 2 3 4 5 6 7 8]\nnumbers[1:4] == [1 2 3]\nnumbers[:3] == [0 1 2]\nnumbers[4:] == [4 5 6 7 8]\nlen=0 cap=5 slice=[]\nlen=2 cap=9 slice=[0 1]\nlen=3 cap=7 slice=[2 3 4]\n\n\n# append() 和 copy() 函数\n\n如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。\n\n下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法。\n\npackage main\n\n\nimport "fmt"\n\n\nfunc main() {\n   var numbers []int\n   printslice(numbers)\n\n\n   /* 允许追加空切片 */\n   numbers = append(numbers, 0)\n   printslice(numbers)\n\n\n   /* 向切片添加一个元素 */\n   numbers = append(numbers, 1)\n   printslice(numbers)\n\n\n   /* 同时添加多个元素 */\n   numbers = append(numbers, 2,3,4)\n   printslice(numbers)\n\n\n   /* 创建切片 numbers1 是之前切片的两倍容量*/\n   numbers1 := make([]int, len(numbers), (cap(numbers))*2)\n\n\n   /* 拷贝 numbers 的内容到 numbers1 */\n   copy(numbers1,numbers)\n   printslice(numbers1)   \n}\n\n\nfunc printslice(x []int){\n   fmt.printf("len=%d cap=%d slice=%v\\n",len(x),cap(x),x)\n}\n\n\n以上代码执行输出结果为：\n\nlen=0 cap=0 slice=[]\nlen=1 cap=1 slice=[0]\nlen=2 cap=2 slice=[0 1]\nlen=5 cap=6 slice=[0 1 2 3 4]\nlen=5 cap=12 slice=[0 1 2 3 4]\n\n\n# map\n\nmap和slice类似，只不过是数据结构不同，下面是map的一些声明方式。\n\npackage main\nimport (\n    "fmt"\n)\n\nfunc main() {\n    //第一种声明\n    var test1 map[string]string\n    //在使用map前，需要先make，make的作用就是给map分配数据空间\n    test1 = make(map[string]string, 10) \n    test1["one"] = "php"\n    test1["two"] = "golang"\n    test1["three"] = "java"\n    fmt.println(test1) //map[two:golang three:java one:php]\n\n\n    //第二种声明\n    test2 := make(map[string]string)\n    test2["one"] = "php"\n    test2["two"] = "golang"\n    test2["three"] = "java"\n    fmt.println(test2) //map[one:php two:golang three:java]\n\n    //第三种声明\n    test3 := map[string]string{\n        "one" : "php",\n        "two" : "golang",\n        "three" : "java",\n    }\n    fmt.println(test3) //map[one:php two:golang three:java]\n\n\n    \n    language := make(map[string]map[string]string)\n    language["php"] = make(map[string]string, 2)\n    language["php"]["id"] = "1"\n    language["php"]["desc"] = "php是世界上最美的语言"\n    language["golang"] = make(map[string]string, 2)\n    language["golang"]["id"] = "2"\n    language["golang"]["desc"] = "golang抗并发非常good"\n    \n    fmt.println(language) //map[php:map[id:1 desc:php是世界上最美的语言] golang:map[id:2 desc:golang抗并发非常good]]\n\n\n    //增删改查\n    // val, key := language["php"]  //查找是否有php这个子元素\n    // if key {\n    //     fmt.printf("%v", val)\n    // } else {\n    //     fmt.printf("no");\n    // }\n\n    //language["php"]["id"] = "3" //修改了php子元素的id值\n    //language["php"]["nickname"] = "啪啪啪" //增加php元素里的nickname值\n    //delete(language, "php")  //删除了php子元素\n    fmt.println(language)\n}\n\n\n\n# 面向对象的特征\n\n# 方法\n\n假设有两个方法，一个方法的接收者是指针类型，一个方法的接收者是值类型，那么：\n\n * 对于值类型的变量和指针类型的变量，这两个方法有什么区别？\n * 如果这两个方法是为了实现一个接口，那么这两个方法都可以调用吗？\n * 如果方法是嵌入到其他结构体中的，那么上面两种情况又是怎样的？\n\npackage main\n\n\nimport "fmt"\n\n\n//定义一个结构体\ntype t struct {\n    name string\n}\n\n\nfunc (t t) method1() {\n    t.name = "new name1"\n}\n\n\nfunc (t *t) method2() {\n    t.name = "new name2"\n}\n\n\nfunc main() {\n\n\n    t := t{"old name"}\n\n\n    fmt.println("method1 调用前 ", t.name)\n    t.method1()\n    fmt.println("method1 调用后 ", t.name)\n\n\n    fmt.println("method2 调用前 ", t.name)\n    t.method2()\n    fmt.println("method2 调用后 ", t.name)\n}\n\n\nmethod1 调用前  old name\nmethod1 调用后  old name\nmethod2 调用前  old name\nmethod2 调用后  new name2\n\n\n当调用t.method1()时相当于method1(t)，实参和行参都是类型 t，可以接受。此时在method1()中的t只是参数t的值拷贝，所以method1()的修改影响不到main中的t变量。\n\n当调用t.method2()=>method2(t)，这是将 t 类型传给了 *t 类型，go可能会取 t 的地址传进去：method2(&t)。所以 method1() 的修改可以影响 t。\n\nt 类型的变量这两个方法都是拥有的。\n\n# 心法\n\n(这里想用java的方式理解可能会比较困难。毕竟go和js的自定义类一样都是不被class结构给约束的，这里可以看出，正常的成员变量声明还是放在结构里面的。然后方法参考js，对象是通过原型，直接无中生有一个引用来接收方法对象。所以实际上我们可以想到只要给了方法类型的对象的地址就好了，这样就能操作对象里面的成员了。怎么个给法就是语法问题。==所以感觉golang编程的时候不用太关心类和对象的概念，只需要清楚你想达到这种效果需要什么条件，然后按照语法把条件给它，最后达到的效果实际上每个语言都是一样的==)\n\n(==然后这里点名表扬一下java是可以做到完全带着概念编程的==)\n\n# 方法值和方法表达式\n\n# 方法值\n\n我们经常选择一个方法，并且在同一个表达式里执行，比如常见的p.distance()形式，实际上将其分成两步来执行也是可能的。p.distance叫作“选择器”，\n\n选择器会返回一个方法"值"\n\n一个将方法(point.distance)绑定到特定接收器变量的函数。\n\n这个函数可以不通过指定其接收器即可被调用；即调用时不需要指定接收器，只要传入函数的参数即可：\n\npackage main\n\n\nimport "fmt"\nimport "math"\n\n\ntype point struct{ x, y float64 }\n\n\n//这是给struct point类型定义一个方法\nfunc (p point) distance(q point) float64 {\n    return math.hypot(q.x-p.x, q.y-p.y)\n}\n\n\nfunc main() {\n\n\n    p := point{1, 2}\n    q := point{4, 6}\n\n\n    distanceformp := p.distance   // 方法值(相当于c语言的函数地址,函数指针)\n    fmt.println(distanceformp(q)) // "5"\n    fmt.println(p.distance(q))    // "5"\n\n\n    //实际上distanceformp 就绑定了 p接收器的方法distance\n\n\n    distanceformq := q.distance   //\n    fmt.println(distanceformq(p)) // "5"\n    fmt.println(q.distance(p))    // "5"\n\n\n    //实际上distanceformq 就绑定了 q接收器的方法distance\n}\n\n\n在一个包的api需要一个函数值、且调用方希望操作的是某一个绑定了对象的方法的话，方法"值"会非常实用.\n\n举例来说，下面例子中的time.afterfunc这个函数的功能是在指定的延迟时间之后来执行一个(译注：另外的)函数。且这个函数操作的是一个rocket对象r\n\ntype rocket struct { /* ... */ }\nfunc (r *rocket) launch() { /* ... */ }\nr := new(rocket)\ntime.afterfunc(10 * time.second, func() { r.launch() })\n\n\n直接用方法"值"传入afterfunc的话可以更为简短：\n\ntime.afterfunc(10 * time.second, r.launch)\n\n\n省掉了上面那个例子里的匿名函数。\n\n(嘛，这个方法"值"的概念感觉吹的有点花哨了，实际上就是可以理解成是方法对象嘛，选择器不就是方法对象的引用名嘛,只是清楚这个选择器是主动自动返回方法"值"的就行)\n\n# 方法表达式\n\n和方法"值"相关的还有方法表达式。当调用一个方法时，与调用一个普通的函数相比，我们必须要用选择器(p.distance)语法来指定方法的接收器。\n\n当t是一个类型时，方法表达式可能会写作t.f或者(*t).f，会返回一个函数"值"，这种函数会将其第一个参数用作接收器，所以可以用通常(译注：不写选择器)的方式来对其进行调用：\n\npackage main\n\n\nimport "fmt"\nimport "math"\n\n\ntype point struct{ x, y float64 }\n\n\n//这是给struct point类型定义一个方法\nfunc (p point) distance(q point) float64 {\n    return math.hypot(q.x-p.x, q.y-p.y)\n}\n\n\nfunc main() {\n\n\n    p := point{1, 2}\n    q := point{4, 6}\n\n\n\n\n    distance1 := point.distance //方法表达式, 是一个函数值(相当于c语言的函数指针)\n    fmt.println(distance1(p, q))\n    fmt.printf("%t\\n", distance1) //%t表示打出数据类型 ,这个必须放在printf使用\n\n\n    distance2 := (*point).distance //方法表达式,必须传递指针类型\n    distance2(&p, q)\n    fmt.printf("%t\\n", distance2)\n\n\n}\n\n\n执行结果\n\n5\nfunc(main.point, main.point) float64\nfunc(*main.point, main.point) float64\n// 这个distance实际上是指定了point对象为接收器的一个方法func (p point) distance()，\n// 但通过point.distance得到的函数需要比实际的distance方法多一个参数，\n// 即其需要用第一个额外参数指定接收器，后面排列distance方法的参数。\n// 看起来本书中函数和方法的区别是指有没有接收器，而不像其他语言那样是指有没有返回值。\n\n\n当你根据一个变量来决定调用同一个类型的哪个函数时，方法表达式就显得很有用了。你可以根据选择来调用接收器各不相同的方法。下面的例子，变量op代表point类型的addition或者subtraction方法，path.translateby方法会为其path数组中的每一个point来调用对应的方法：\n\npackage main\n\n\nimport "fmt"\nimport "math"\n\n\ntype point struct{ x, y float64 }\n\n\n//这是给struct point类型定义一个方法\nfunc (p point) distance(q point) float64 {\n        return math.hypot(q.x-p.x, q.y-p.y)\n}\n\n\nfunc (p point) add(another point) point {\n        return point{p.x + another.x, p.y + another.y}\n}\n\n\nfunc (p point) sub(another point) point {\n        return point{p.x - another.x, p.y - another.y}\n}\n\n\nfunc (p point) print() {\n        fmt.printf("{%f, %f}\\n", p.x, p.y)\n}\n\n\n//定义一个point切片类型 path\ntype path []point\n\n\n//方法的接收器 是path类型数据, 方法的选择器是translateby(point, bool)\nfunc (path path) translateby(another point, add bool) {\n        var op func(p, q point) point //定义一个 op变量 类型是方法表达式 能够接收add,和 sub方法\n        if add == true {\n                op = point.add //给op变量赋值为add方法\n        } else {\n                op = point.sub //给op变量赋值为sub方法\n        }\n\n\n        for i := range path {\n                //调用 path[i].add(another) 或者 path[i].sub(another)\n                path[i] = op(path[i], another)\n                path[i].print()\n        }\n}\n\n\nfunc main() {\n\n        points := path{\n                {10, 10},\n                {11, 11},\n        }\n\n\n        anotherpoint := point{5, 5}\n\n\n        points.translateby(anotherpoint, false)\n\n\n        fmt.println("------------------")\n\n\n        points.translateby(anotherpoint, true)\n}\n\n\n运行结果：\n\n{5.000000, 5.000000}\n{6.000000, 6.000000}\n------------------\n{10.000000, 10.000000}\n{11.000000, 11.000000}\n\n\n# 理清楚\n\ngo 语言的方法非常纯粹， 可以看作特殊类型的函数， 其显式地将对象实例或指针作为函数的第一个参数， 并且参数名可以自己指定， 而不强制要求一定是 this 或 self 。这个对象实例或指针称为方法的接收者（reciever）。\n\n（给方法找个归属，它是在哪个类里面的，哪个对象里面的。或者直接理解成方法的调用者就好了嘛，就是this的概念!只是可以写在前面，或者让编译器指定参数表中的第一个参数为这个角色）\n\n为命名类型定义方法的语法格式如下：\n\n// 类型方法接收者是值类型\nfunc (t typename) methodname (paramlist ) (returnlist) {\n\t//method body\n}\n\n// 类型方法接收者是指针\nfunc (t *typename) methodname (paramlist) (returnlist) {\n\t//method body\n}\n\n\n说明：\n\nt 是接收者或者叫接收器变量，官方建议使用接收器类型名 typename 的 第一个小写字母，而不是 self 、 this 之类的命名。例如， socket 类型的接收器变量应该命名为 s， connector 类型的接收器变量应该命名为 c 等；\n\ntypename 为命名类型的类型名；\n\nmethodname 为方法名，是一个自定义标识符；\n\nparamlist 是形参列表；\n\nreturnlist 是返回值列表；\n\n接收者的定义和普通变量、函数参数等一样，前面是变量名，后面是接收者类型。\n\ngo 方法实质上是以方法的 receiver 参数作为第一个参数的普通函数，没有使用隐式的指针，我们可以将类型的方法改写为常规的函数。示例如下：\n\n//类型方法接收者是值类型\nfunc typname_methodname(t typename , otherparamlist) (returnlist) {\n\t//method body\n}\n//类型方法接收者是指针\nfunc typname_methodname (t *typename , otherparamlist) (returnlist) {\n\t//method body\n}\n\n\n# receiver可以使用指针\n\npackage main\n\nimport "fmt"\n\ntype mystruct struct {\n    x int\n}\n\nfunc (m mystruct) set1() {\n    m.x = 1\n}\n\nfunc (m *mystruct) set2() {\n    m.x = 2\n}\n\nfunc main() {\n    s := mystruct{x: 0}\n    s.set1()\n    fmt.println(s.x)\n    s.set2()\n    fmt.println(s.x)\n}\n\n\n输出\n\n0\n2\n\n\n可以看出，set1并没有修改值，set2才修改了值，是因为指针receiver才是修改原来的值，否则只是复制变量出来成为函数里的局部变量\n\n# 如何判断receiver是否要用指针\n\nmethod的value receiver和pointer receiver怎么选择，官方说了2个原因来使用pointer receiver\n\n 1. 需要修改原来的值\n 2. 防止每次调用method时候都拷贝value，比如当struct很大的时候每次都拷贝value会降低效率\n\n下面是我个人理解，不一定准确：\n\n实际应用中，有一个情况是不能用pointer receiver：pointer可能造成安全风险，例如某个method只是要获取金额，而不是修改金额，那么使用pointer的话就存在当内存被泄露等情况导致金额被修改。\n\n因此，若没有涉及性能问题，且method的功能是读，而非写的时候，首选value receiver\n\n\n# interface与类型断言\n\ngolang的语言中提供了断言的功能。golang中的所有程序都实现了interface{}的接口，这意味着，所有的类型如string,int,int64甚至是自定义的struct类型都就此拥有了interface{}的接口，这种做法和java中的object类型比较类似。那么在一个数据通过func funcname(interface{})的方式传进来的时候，也就意味着这个参数被自动的转为interface{}的类型。\n\nfunc funcname(a interface{}) string {\n     return string(a)\n}\n\n\n编译器会返回\n\ncannot convert a (type interface{}) to type string: need type assertion\n\n\n此时，意味着整个转化的过程需要类型断言。类型断言有以下几种形式：(其实就是类型转型)\n\n1）直接断言使用\n\nvar a interface{}\n\n\nfmt.println("where are you,jonny?", a.(string))\n\n\n但是如果断言失败一般会导致panic的发生。所以为了防止panic的发生，我们需要在断言前进行一定的判断\n\nvalue, ok := a.(string)\n\n\n如果断言失败，那么ok的值将会是false,但是如果断言成功ok的值将会是true,同时value将会得到所期待的正确的值。示例：\n\nvalue, ok := a.(string)\nif !ok {\n    fmt.println("it\'s not ok for type string")\n    return\n}\nfmt.println("the value is ", value)\n\n\n完整例子如下：\n\npackage main\n\n\nimport "fmt"\n\n\n/*\nfunc funcname(a interface{}) string {\n        return string(a)\n}\n*/\n\n\nfunc funcname(a interface{}) string {\n        value, ok := a.(string)\n        if !ok {\n                fmt.println("it is not ok for type string")\n                return ""\n        }\n        fmt.println("the value is ", value)\n\n\n        return value\n}\n\n\nfunc main() {\n        //      str := "123"\n        //      funcname(str)\n        //var a interface{}\n        //var a string = "123"\n        var a int = 10\n        funcname(a)\n}\n\n\n2）配合switch使用\n\nvar t interface{}\nt = functionofsometype()\nswitch t := t.(type) {\ndefault:\n    fmt.printf("unexpected type %t", t)       // %t prints whatever type t has\ncase bool:\n    fmt.printf("boolean %t\\n", t)             // t has type bool\ncase int:\n    fmt.printf("integer %d\\n", t)             // t has type int\ncase *bool:\n    fmt.printf("pointer to boolean %t\\n", *t) // t has type *bool\ncase *int:\n    fmt.printf("pointer to integer %d\\n", *t) // t has type *int\n}\n\n\n或者如下使用方法\n\nfunc sqlquote(x interface{}) string {\n    if x == nil {\n        return "null"\n    } else if _, ok := x.(int); ok {\n        return fmt.sprintf("%d", x)\n    } else if _, ok := x.(uint); ok {\n        return fmt.sprintf("%d", x)\n    } else if b, ok := x.(bool); ok {\n        if b {\n            return "true"\n        }\n        return "false"\n    } else if s, ok := x.(string); ok {\n        return sqlquotestring(s) // (not shown)\n    } else {\n        panic(fmt.sprintf("unexpected type %t: %v", x, x))\n    }\n}\n\n\n\n# 反射reflect\n\n# 编程语言中反射的概念\n\n在计算机科学领域，反射是指一类应用，它们能够自描述和自控制。也就是说，这类应用通过采用某种机制来实现对自己行为的描述（self-representation）和监测（examination），并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。\n\n每种语言的反射模型都不同，并且有些语言根本不支持反射。golang语言实现了反射，反射机制就是在运行时动态的调用对象的方法和属性，官方自带的reflect包就是反射相关的，只要包含这个包就可以使用。\n\n多插一句，golang的grpc也是通过反射实现的。\n\n# interface 和 反射\n\n在讲反射之前，先来看看golang关于类型设计的一些原则\n\n * 变量包括（type, value）两部分\n * type 包括 static type和concrete type. 简单来说 static type是你在编码是看见的类型(如int、string)，concrete type是runtime系统看见的类型\n * 类型断言能否成功，取决于变量的concrete type，而不是static type. 因此，一个 reader变量如果它的concrete type也实现了write方法的话，它也可以被类型断言为writer.\n\n接下来要讲的反射，就是建立在类型之上的，golang的指定类型的变量的类型是静态的（也就是指定int、string这些的变量，它的type是static type），在创建变量的时候就已经确定，反射主要与golang的interface类型相关（它的type是concrete type），只有interface类型才有反射一说。\n\n在golang的实现中，每个interface变量都有一个对应pair，pair中记录了实际变量的值和类型:\n\n(value, type)\n\n\nvalue是实际变量值，type是实际变量的类型。一个interface{}类型的变量包含了2个指针，一个指针指向值的类型【对应concrete type】，另外一个指针指向实际的值【对应value】。\n\n例如，创建类型为*os.file的变量，然后将其赋给一个接口变量r：\n\ntty, err := os.openfile("/dev/tty", os.o_rdwr, 0)\n\nvar r io.reader\nr = tty\n\n\n接口变量r的pair中将记录如下信息：(tty, *os.file)，这个pair在接口变量的连续赋值过程中是不变的，将接口变量r赋给另一个接口变量w:\n\nvar w io.writer\nw = r.(io.writer)\n\n\n接口变量w的pair与r的pair相同，都是:(tty, *os.file)，即使w是空接口类型，pair也是不变的。\n\ninterface及其pair的存在，是golang中实现反射的前提，理解了pair，就更容易理解反射。反射就是用来检测存储在接口变量内部(值value；类型concrete type) pair对的一种机制。\n\npackage main\n\nimport (\n\t"fmt"\n\t"io"\n\t"os"\n)\n\n\nfunc main() {\n\ttty, err := os.openfile("/dev/tty", os.o_rdwr, 0)\n\tif err != nil {\n\t\tfmt.println("open file error", err)\n\t\treturn\n\t}\n\n\tvar r io.reader\n\tr = tty\n\n\tvar w io.writer\n\tw = r.(io.writer)\n\tw.write([]byte("hello this is a test!!!\\n"))\n}\n\n\n再比如:\n\npackage main\n\nimport "fmt"\n\ntype reader interface {\n\treadbook()\n}\n\ntype writer interface {\n\twritebook()\n}\n\n//具体类型\ntype book struct {\n}\n\nfunc (this *book) readbook() {\n\tfmt.println("read a book.")\n}\n\nfunc (this *book) writebook() {\n\tfmt.println("write a book.")\n}\n\nfunc main() {\n\tb := &book{}\n\n\tvar r reader\n\tr = b\n\n\tr.readbook()\n\n\tvar w writer\n\tw = r.(writer)\n\tw.writebook()\n}\n\n\n# golang的反射reflect\n\nreflect的基本功能typeof和valueof\n\n既然反射就是用来检测存储在接口变量内部(值value；类型concrete type) pair对的一种机制。那么在golang的reflect反射包中有什么样的方式可以让我们直接获取到变量内部的信息呢？ 它提供了两种类型（或者说两个方法）让我们可以很容易的访问接口变量内容，分别是reflect.valueof() 和 reflect.typeof()，看看官方的解释\n\n// valueof returns a new value initialized to the concrete value\n// stored in the interface i.  valueof(nil) returns the zero \nfunc valueof(i interface{}) value {...}\n\n//valueof用来获取输入参数接口中的数据的值，如果接口为空则返回0\n\n\n// typeof returns the reflection type that represents the dynamic type of i.\n// if i is a nil interface value, typeof returns nil.\nfunc typeof(i interface{}) type {...}\n\n//typeof用来动态获取输入参数接口中的值的类型，如果接口为空则返回nil\n\n\nreflect.typeof()是获取pair中的type，reflect.valueof()获取pair中的value，示例如下：\n\npackage main\n\nimport (\n    "fmt"\n    "reflect"\n)\n\nfunc main() {\n    var num float64 = 1.2345\n\n    fmt.println("type: ", reflect.typeof(num))\n    fmt.println("value: ", reflect.valueof(num))\n}\n\n运行结果:\ntype:  float64\nvalue:  1.2345\n\n\n说明\n\n 1. reflect.typeof： 直接给到了我们想要的type类型，如float64、int、各种pointer、struct 等等真实的类型\n 2. reflect.valueof：直接给到了我们想要的具体的值，如1.2345这个具体数值，或者类似&{1 "allen.wu" 25} 这样的结构体struct的值\n 3. 也就是说明反射可以将“接口类型变量”转换为“反射类型对象”，反射类型指的是reflect.type和reflect.value这两种\n\n从relfect.value中获取接口interface的信息\n\n当执行reflect.valueof(interface)之后，就得到了一个类型为”relfect.value”变量，可以通过它本身的interface()方法获得接口变量的真实内容，然后可以通过类型判断进行转换，转换为原有真实类型。不过，我们可能是已知原有类型，也有可能是未知原有类型，因此，下面分两种情况进行说明。\n\n已知原有类型【进行“强制转换”】\n\n已知类型后转换为其对应的类型的做法如下，直接通过interface方法然后强制转换，如下：\n\nrealvalue := value.interface().(已知的类型)\n\n\n示例如下：\n\npackage main\n\nimport (\n    "fmt"\n    "reflect"\n)\n\nfunc main() {\n    var num float64 = 1.2345\n\n    pointer := reflect.valueof(&num)\n    value := reflect.valueof(num)\n\n    // 可以理解为“强制转换”，但是需要注意的时候，转换的时候，如果转换的类型不完全符合，则直接panic\n    // golang 对类型要求非常严格，类型一定要完全符合\n    // 如下两个，一个是*float64，一个是float64，如果弄混，则会panic\n    convertpointer := pointer.interface().(*float64)\n    convertvalue := value.interface().(float64)\n\n    fmt.println(convertpointer)\n    fmt.println(convertvalue)\n}\n\n运行结果：\n0xc42000e238\n1.2345\n\n\n说明\n\n 1. 转换的时候，如果转换的类型不完全符合，则直接panic，类型要求非常严格！\n 2. 转换的时候，要区分是指针还是指\n 3. 也就是说反射可以将“反射类型对象”再重新转换为“接口类型变量”\n\n未知原有类型【遍历探测其filed】\n\n很多情况下，我们可能并不知道其具体类型，那么这个时候，该如何做呢？需要我们进行遍历探测其filed来得知，示例如下:\n\npackage main\n\nimport (\n    "fmt"\n    "reflect"\n)\n\ntype user struct {\n    id   int\n    name string\n    age  int\n}\n\nfunc (u user) reflectcallfunc() {\n    fmt.println("allen.wu reflectcallfunc")\n}\n\nfunc main() {\n\n    user := user{1, "allen.wu", 25}\n\n    dofiledandmethod(user)\n\n}\n\n// 通过接口来获取任意参数，然后一一揭晓\nfunc dofiledandmethod(input interface{}) {\n\n    gettype := reflect.typeof(input)\n    fmt.println("get type is :", gettype.name())\n\n    getvalue := reflect.valueof(input)\n    fmt.println("get all fields is:", getvalue)\n\n    // 获取方法字段\n    // 1. 先获取interface的reflect.type，然后通过numfield进行遍历\n    // 2. 再通过reflect.type的field获取其field\n    // 3. 最后通过field的interface()得到对应的value\n    for i := 0; i < gettype.numfield(); i++ {\n        field := gettype.field(i)\n        value := getvalue.field(i).interface()\n        fmt.printf("%s: %v = %v\\n", field.name, field.type, value)\n    }\n\n    // 获取方法\n    // 1. 先获取interface的reflect.type，然后通过.nummethod进行遍历\n    for i := 0; i < gettype.nummethod(); i++ {\n        m := gettype.method(i)\n        fmt.printf("%s: %v\\n", m.name, m.type)\n    }\n}\n\n运行结果：\nget type is : user\nget all fields is: {1 allen.wu 25}\nid: int = 1\nname: string = allen.wu\nage: int = 25\nreflectcallfunc: func(main.user)\n\n\n说明\n\n通过运行结果可以得知获取未知类型的interface的具体变量及其类型的步骤为：\n\n1先获取interface的reflect.type，然后通过numfield进行遍历\n\n2再通过reflect.type的field获取其field\n\n3最后通过field的interface()得到对应的value\n\n通过运行结果可以得知获取未知类型的interface的所属方法（函数）的步骤为：\n\n1先获取interface的reflect.type，然后通过nummethod进行遍历\n\n2再分别通过reflect.type的method获取对应的真实的方法（函数）\n\n3最后对结果取其name和type得知具体的方法名\n\n4也就是说反射可以将“反射类型对象”再重新转换为“接口类型变量”\n\n5struct 或者 struct 的嵌套都是一样的判断处理方式\n\n# 通过reflect.value设置实际变量的值\n\nreflect.value是通过reflect.valueof(x)获得的，只有当x是指针的时候，才可以通过reflec.value修改实际变量x的值，即：要修改反射类型的对象就一定要保证其值是“addressable”的。\n\n示例如下：\n\npackage main\n\nimport (\n    "fmt"\n    "reflect"\n)\n\nfunc main() {\n\n    var num float64 = 1.2345\n    fmt.println("old value of pointer:", num)\n\n    // 通过reflect.valueof获取num中的reflect.value，注意，参数必须是指针才能修改其值\n    pointer := reflect.valueof(&num)\n    newvalue := pointer.elem()\n\n    fmt.println("type of pointer:", newvalue.type())\n    fmt.println("settability of pointer:", newvalue.canset())\n\n    // 重新赋值\n    newvalue.setfloat(77)\n    fmt.println("new value of pointer:", num)\n\n    ////////////////////\n    // 如果reflect.valueof的参数不是指针，会如何？\n    pointer = reflect.valueof(num)\n    //newvalue = pointer.elem() // 如果非指针，这里直接panic，“panic: reflect: call of reflect.value.elem on float64 value”\n}\n\n运行结果：\nold value of pointer: 1.2345\ntype of pointer: float64\nsettability of pointer: true\nnew value of pointer: 77\n\n\n说明\n\n1需要传入的参数是* float64这个指针，然后可以通过pointer.elem()去获取所指向的value，注意一定要是指针。\n\n2如果传入的参数不是指针，而是变量，那么\n\n○通过elem获取原始值对应的对象则直接panic\n\n○通过canset方法查询是否可以设置返回false\n\n3newvalue.cantset()表示是否可以重新设置其值，如果输出的是true则可修改，否则不能修改，修改完之后再进行打印发现真的已经修改了。\n\n4reflect.value.elem() 表示获取原始值对应的反射对象，只有原始对象才能修改，当前反射对象是不能修改的\n\n5也就是说如果要修改反射类型对象，其值必须是“addressable”【对应的要传入的是指针，同时要通过elem方法获取原始值对应的反射对象】\n\n6struct 或者 struct 的嵌套都是一样的判断处理方式\n\n# 通过reflect.valueof来进行方法的调用\n\n这算是一个高级用法了，前面我们只说到对类型、变量的几种反射的用法，包括如何获取其值、其类型、如果重新设置新值。但是在工程应用中，另外一个常用并且属于高级的用法，就是通过reflect来进行方法【函数】的调用。比如我们要做框架工程的时候，需要可以随意扩展方法，或者说用户可以自定义方法，那么我们通过什么手段来扩展让用户能够自定义呢？关键点在于用户的自定义方法是未可知的，因此我们可以通过reflect来搞定\n\n示例如下：\n\npackage main\n\nimport (\n    "fmt"\n    "reflect"\n)\n\ntype user struct {\n    id   int\n    name string\n    age  int\n}\n\nfunc (u user) reflectcallfunchasargs(name string, age int) {\n    fmt.println("reflectcallfunchasargs name: ", name, ", age:", age, "and origal user.name:", u.name)\n}\n\nfunc (u user) reflectcallfuncnoargs() {\n    fmt.println("reflectcallfuncnoargs")\n}\n\n// 如何通过反射来进行方法的调用？\n// 本来可以用u.reflectcallfuncxxx直接调用的，但是如果要通过反射，那么首先要将方法注册，也就是methodbyname，然后通过反射调动mv.call\n\nfunc main() {\n    user := user{1, "allen.wu", 25}\n    \n    // 1. 要通过反射来调用起对应的方法，必须要先通过reflect.valueof(interface)来获取到reflect.value，得到“反射类型对象”后才能做下一步处理\n    getvalue := reflect.valueof(user)\n\n    // 一定要指定参数为正确的方法名\n    // 2. 先看看带有参数的调用方法\n    methodvalue := getvalue.methodbyname("reflectcallfunchasargs")\n    args := []reflect.value{reflect.valueof("wudebao"), reflect.valueof(30)}\n    methodvalue.call(args)\n\n    // 一定要指定参数为正确的方法名\n    // 3. 再看看无参数的调用方法\n    methodvalue = getvalue.methodbyname("reflectcallfuncnoargs")\n    args = make([]reflect.value, 0)\n    methodvalue.call(args)\n}\n\n\n运行结果：\nreflectcallfunchasargs name:  wudebao , age: 30 and origal user.name: allen.wu\nreflectcallfuncnoargs\n\n\n说明\n\n 1. 要通过反射来调用起对应的方法，必须要先通过reflect.valueof(interface)来获取到reflect.value，得到“反射类型对象”后才能做下一步处理\n 2. reflect.value.methodbyname这.methodbyname，需要指定准确真实的方法名字，如果错误将直接panic，methodbyname返回一个函数值对应的reflect.value方法的名字。\n 3. []reflect.value，这个是最终需要调用的方法的参数，可以没有或者一个或者多个，根据实际参数来定。\n 4. reflect.value的 call 这个方法，这个方法将最终调用真实的方法，参数务必保持一致，如果reflect.value\'kind不是一个方法，那么将直接panic。\n 5. 本来可以用u.reflectcallfuncxxx直接调用的，但是如果要通过反射，那么首先要将方法注册，也就是methodbyname，然后通过反射调用methodvalue.call\n\n# golang的反射reflect性能\n\ngolang的反射很慢，这个和它的api设计有关。在 java 里面，我们一般使用反射都是这样来弄的。\n\nfield field = clazz.getfield("hello");\nfield.get(obj1);\nfield.get(obj2);\n\n\n但是golang的反射不是这样设计的:\n\ntype_ := reflect.typeof(obj)\nfield, _ := type_.fieldbyname("hello")\n\n\n这里取出来的 field 对象是 reflect.structfield 类型，但是它没有办法用来取得对应对象上的值。如果要取值，得用另外一套对object，而不是type的反射\n\ntype_ := reflect.valueof(obj)\nfieldvalue := type_.fieldbyname("hello")\n\n\n这里取出来的 fieldvalue 类型是 reflect.value，它是一个具体的值，而不是一个可复用的反射对象了，每次反射都需要malloc这个reflect.value结构体，并且还涉及到gc。\n\ngolang reflect慢主要有两个原因\n \n涉及到内存分配以及后续的gc；\nreflect实现里面有大量的枚举，也就是for循环，比如类型之类的.\n\n\n# 总结\n\n上述详细说明了golang的反射reflect的各种功能和用法，都附带有相应的示例，相信能够在工程应用中进行相应实践，总结一下就是：\n\n * 反射可以大大提高程序的灵活性，使得interface{}有更大的发挥余地\n\n * * 反射必须结合interface才玩得转\n   * 变量的type要是concrete type的（也就是interface变量）才有反射一说\n\n * 反射可以将“接口类型变量”转换为“反射类型对象”\n\n * * 反射使用 typeof 和 valueof 函数从接口中获取目标对象信息\n\n * 反射可以将“反射类型对象”转换为“接口类型变量\n\n * * reflect.value.interface().(已知的类型)\n   * 遍历reflect.type的field获取其field\n\n * 反射可以修改反射类型对象，但是其值必须是“addressable”\n\n * * 想要利用反射修改对象状态，前提是 interface.data 是 settable,即 pointer-interface\n\n * 通过反射可以“动态”调用方法\n\n * 因为golang本身不支持模板，因此在以往需要使用模板的场景下往往就需要使用反射(reflect)来实现\n\n# 反射的基本原理\n\n\n\n\n# 结构体标签\n\npackage main\n\nimport (\n    "fmt"\n    "reflect"\n)\n\ntype resume struct {\n    name string `json:"name" doc:"我的名字"`\n}\n\nfunc finddoc(stru interface{}) map[string]string {\n    t := reflect.typeof(stru).elem()\n    doc := make(map[string]string)\n\n    for i := 0; i < t.numfield(); i++ {\n        doc[t.field(i).tag.get("json")] = t.field(i).tag.get("doc")\n    }\n\n    return doc\n\n}\n\nfunc main() {\n    var stru resume\n    doc := finddoc(&stru)\n    fmt.printf("name字段为：%s\\n", doc["name"])\n}\n\n\n\n# 五、高阶\n\n\n# go modules\n\n# a、什么是go modules?\n\ngo modules 是 go 语言的依赖解决方案，发布于 go1.11，成长于 go1.12，丰富于 go1.13，正式于 go1.14 推荐在生产上使用。\n\ngo moudles 目前集成在 go 的工具链中，只要安装了 go，自然而然也就可以使用 go moudles 了，而 go modules 的出现也解决了在 go1.11 前的几个常见争议问题：\n\n 1. go 语言长久以来的依赖管理问题。\n 2. “淘汰”现有的 gopath 的使用模式。\n 3. 统一社区中的其它的依赖管理工具（提供迁移功能）。\n\n# b、gopath的工作模式\n\ngo modoules的目的之一就是淘汰gopath, 那么gopath是个什么?\n\n为什么在 go1.11 前就使用 gopath，而 go1.11 后就开始逐步建议使用 go modules，不再推荐 gopath 的模式了呢？\n\n# (1) wait is gopath?\n\n$ go env\n\ngopath="/home/itheima/go"\n...\n\n\n我们输入go env命令行后可以查看到 gopath 变量的结果，我们进入到该目录下进行查看，如下：\n\ngo\n├── bin\n├── pkg\n└── src\n    ├── github.com\n    ├── golang.org\n    ├── google.golang.org\n    ├── gopkg.in\n    ....\n\n\ngopath目录下一共包含了三个子目录，分别是：\n\n * bin：存储所编译生成的二进制文件。\n * pkg：存储预编译的目标文件，以加快程序的后续编译速度。\n * src：存储所有.go文件或源代码。在编写 go 应用程序，程序包和库时，一般会以$gopath/src/github.com/foo/bar的路径进行存放。\n\n因此在使用 gopath 模式下，我们需要将应用代码存放在固定的$gopath/src目录下，并且如果执行go get来拉取外部依赖会自动下载并安装到$gopath目录下。\n\n# (2) gopath模式的弊端\n\n在 gopath 的 $gopath/src 下进行 .go 文件或源代码的存储，我们可以称其为 gopath 的模式，这个模式拥有一些弊端.\n\n * a. 无版本控制概念. 在执行go get的时候，你无法传达任何的版本信息的期望，也就是说你也无法知道自己当前更新的是哪一个版本，也无法通过指定来拉取自己所期望的具体版本。\n\n * b.无法同步一致第三方版本号. 在运行 go 应用程序的时候，你无法保证其它人与你所期望依赖的第三方库是相同的版本，也就是说在项目依赖库的管理上，你无法保证所有人的依赖版本都一致。\n\n * c.无法指定当前项目引用的第三方版本号. 你没办法处理 v1、v2、v3 等等不同版本的引用问题，因为 gopath 模式下的导入路径都是一样的，都是github.com/foo/bar。\n\n# c、go modules模式\n\n我们接下来用go modules的方式创建一个项目, 建议为了与gopath分开,不要将项目创建在gopath/src下.\n\n# (1) go mod命令\n\n\n\n# (2) go mod环境变量\n\n可以通过 go env 命令来进行查看\n\n\n\n$ go env\ngo111module="auto"\ngoproxy="https://proxy.golang.org,direct"\ngonoproxy=""\ngosumdb="sum.golang.org"\ngonosumdb=""\ngoprivate=""\n...\n\n\n# go111module\n\ngo语言提供了 go111module这个环境变量来作为 go modules 的开关，其允许设置以下参数：\n\n * auto：只要项目包含了 go.mod 文件的话启用 go modules，目前在 go1.11 至 go1.14 中仍然是默认值。\n * on：启用 go modules，推荐设置，将会是未来版本中的默认值。\n * off：禁用 go modules，不推荐设置。\n\n可以通过来设置\n\n$ go env -w go111module=on\n\n\n# goproxy\n\n这个环境变量主要是用于设置 go 模块代理（go module proxy）,其作用是用于使 go 在后续拉取模块版本时直接通过镜像站点来快速拉取。\n\ngoproxy 的默认值是：https://proxy.golang.org,direct\n\nproxy.golang.org国内访问不了,需要设置国内的代理.\n\n * 阿里云 https://mirrors.aliyun.com/goproxy/\n * 七牛云 https://goproxy.cn,direct\n\n如:\n\n$ go env -w goproxy=https://goproxy.cn,direct\n\n\ngoproxy 的值是一个以英文逗号 “,” 分割的 go 模块代理列表，允许设置多个模块代理，假设你不想使用，也可以将其设置为 “off” ，这将会禁止 go 在后续操作中使用任何 go 模块代理。\n\n如:\n\n$ go env -w goproxy=https://goproxy.cn,https://mirrors.aliyun.com/goproxy/,direct\n\n\ndirect\n\n而在刚刚设置的值中，我们可以发现值列表中有 “direct” 标识，它又有什么作用呢？\n\n实际上 “direct” 是一个特殊指示符，用于指示 go 回源到模块版本的源地址去抓取（比如 github 等），场景如下：当值列表中上一个 go 模块代理返回 404 或 410 错误时，go 自动尝试列表中的下一个，遇见 “direct” 时回源，也就是回到源地址去抓取，而遇见 eof 时终止并抛出类似 “invalid version: unknown revision...” 的错误。\n\n# 修改goproxy\n\n$env:goproxy = "https://goproxy.cn,direct"\n\n\n\n# gosumdb\n\n它的值是一个 go checksum database，用于在拉取模块版本时（无论是从源站拉取还是通过 go module proxy 拉取）保证拉取到的模块版本数据未经过篡改，若发现不一致，也就是可能存在篡改，将会立即中止。\n\ngosumdb 的默认值为：sum.golang.org，在国内也是无法访问的，但是 gosumdb 可以被 go 模块代理所代理（详见：proxying a checksum database）。\n\n因此我们可以通过设置 goproxy 来解决，而先前我们所设置的模块代理 goproxy.cn 就能支持代理 sum.golang.org，所以这一个问题在设置 goproxy 后，你可以不需要过度关心。\n\n另外若对 gosumdb 的值有自定义需求，其支持如下格式：\n\n * 格式 1：<sumdb_name>+<public_key>。\n * 格式 2：<sumdb_name>+<public_key> <sumdb_url>。\n\n也可以将其设置为“off”，也就是禁止 go 在后续操作中校验模块版本。\n\n# gonoproxy/gonosumdb/goprivate\n\n这三个环境变量都是用在当前项目依赖了私有模块，例如像是你公司的私有 git 仓库，又或是 github 中的私有库，都是属于私有模块，都是要进行设置的，否则会拉取失败。\n\n更细致来讲，就是依赖了由 goproxy 指定的 go 模块代理或由 gosumdb 指定 go checksum database 都无法访问到的模块时的场景。\n\n而一般建议直接设置 goprivate，它的值将作为 gonoproxy 和 gonosumdb 的默认值，所以建议的最佳姿势是直接使用 goprivate。\n\n并且它们的值都是一个以英文逗号 “,” 分割的模块路径前缀，也就是可以设置多个，例如：\n\n$ go env -w goprivate="git.example.com,github.com/eddycjy/mquote"\n\n\n设置后，前缀为 git.xxx.com 和 github.com/eddycjy/mquote 的模块都会被认为是私有模块。\n\n如果不想每次都重新设置，我们也可以利用通配符，例如：\n\n$ go env -w goprivate="*.example.com"\n\n\n这样子设置的话，所有模块路径为 example.com 的子域名（例如：git.example.com）都将不经过 go module proxy 和 go checksum database，需要注意的是不包括 example.com 本身。\n\n# d、使用go modules初始化项目\n\n# (1) 开启go modules\n\n $ go env -w go111module=on\n\n\n又或是可以通过直接设置系统环境变量（写入对应的~/.bash_profile 文件亦可）来实现这个目的：\n\n$ export go111module=on\n\n\n# (2) 初始化项目\n\n创建项目目录\n\n$ mkdir -p $home/aceld/modules_test\n$ cd $home/aceld/modules_test\n\n\n执行go modules 初始化\n\n$ go mod init github.com/aceld/modules_test\ngo: creating new go.mod: module github.com/aceld/modules_test\n\n\n\n\n在执行 go mod init 命令时，我们指定了模块导入路径为 github.com/aceld/modules_test。接下来我们在该项目根目录下创建 main.go 文件，如下：\n\npackage main\n\nimport (\n    "fmt"\n    "github.com/aceld/zinx/znet"\n    "github.com/aceld/zinx/ziface"\n)\n\n//ping test 自定义路由\ntype pingrouter struct {\n    znet.baserouter\n}\n\n//ping handle\nfunc (this *pingrouter) handle(request ziface.irequest) {\n    //先读取客户端的数据\n    fmt.println("recv from client : msgid=", request.getmsgid(), \n              ", data=", string(request.getdata()))\n\n    //再回写ping...ping...ping\n    err := request.getconnection().sendbuffmsg(0, []byte("ping...ping...ping"))\n    if err != nil {\n      fmt.println(err)\n    }\n}\n\nfunc main() {\n    //1 创建一个server句柄\n    s := znet.newserver()\n\n    //2 配置路由\n    s.addrouter(0, &pingrouter{})\n\n    //3 开启服务\n    s.serve()\n}\n\n\nok, 我们先不要关注代码本身,我们看当前的main.go也就是我们的aceld/modules_test项目,是依赖一个叫github.com/aceld/zinx库的. znet和ziface只是zinx的两个模块.\n\n接下来我们在$home/aceld/modules_test,本项目的根目录执行\n\n$ go get github.com/aceld/zinx/znet\n\ngo: downloading github.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100\ngo: found github.com/aceld/zinx/znet in github.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100\n\n\n我们会看到 我们的go.mod被修改,同时多了一个go.sum文件.\n\n# (3) 查看go.mod文件\n\naceld/modules_test/go.mod\n\nmodule github.com/aceld/modules_test\n\ngo 1.14\n\nrequire github.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100 // indirect\n\n\n我们来简单看一下这里面的关键字\n\nmodule: 用于定义当前项目的模块路径\n\ngo:标识当前go版本.即初始化版本\n\nrequire: 当前项目依赖的一个特定的必须版本\n\n// indirect: 示该模块为间接依赖，也就是在当前应用程序中的 import 语句中，并没有发现这个模块的明确引用，有可能是你先手动 go get 拉取下来的，也有可能是你所依赖的模块所依赖的.我们的代码很明显是依赖的"github.com/aceld/zinx/znet"和"github.com/aceld/zinx/ziface",所以就间接的依赖了github.com/aceld/zinx\n\n# (4) 查看go.sum文件\n\n在第一次拉取模块依赖后，会发现多出了一个 go.sum 文件，其详细罗列了当前项目直接或间接依赖的所有模块版本，并写明了那些模块版本的 sha-256 哈希值以备 go 在今后的操作中保证项目所依赖的那些模块版本不会被篡改\n\ngithub.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100 h1:ez5im6ckgmtqvij8nvr9h74ln8fvfdgfb7bjibrkv54=\ngithub.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100/go.mod h1:bmierrpdr8fzpboo86nhwwmehj1ccaqvvwkcgcdvj5m=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43d7+sqxf/4pzw/hwtaqwc6ititcivsawz5lyuqw=\n\n\n我们可以看到一个模块路径可能有如下两种：\n\nh1:hash情况\n\ngithub.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100 h1:ez5im6ckgmtqvij8nvr9h74ln8fvfdgfb7bjibrkv54=\n\n\ngo.mod hash情况\n\ngithub.com/aceld/zinx v0.0.0-20200221135252-8a8954e75100/go.mod h1:bmierrpdr8fzpboo86nhwwmehj1ccaqvvwkcgcdvj5m=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43d7+sqxf/4pzw/hwtaqwc6ititcivsawz5lyuqw=\n\n\nh1 hash 是 go modules 将目标模块版本的 zip 文件开包后，针对所有包内文件依次进行 hash，然后再把它们的 hash 结果按照固定格式和算法组成总的 hash 值。\n\n而 h1 hash 和 go.mod hash 两者，要不就是同时存在，要不就是只存在 go.mod hash。那什么情况下会不存在 h1 hash 呢，就是当 go 认为肯定用不到某个模块版本的时候就会省略它的 h1 hash，就会出现不存在 h1 hash，只存在 go.mod hash 的情况。\n\n# e、修改模块的版本依赖关系\n\n为了作尝试,假定我们现在都zinx版本作了升级, 由zinx v0.0.0-20200221135252-8a8954e75100 升级到 zinx v0.0.0-20200306023939-bc416543ae24 (注意zinx是一个没有打版本tag打第三方库,如果有的版本号是有tag的,那么可以直接对应v后面的版本号即可)\n\n那么,我们是怎么知道zinx做了升级呢, 我们又是如何知道的最新的zinx版本号是多少呢?\n\n先回到$home/aceld/modules_test,本项目的根目录执行\n\n$ go get github.com/aceld/zinx/znet\ngo: downloading github.com/aceld/zinx v0.0.0-20200306023939-bc416543ae24\ngo: found github.com/aceld/zinx/znet in github.com/aceld/zinx v0.0.0-20200306023939-bc416543ae24\ngo: github.com/aceld/zinx upgrade => v0.0.0-20200306023939-bc416543ae24\n\n\n这样我们,下载了最新的zinx, 版本是v0.0.0-20200306023939-bc416543ae24\n\n然后,我么看一下go.mod\n\nmodule github.com/aceld/modules_test\n\ngo 1.14\n\nrequire github.com/aceld/zinx v0.0.0-20200306023939-bc416543ae24 // indirect\n\n\n我们会看到,当我们执行go get 的时候, 会自动的将本地将当前项目的require更新了.变成了最新的依赖.\n\n好了, 现在我们就要做另外一件事,就是,我们想用一个旧版本的zinx. 来修改当前zinx模块的依赖版本号.\n\n目前我们在$gopath/pkg/mod/github.com/aceld下,已经有了两个版本的zinx库\n\n/go/pkg/mod/github.com/aceld$ ls\nzinx@v0.0.0-20200221135252-8a8954e75100\nzinx@v0.0.0-20200306023939-bc416543ae24\n\n\n目前,我们/aceld/modules_test依赖的是zinx@v0.0.0-20200306023939-bc416543ae24 这个是最新版, 我们要改成之前的版本zinx@v0.0.0-20200306023939-bc416543ae24.\n\n回到/aceld/modules_test项目目录下,执行\n\n$ go mod edit -replace=zinx@v0.0.0-20200306023939-bc416543ae24=zinx@v0.0.0-20200221135252-8a8954e75100\n\n\n然后我们打开go.mod查看一下\n\nmodule github.com/aceld/modules_test\n\ngo 1.14\n\nrequire github.com/aceld/zinx v0.0.0-20200306023939-bc416543ae24 // indirect\n\nreplace zinx v0.0.0-20200306023939-bc416543ae24 => zinx v0.0.0-20200221135252-8a8954e75100\n\n\n这里出现了replace关键字.用于将一个模块版本替换为另外一个模块版本。\n\n\n# goroutine\n\n# 协程并发\n\n协程：coroutine。也叫轻量级线程。\n\n与传统的系统级线程和进程相比，协程最大的优势在于“轻量级”。可以轻松创建上万个而不会导致系统资源衰竭。而线程和进程通常很难超过1万个。这也是协程别称“轻量级线程”的原因。\n\n一个线程中可以有任意多个协程，但某一时刻只能有一个协程在运行，多个协程分享该线程分配到的计算机资源。\n\n多数语言在语法层面并不直接支持协程，而是通过库的方式支持，但用库的方式支持的功能也并不完整，比如仅仅提供协程的创建、销毁与切换等能力。如果在这样的轻量级线程中调用一个同步 io 操作，比如网络通信、本地文件读写，都会阻塞其他的并发执行轻量级线程，从而无法真正达到轻量级线程本身期望达到的目标。\n\n在协程中，调用一个任务就像调用一个函数一样，消耗的系统资源最少！但能达到进程、线程并发相同的效果。\n\n在一次并发任务中，进程、线程、协程均可以实现。从系统资源消耗的角度出发来看，进程相当多，线程次之，协程最少。\n\n# go并发\n\ngo 在语言级别支持协程，叫goroutine。go 语言标准库提供的所有系统调用操作（包括所有同步io操作），都会出让cpu给其他goroutine。这让轻量级线程的切换管理不依赖于系统的线程和进程，也不需要依赖于cpu的核心数量。\n\n有人把go比作21世纪的c语言。第一是因为go语言设计简单，第二，21世纪最重要的就是并行程序设计，而go从语言层面就支持并发。同时，并发程序的内存管理有时候是非常复杂的，而go语言提供了自动垃圾回收机制。\n\ngo语言为并发编程而内置的上层api基于顺序通信进程模型csp(communicating sequential processes)。这就意味着显式锁都是可以避免的，因为go通过相对安全的通道发送和接受数据以实现同步，这大大地简化了并发程序的编写。\n\ngo语言中的并发程序主要使用两种手段来实现。goroutine和channel。\n\n# 什么是goroutine\n\ngoroutine是go语言并行设计的核心，有人称之为go程。 goroutine从量级上看很像协程，它比线程更小，十几个goroutine可能体现在底层就是五六个线程，go语言内部帮你实现了这些goroutine之间的内存共享。执行goroutine只需极少的栈内存(大概是4~5kb)，当然会根据相应的数据伸缩。也正因为如此，可同时运行成千上万个并发任务。goroutine比thread更易用、更高效、更轻便。\n\n一般情况下，一个普通计算机跑几十个线程就有点负载过大了，但是同样的机器却可以轻松地让成百上千个goroutine进行资源竞争。\n\n# 创建goroutine\n\n只需在函数调⽤语句前添加 go 关键字，就可创建并发执⾏单元。开发⼈员无需了解任何执⾏细节，调度器会自动将其安排到合适的系统线程上执行。\n\n在并发编程中，我们通常想将一个过程切分成几块，然后让每个goroutine各自负责一块工作，当一个程序启动时，主函数在一个单独的goroutine中运行，我们叫它main goroutine。新的goroutine会用go语句来创建。而go语言的并发设计，让我们很轻松就可以达成这一目的。\n\n示例代码：\n\npackage main\n \nimport (\n    "fmt"\n    "time"\n)\n \nfunc newtask() {\n    i := 0\n    for {\n        i++\n        fmt.printf("new goroutine: i = %d\\n", i)\n        time.sleep(1*time.second) //延时1s\n    }\n}\n \nfunc main() {\n    //创建一个 goroutine，启动另外一个任务\n    go newtask()\n    i := 0\n    //main goroutine 循环打印\n    for {\n        i++\n        fmt.printf("main goroutine: i = %d\\n", i)\n        time.sleep(1 * time.second) //延时1s\n    }\n}\n\n\n程序运行结果：\n\n\n\n# goroutine特性\n\n主goroutine退出后，其它的工作goroutine也会自动退出：\n\npackage main\n \nimport (\n"fmt"\n"time"\n)\n \nfunc newtask() {\n    i := 0\n    for {\n        i++\n        fmt.printf("new goroutine: i = %d\\n", i)\n        time.sleep(1 * time.second) //延时1s\n    }\n}\n \nfunc main() {\n    //创建一个 goroutine，启动另外一个任务\n    go newtask()\n \n    fmt.println("main goroutine exit")\n}\n\n\n程序运行结果：\n\n\n\n# goexit函数\n\n调用 runtime.goexit() 将立即终止当前 goroutine 执⾏，调度器确保所有已注册 defer 延迟调用被执行。\n\n示例代码：\n\npackage main\n \nimport (\n"fmt"\n"runtime"\n)\n \nfunc main() {\n    go func() {\n        defer fmt.println("a.defer")\n \n        func() {\n            defer fmt.println("b.defer")\n            runtime.goexit() // 终止当前 goroutine, import "runtime"\n            fmt.println("b") // 不会执行\n        }()\n \n        fmt.println("a") // 不会执行\n    }()       //不要忘记()\n \n    //死循环，目的不让主goroutine结束\n    for {\n    }\n}\n\n\n程序运行结果：\n\n\n\n\n# channel\n\nchannel是go语言中的一个核心类型，可以把它看成管道。并发核心单元通过它就可以发送或者接收数据进行通讯，这在一定程度上又进一步降低了编程的难度。\n\nchannel是一个数据类型，主要用来解决go程的同步问题以及go程之间数据共享（数据传递）的问题。\n\ngoroutine运行在相同的地址空间，因此访问共享内存必须做好同步。goroutine 奉行通过通信来共享内存，而不是共享内存来通信。\n\n引⽤类型 channel可用于多个 goroutine 通讯。其内部实现了同步，确保并发安全。\n\n\n\n# 定义channel变量\n\n和map类似，channel也一个对应make创建的底层数据结构的引用。\n\n当我们复制一个channel或用于函数参数传递时，我们只是拷贝了一个channel引用，因此调用者和被调用者将引用同一个channel对象。和其它的引用类型一样，channel的零值也是nil。\n\n定义一个channel时，也需要定义发送到channel的值的类型。channel可以使用内置的make()函数来创建：\n\nchan是创建channel所需使用的关键字。type 代表指定channel收发数据的类型。\n\n    make(chan type)  //等价于make(chan type, 0)\n    make(chan type, capacity)\n\n\n当我们复制一个channel或用于函数参数传递时，我们只是拷贝了一个channel引用，因此调用者和被调用者将引用同一个channel对象。和其它的引用类型一样，channel的零值也是nil。\n\n当 参数capacity= 0 时，channel 是无缓冲阻塞读写的；当capacity > 0 时，channel 有缓冲、是非阻塞的，直到写满 capacity个元素才阻塞写入。\n\nchannel非常像生活中的管道，一边可以存放东西，另一边可以取出东西。channel通过操作符 <- 来接收和发送数据，发送和接收数据语法：\n\n    channel <- value      //发送value到channel\n    <-channel             //接收并将其丢弃\n    x := <-channel        //从channel中接收数据，并赋值给x\n    x, ok := <-channel    //功能同上，同时检查通道是否已关闭或者是否为空\n\n\n默认情况下，channel接收和发送数据都是阻塞的，除非另一端已经准备好，这样就使得goroutine同步变的更加的简单，而不需要显式的lock。\n\n示例代码：\n\npackage main\n \nimport (\n    "fmt"\n)\n \nfunc main() {\n    c := make(chan int)\n \n    go func() {\n        defer fmt.println("子go程结束")\n \n        fmt.println("子go程正在运行……")\n \n        c <- 666 //666发送到c\n    }()\n \n    num := <-c //从c中接收数据，并赋值给num\n \n    fmt.println("num = ", num)\n    fmt.println("main go程结束")\n}\n\n\n程序运行结果：\n\n\n\n# 无缓冲的channel\n\n无缓冲的通道（unbuffered channel）是指在接收前没有能力保存任何数据值的通道。\n\n这种类型的通道要求发送goroutine和接收goroutine同时准备好，才能完成发送和接收操作。否则，通道会导致先执行发送或接收操作的 goroutine 阻塞等待。\n\n这种对通道进行发送和接收的交互行为本身就是同步的。其中任意一个操作都无法离开另一个操作单独存在。\n\n**阻塞：**由于某种原因数据没有到达，当前go程（线程）持续处于等待状态，直到条件满足，才解除阻塞。\n\n**同步：**在两个或多个go程（线程）间，保持数据内容一致性的机制。\n\n下图展示两个 goroutine 如何利用无缓冲的通道来共享一个值：\n\n\n\n在第 1 步，两个 goroutine 都到达通道，但哪个都没有开始执行发送或者接收。\n\n● 在第 2 步，左侧的 goroutine 将它的手伸进了通道，这模拟了向通道发送数据的行为。这时，这个 goroutine 会在通道中被锁住，直到交换完成。\n\n● 在第 3 步，右侧的 goroutine 将它的手放入通道，这模拟了从通道里接收数据。这个 goroutine 一样也会在通道中被锁住，直到交换完成。\n\n● 在第 4 步和第 5 步，进行交换，并最终，在第 6 步，两个 goroutine 都将它们的手从通道里拿出来，这模拟了被锁住的 goroutine 得到释放。两个 goroutine 现在都可以去做其他事情了。\n\n无缓冲的channel创建格式：\n\n    make(chan type)   //等价于make(chan type, 0)\n\n\n如果没有指定缓冲区容量，那么该通道就是同步的，因此会阻塞到发送者准备好发送和接收者准备好接收。\n\n示例代码：\n\npackage main\n \nimport (\n    "fmt"\n    "time"\n)\n \nfunc main() {\n    c := make(chan int, 0) //创建无缓冲的通道 c \n \n    //内置函数 len 返回未被读取的缓冲元素数量，cap 返回缓冲区大小\n    fmt.printf("len(c)=%d, cap(c)=%d\\n", len(c), cap(c))\n \n    go func() {\n        defer fmt.println("子go程结束")\n \n        for i := 0; i < 3; i++ {\n            c <- i\n            fmt.printf("子go程正在运行[%d]: len(c)=%d, cap(c)=%d\\n", i, len(c), cap(c))\n        }\n    }()\n \n    time.sleep(2 * time.second) //延时2s\n \n    for i := 0; i < 3; i++ {\n        num := <-c //从c中接收数据，并赋值给num\n        fmt.println("num = ", num)\n    }\n \n    fmt.println("main进程结束")\n}\n\n\n程序运行结果：\n\n\n\n# 有缓冲的channel\n\n有缓冲的通道（buffered channel）是一种在被接收前能存储一个或者多个数据值的通道。\n\n这种类型的通道并不强制要求 goroutine 之间必须同时完成发送和接收。通道会阻塞发送和接收动作的条件也不同。\n\n只有通道中没有要接收的值时，接收动作才会阻塞。\n\n只有通道没有可用缓冲区容纳被发送的值时，发送动作才会阻塞。\n\n这导致有缓冲的通道和无缓冲的通道之间的一个很大的不同：无缓冲的通道保证进行发送和接收的 goroutine 会在同一时间进行数据交换；有缓冲的通道没有这种保证。\n\n示例图如下：\n\n通道\n\n通道\n\n2\n\ngoroutine\n\ngoroutine\n\ngoroutine\n\ngoroutine\n\n通道\n\n通道\n\n3\n\ngoroutine\n\ngoroutine\n\ngoroutine\n\ngoroutine\n\n使用有缓冲的通道在goroutine之间同步数据\n\n\n\n图片为转载\n\n● 在第 1 步，右侧的 goroutine 正在从通道接收一个值。\n\n● 在第 2 步，右侧的这个 goroutine独立完成了接收值的动作，而左侧的 goroutine 正在发送一个新值到通道里。\n\n● 在第 3 步，左侧的goroutine 还在向通道发送新值，而右侧的 goroutine 正在从通道接收另外一个值。这个步骤里的两个操作既不是同步的，也不会互相阻塞。\n\n● 最后，在第 4 步，所有的发送和接收都完成，而通道里还有几个值，也有一些空间可以存更多的值。\n\n有缓冲的channel创建格式：\n\n    make(chan type, capacity)\n\n\n如果给定了一个缓冲区容量，通道就是异步的。只要缓冲区有未使用空间用于发送数据，或还包含可以接收的数据，那么其通信就会无阻塞地进行。\n\n借助函数 len(ch) 求取缓冲区中剩余元素个数， cap(ch) 求取缓冲区元素容量大小。\n\n示例代码：\n\nfunc main() {\n    c := make(chan int, 3) //带缓冲的通道\n \n    //内置函数 len 返回未被读取的缓冲元素数量， cap 返回缓冲区大小\n    fmt.printf("len(c)=%d, cap(c)=%d\\n", len(c), cap(c))\n \n    go func() {\n        defer fmt.println("子go程结束")\n \n        for i := 0; i < 3; i++ {\n            c <- i\n            fmt.printf("子go程正在运行[%d]: len(c)=%d, cap(c)=%d\\n", i, len(c), cap(c))\n        }\n    }()\n \n    time.sleep(2 * time.second) //延时2s\n    for i := 0; i < 3; i++ {\n        num := <-c //从c中接收数据，并赋值给num\n        fmt.println("num = ", num)\n    }\n    fmt.println("main进程结束")\n}\n\n\n程序运行结果：\n\n\n\n# 关闭channel\n\n如果发送者知道，没有更多的值需要发送到channel的话，那么让接收者也能及时知道没有多余的值可接收将是有用的，因为接收者可以停止不必要的接收等待。这可以通过内置的close函数来关闭channel实现。\n\n示例代码：\n\npackage main\n \nimport (\n    "fmt"\n)\n \nfunc main() {\n    c := make(chan int)\n \n    go func() {\n        for i := 0; i < 5; i++ {\n            c <- i\n        }\n        close(c)\n    }()\n \n    for {\n        //ok为true说明channel没有关闭，为false说明管道已经关闭\n        if data, ok := <-c; ok {\n            fmt.println(data)\n        } else {\n            break\n        }\n    }\n \n    fmt.println("finished")\n}\n\n\n程序运行结果：\n\n\n\n注意：\n\nl channel不像文件一样需要经常去关闭，只有当你确实没有任何发送数据了，或者你想显式的结束range循环之类的，才去关闭channel；\n\nl 关闭channel后，无法向channel 再发送数据(引发 panic 错误后导致接收立即返回零值)；\n\nl 关闭channel后，可以继续从channel接收数据；\n\nl 对于nil channel，无论收发都会被阻塞。\n\n可以使用 range 来迭代不断操作channel：\n\npackage main\n \nimport (\n    "fmt"\n)\n \nfunc main() {\n    c := make(chan int)\n \n    go func() {\n        for i := 0; i < 5; i++ {\n            c <- i\n        }\n        close(c)\n    }()\n \n    for data := range c {\n        fmt.println(data)\n    }\n    fmt.println("finished")\n}\n\n\n# 单向channel及应用\n\n默认情况下，通道channel是双向的，也就是，既可以往里面发送数据也可以同里面接收数据。\n\n但是，我们经常见一个通道作为参数进行传递而只希望对方是单向使用的，要么只让它发送数据，要么只让它接收数据，这时候我们可以指定通道的方向。\n\n\n\n单向channel变量的声明非常简单，如下：\n\nvar ch1 chan int       // ch1是一个正常的channel，是双向的\nvar ch2 chan<- float64 // ch2是单向channel，只用于写float64数据\nvar ch3 <-chan int     // ch3是单向channel，只用于读int数据\n\n\nl chan<- 表示数据进入管道，要把数据写进管道，对于调用者就是输出。\n\nl <-chan 表示数据从管道出来，对于调用者就是得到管道的数据，当然就是输入。\n\n可以将 channel 隐式转换为单向队列，只收或只发，不能将单向 channel 转换为普通 channel：\n\n    c := make(chan int, 3)\n    var send chan<- int = c // send-only\n    var recv <-chan int = c // receive-only\n    send <- 1\n    //<-send //invalid operation: <-send (receive from send-only type chan<- int)\n    <-recv\n    //recv <- 2 //invalid operation: recv <- 2 (send to receive-only type <-chan int)\n \n    //不能将单向 channel 转换为普通 channel\n    d1 := (chan int)(send) //cannot convert send (type chan<- int) to type chan int\n    d2 := (chan int)(recv) //cannot convert recv (type <-chan int) to type chan int\n\n\n示例代码：\n\n//   chan<- //只写\nfunc counter(out chan<- int) {\n    defer close(out)\n    for i := 0; i < 5; i++ {\n        out <- i //如果对方不读 会阻塞\n    }\n}\n \n//   <-chan //只读\nfunc printer(in <-chan int) {\n    for num := range in {\n        fmt.println(num)\n    }\n}\n \nfunc main() {\n    c := make(chan int) //   chan   //读写\n \n    go counter(c) //生产者\n    printer(c)    //消费者\n \n    fmt.println("done")\n}\n\n\n\n# select\n\n# select作用\n\ngo里面提供了一个关键字select，通过select可以监听channel上的数据流动。\n\n有时候我们希望能够借助channel发送或接收数据，并避免因为发送或者接收导致的阻塞，尤其是当channel没有准备好写或者读时。select语句就可以实现这样的功能。\n\nselect的用法与switch语言非常类似，由select开始一个新的选择块，每个选择条件由case语句来描述。\n\n与switch语句相比，select有比较多的限制，其中最大的一条限制就是每个case语句里必须是一个io操作，大致的结构如下：\n\n    select {\n    case <- chan1:\n        // 如果chan1成功读到数据，则进行该case处理语句\n    case chan2 <- 1:\n        // 如果成功向chan2写入数据，则进行该case处理语句\n    default:\n        // 如果上面都没有成功，则进入default处理流程\n    }\n\n\n在一个select语句中，go语言会按顺序从头至尾评估每一个发送和接收的语句。\n\n如果其中的任意一语句可以继续执行(即没有被阻塞)，那么就从那些可以执行的语句中任意选择一条来使用。\n\n如果没有任意一条语句可以执行(即所有的通道都被阻塞)，那么有两种可能的情况：\n\nl 如果给出了default语句，那么就会执行default语句，同时程序的执行会从select语句后的语句中恢复。\n\nl 如果没有default语句，那么select语句将被阻塞，直到至少有一个通信可以进行下去。\n\n示例代码：\n\npackage main\n \nimport (\n    "fmt"\n)\n \nfunc fibonacci(c, quit chan int) {\n    x, y := 1, 1\n    for {\n        select {\n        case c <- x:\n            x, y = y, x+y\n        case <-quit:\n            fmt.println("quit")\n            return\n        }\n    }\n}\n \nfunc main() {\n    c := make(chan int)\n    quit := make(chan int)\n \n    go func() {\n        for i := 0; i < 6; i++ {\n            fmt.println(<-c)\n        }\n        quit <- 0\n    }()\n \n    fibonacci(c, quit)\n}\n\n\n运行结果如下：\n\n\n\n若有收获，就点个赞吧',charsets:{cjk:!0},lastUpdated:"2024/05/02, 13:19:36",lastUpdatedTimestamp:1714655976e3},{title:"真正的面经Ⅰ如何包装简历",frontmatter:{title:"真正的面经Ⅰ如何包装简历",date:"2024-04-28T23:22:13.000Z",permalink:"/pages/950801/"},regularPath:"/03.%E9%9D%A2%E7%BB%8F%E5%92%8C%E5%88%86%E4%BA%AB/01.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F/01.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F%E2%85%A0%E5%A6%82%E4%BD%95%E5%8C%85%E8%A3%85%E7%AE%80%E5%8E%86.html",relativePath:"03.面经和分享/01.真正的面经/01.真正的面经Ⅰ如何包装简历.md",key:"v-2b7f69e2",path:"/pages/950801/",headers:[{level:2,title:"什么是简历",slug:"什么是简历",normalizedTitle:"什么是简历",charIndex:87},{level:3,title:"简历总览",slug:"简历总览",normalizedTitle:"简历总览",charIndex:261},{level:3,title:"个人信息",slug:"个人信息",normalizedTitle:"个人信息",charIndex:273},{level:3,title:"教育经历",slug:"教育经历",normalizedTitle:"教育经历",charIndex:278},{level:3,title:"项目经历",slug:"项目经历",normalizedTitle:"项目经历",charIndex:283},{level:3,title:"实习经历",slug:"实习经历",normalizedTitle:"实习经历",charIndex:288},{level:3,title:"竞赛经历",slug:"竞赛经历",normalizedTitle:"竞赛经历",charIndex:293},{level:3,title:"专业技能",slug:"专业技能",normalizedTitle:"专业技能",charIndex:298},{level:3,title:"自我评价",slug:"自我评价",normalizedTitle:"自我评价",charIndex:303}],headersStr:"什么是简历 简历总览 个人信息 教育经历 项目经历 实习经历 竞赛经历 专业技能 自我评价",content:"大家好，我是July，欢迎来到真正的面经系列，本文针对一些面试经历比较少的同学提前预习面试内容，以至于面试时不会由于面试官的突击问题没有准备好而遗憾的浪费面试机会。\n\n\n# 什么是简历\n\n个人简单的履历，明白了这一点，就不会被各种五花八门的观点搞的晕头转向，简历根本就没那么复杂，简历最核心的就是要把自己的履历讲清楚，通过履历来证明自己的能力和优势，从而获得对方的赏识与认可。\n首先我们要知道的是，有的公司是通过填写一系列表单作为简历，而有些公司是表单+简历附件的形式。\n本文简历主要提供的是简历附件的修改方案。\n\n\n# 简历总览\n\n一般简历包括个人信息，教育经历，项目经历，实习经历，竞赛经历，专业技能，自我评价等几个大模块。\n首先应该选择一个简单，朴素的简历模板，以蓝色或者绿色作为栏目分割，颜色太鲜艳对筛选人来说简直是灾难。\n是否需要一页：对于开发同学，我的建议是一页，如果内容实在太多，或者一页之后文字太小，可以适当两页，千万不要什么都放在简历上甚至超过两页\n\n别放这些东西\n\n * 把自己失败的经历放上面，例如：考研但是未上岸，挂科，考了四六级但是没考过等。\n * 垃圾的奖项，例如蓝桥杯（，放一个蓝桥杯省三等于承认自己算法垃圾。\n * 培训班，千万别写自己是培训班的。\n * 也不要把别人的项目原封不动的搬进去。\n * 开源经历：请诚实，我遇到过很多面试官直接打开github查简历上的开源经历是否属实，如果你捏造，可以直接退出面试了。\n\n我在牛客上看过上述的类似简历，简直让人吐血，相信面试官也不会认为你是一个有潜力的人。\n\n模块顺序\n\n> 主打的就是将你的优势，展现在筛选人的眼里\n\n这几个模块可以分成三个大类:\n\n 1. 联系方式，个人信息\n 2. 各种经历\n 3. 技能&自荐\n\n我的简历顺序为 1->2->3，其中各种经历的顺序，可以由重要性来决定，例如，你是一个985本硕的学生，那么请将你的教育经历放其他的上面。又如果你的实习经历非常顶，有几段大厂实习，那就把你的实习经历放在上面，其余同理。\n\n\n# 个人信息\n\n个人信息必须包括：姓名、手机号、邮箱（负责接收笔试面试邀约） 如果比较优秀的同学可以放自己的github主页、自己的博客网站、头像等其他内容。\n\n\n# 教育经历\n\n学校对于简历初筛非常重要，学校和毕业时间千万不要写错了，否则机筛会被筛掉。\n本科学校的档次分为：985、211、双一流、四非、二本、三本。\n不放心的同学可以在学校后面标上（985）类似这样的tag，便于hr快速筛选。\n在校经历不丰富的同学可以简单介绍下专业课的内容。\n\n\n# 项目经历\n\n项目的层次分为：\n\n * 课设项目\n * 跟敲的项目（例如某马某某谷）\n * 落地项目\n * 轮子项目（例如某rpc）\n * 大型跟敲项目+改造+自己理解\n * 开源项目（有点贡献度）\n\n项目的摆放顺序应该由项目完成度从高到低，完成度类似的由上述含金量从高到低来摆放\n跟敲练手项目的选取可以看练手项目怎么选来判断自己适合哪种项目。\n经历描述应该按照：项目背景+用到的技术栈+完成的模块和完成度+难点突破依次深入。\n\n\n# 实习经历\n\n\n# 竞赛经历\n\n\n# 专业技能\n\n\n# 自我评价",normalizedContent:"大家好，我是july，欢迎来到真正的面经系列，本文针对一些面试经历比较少的同学提前预习面试内容，以至于面试时不会由于面试官的突击问题没有准备好而遗憾的浪费面试机会。\n\n\n# 什么是简历\n\n个人简单的履历，明白了这一点，就不会被各种五花八门的观点搞的晕头转向，简历根本就没那么复杂，简历最核心的就是要把自己的履历讲清楚，通过履历来证明自己的能力和优势，从而获得对方的赏识与认可。\n首先我们要知道的是，有的公司是通过填写一系列表单作为简历，而有些公司是表单+简历附件的形式。\n本文简历主要提供的是简历附件的修改方案。\n\n\n# 简历总览\n\n一般简历包括个人信息，教育经历，项目经历，实习经历，竞赛经历，专业技能，自我评价等几个大模块。\n首先应该选择一个简单，朴素的简历模板，以蓝色或者绿色作为栏目分割，颜色太鲜艳对筛选人来说简直是灾难。\n是否需要一页：对于开发同学，我的建议是一页，如果内容实在太多，或者一页之后文字太小，可以适当两页，千万不要什么都放在简历上甚至超过两页\n\n别放这些东西\n\n * 把自己失败的经历放上面，例如：考研但是未上岸，挂科，考了四六级但是没考过等。\n * 垃圾的奖项，例如蓝桥杯（，放一个蓝桥杯省三等于承认自己算法垃圾。\n * 培训班，千万别写自己是培训班的。\n * 也不要把别人的项目原封不动的搬进去。\n * 开源经历：请诚实，我遇到过很多面试官直接打开github查简历上的开源经历是否属实，如果你捏造，可以直接退出面试了。\n\n我在牛客上看过上述的类似简历，简直让人吐血，相信面试官也不会认为你是一个有潜力的人。\n\n模块顺序\n\n> 主打的就是将你的优势，展现在筛选人的眼里\n\n这几个模块可以分成三个大类:\n\n 1. 联系方式，个人信息\n 2. 各种经历\n 3. 技能&自荐\n\n我的简历顺序为 1->2->3，其中各种经历的顺序，可以由重要性来决定，例如，你是一个985本硕的学生，那么请将你的教育经历放其他的上面。又如果你的实习经历非常顶，有几段大厂实习，那就把你的实习经历放在上面，其余同理。\n\n\n# 个人信息\n\n个人信息必须包括：姓名、手机号、邮箱（负责接收笔试面试邀约） 如果比较优秀的同学可以放自己的github主页、自己的博客网站、头像等其他内容。\n\n\n# 教育经历\n\n学校对于简历初筛非常重要，学校和毕业时间千万不要写错了，否则机筛会被筛掉。\n本科学校的档次分为：985、211、双一流、四非、二本、三本。\n不放心的同学可以在学校后面标上（985）类似这样的tag，便于hr快速筛选。\n在校经历不丰富的同学可以简单介绍下专业课的内容。\n\n\n# 项目经历\n\n项目的层次分为：\n\n * 课设项目\n * 跟敲的项目（例如某马某某谷）\n * 落地项目\n * 轮子项目（例如某rpc）\n * 大型跟敲项目+改造+自己理解\n * 开源项目（有点贡献度）\n\n项目的摆放顺序应该由项目完成度从高到低，完成度类似的由上述含金量从高到低来摆放\n跟敲练手项目的选取可以看练手项目怎么选来判断自己适合哪种项目。\n经历描述应该按照：项目背景+用到的技术栈+完成的模块和完成度+难点突破依次深入。\n\n\n# 实习经历\n\n\n# 竞赛经历\n\n\n# 专业技能\n\n\n# 自我评价",charsets:{cjk:!0},lastUpdated:"2024/04/29, 15:11:06",lastUpdatedTimestamp:1714403466e3},{title:"真正的面经Ⅱ如何投递简历",frontmatter:{title:"真正的面经Ⅱ如何投递简历",date:"2024-04-28T23:36:15.000Z",permalink:"/pages/6ae607/"},regularPath:"/03.%E9%9D%A2%E7%BB%8F%E5%92%8C%E5%88%86%E4%BA%AB/01.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F/02.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F%E2%85%A1%E5%A6%82%E4%BD%95%E6%8A%95%E9%80%92%E7%AE%80%E5%8E%86.html",relativePath:"03.面经和分享/01.真正的面经/02.真正的面经Ⅱ如何投递简历.md",key:"v-56d45f57",path:"/pages/6ae607/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/29, 13:00:47",lastUpdatedTimestamp:1714395647e3},{title:"真正的面经Ⅲ面试流程",frontmatter:{title:"真正的面经Ⅲ面试流程",date:"2024-04-28T23:36:42.000Z",permalink:"/pages/527072/"},regularPath:"/03.%E9%9D%A2%E7%BB%8F%E5%92%8C%E5%88%86%E4%BA%AB/01.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F/03.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F%E2%85%A2%E9%9D%A2%E8%AF%95%E6%B5%81%E7%A8%8B.html",relativePath:"03.面经和分享/01.真正的面经/03.真正的面经Ⅲ面试流程.md",key:"v-40bee640",path:"/pages/527072/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/29, 13:00:47",lastUpdatedTimestamp:1714395647e3},{title:"真正的面经Ⅳ技术面解密",frontmatter:{title:"真正的面经Ⅳ技术面解密",date:"2024-04-29T20:56:32.000Z",permalink:"/pages/8d3967/"},regularPath:"/03.%E9%9D%A2%E7%BB%8F%E5%92%8C%E5%88%86%E4%BA%AB/01.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F/04.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F%E2%85%A3%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%A7%A3%E5%AF%86.html",relativePath:"03.面经和分享/01.真正的面经/04.真正的面经Ⅳ技术面解密.md",key:"v-d1812180",path:"/pages/8d3967/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/29, 15:11:06",lastUpdatedTimestamp:1714403466e3},{title:"真正的面经ⅤHr面解密",frontmatter:{title:"真正的面经ⅤHr面解密",date:"2024-04-29T20:56:54.000Z",permalink:"/pages/ec2e25/"},regularPath:"/03.%E9%9D%A2%E7%BB%8F%E5%92%8C%E5%88%86%E4%BA%AB/01.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F/05.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F%E2%85%A4Hr%E9%9D%A2%E8%A7%A3%E5%AF%86.html",relativePath:"03.面经和分享/01.真正的面经/05.真正的面经ⅤHr面解密.md",key:"v-03986419",path:"/pages/ec2e25/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/29, 13:00:47",lastUpdatedTimestamp:1714395647e3},{title:"真正的面经Ⅵ练手项目怎么选",frontmatter:{title:"真正的面经Ⅵ练手项目怎么选",date:"2024-04-29T20:57:38.000Z",permalink:"/pages/6c697d/"},regularPath:"/03.%E9%9D%A2%E7%BB%8F%E5%92%8C%E5%88%86%E4%BA%AB/01.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F/06.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F%E2%85%A5%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE%E6%80%8E%E4%B9%88%E9%80%89.html",relativePath:"03.面经和分享/01.真正的面经/06.真正的面经Ⅵ练手项目怎么选.md",key:"v-2abb7540",path:"/pages/6c697d/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/29, 13:00:47",lastUpdatedTimestamp:1714395647e3},{title:"真正的面经Ⅶ开源社区的意义",frontmatter:{title:"真正的面经Ⅶ开源社区的意义",date:"2024-04-29T20:58:29.000Z",permalink:"/pages/914d5c/"},regularPath:"/03.%E9%9D%A2%E7%BB%8F%E5%92%8C%E5%88%86%E4%BA%AB/01.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F/07.%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9D%A2%E7%BB%8F%E2%85%A6%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E7%9A%84%E6%84%8F%E4%B9%89.html",relativePath:"03.面经和分享/01.真正的面经/07.真正的面经Ⅶ开源社区的意义.md",key:"v-585a1a94",path:"/pages/914d5c/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/29, 15:11:06",lastUpdatedTimestamp:1714403466e3},{title:"25届实习内推",frontmatter:{title:"25届实习内推",date:"2024-04-26T14:25:35.000Z",permalink:"/pages/88cd1f/"},regularPath:"/03.%E9%9D%A2%E7%BB%8F%E5%92%8C%E5%88%86%E4%BA%AB/03.%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0/02.25%E5%B1%8A%E5%AE%9E%E4%B9%A0%E5%86%85%E6%8E%A8.html",relativePath:"03.面经和分享/03.相关文章/02.25届实习内推.md",key:"v-a0e8f430",path:"/pages/88cd1f/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/28, 17:23:46",lastUpdatedTimestamp:1714325026e3},{title:"友情链接",frontmatter:{title:"友情链接",date:"2024-04-26T14:15:57.000Z",permalink:"/pages/daa40c/"},regularPath:"/05.%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/01.%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5.html",relativePath:"05.友情链接/01.友情链接.md",key:"v-32a219ba",path:"/pages/daa40c/",headersStr:null,content:"# 友情链接",normalizedContent:"# 友情链接",charsets:{cjk:!0},lastUpdated:"2024/04/28, 17:23:46",lastUpdatedTimestamp:1714325026e3},{title:"团队介绍",frontmatter:{title:"团队介绍",date:"2024-04-26T14:19:06.000Z",permalink:"/pages/385249/"},regularPath:"/06.%E5%8F%82%E4%B8%8E%E5%88%86%E4%BA%AB/01.%E5%9B%A2%E9%98%9F%E4%BB%8B%E7%BB%8D.html",relativePath:"06.参与分享/01.团队介绍.md",key:"v-c8924ece",path:"/pages/385249/",headers:[{level:2,title:"团队成员",slug:"团队成员",normalizedTitle:"团队成员",charIndex:2},{level:2,title:"社区协作者",slug:"社区协作者",normalizedTitle:"社区协作者",charIndex:434}],headersStr:"团队成员 社区协作者",content:"# 团队成员\n\nGITHUB 账号       昵称         活跃于                     联系方式\n985492783       July       淘天集团; Nacos             985492783@qq.com\nscwlkq          Pyroven    京东                      \nPil0tXia        Pil0tXia   Apache EventMesh; 小红书   xiatian@apache.org\nDeeEMmO         Deemo      淘天集团                    \nCheung0-bit     张林         美团                      \npixel-revolve   ethandu    美团                      pixel-revolve@qq.com\n\n\n# 社区协作者\n\nGITHUB 账号   昵称      活跃于   联系方式                备注\n            京都小低调   百度    yafree123@163.com   CPP Contributor",normalizedContent:"# 团队成员\n\ngithub 账号       昵称         活跃于                     联系方式\n985492783       july       淘天集团; nacos             985492783@qq.com\nscwlkq          pyroven    京东                      \npil0txia        pil0txia   apache eventmesh; 小红书   xiatian@apache.org\ndeeemmo         deemo      淘天集团                    \ncheung0-bit     张林         美团                      \npixel-revolve   ethandu    美团                      pixel-revolve@qq.com\n\n\n# 社区协作者\n\ngithub 账号   昵称      活跃于   联系方式                备注\n            京都小低调   百度    yafree123@163.com   cpp contributor",charsets:{cjk:!0},lastUpdated:"2024/05/02, 12:56:36",lastUpdatedTimestamp:1714654596e3},{title:"如何加入我们",frontmatter:{title:"如何加入我们",date:"2024-04-26T14:44:30.000Z",permalink:"/pages/c91501/"},regularPath:"/06.%E5%8F%82%E4%B8%8E%E5%88%86%E4%BA%AB/02.%E5%A6%82%E4%BD%95%E5%8A%A0%E5%85%A5%E6%88%91%E4%BB%AC.html",relativePath:"06.参与分享/02.如何加入我们.md",key:"v-30dd7cef",path:"/pages/c91501/",headers:[{level:2,title:"联系我们",slug:"联系我们",normalizedTitle:"联系我们",charIndex:2},{level:2,title:"我们需要什么",slug:"我们需要什么",normalizedTitle:"我们需要什么",charIndex:56},{level:2,title:"申请友情链接",slug:"申请友情链接",normalizedTitle:"申请友情链接",charIndex:245}],headersStr:"联系我们 我们需要什么 申请友情链接",content:"# 联系我们\n\n方式一：加入qq群，联系群主或者群管理\n方式二：发送邮箱到团队成员其中之一表明来意即可\n\n\n# 我们需要什么\n\n资源整合\n\n> 我们希望做成一个资源整合的网站，不仅针对Java开发者，更希望任何一位开发者，进入本手册后，都可以有所收获。\n> 我们需要的学习资料面向Java、C++、Go的基础方面，又或是面试经验、算法、项目架构的思维技术方面。\n\n如果有好的文章，或者对本手册有意见，都可以联系我们，或者直接通过该手册的github仓库提issue、pr进行修改。\n\n\n# 申请友情链接\n\n对于已经建站或者不方便搬运的作者，可以通过申请友情链接的方式将自己的站点链接整合到该站中。\n申请方式：联系我们\n样例：站点链接-xxx 站点简介-xxx 站点作者-xxx",normalizedContent:"# 联系我们\n\n方式一：加入qq群，联系群主或者群管理\n方式二：发送邮箱到团队成员其中之一表明来意即可\n\n\n# 我们需要什么\n\n资源整合\n\n> 我们希望做成一个资源整合的网站，不仅针对java开发者，更希望任何一位开发者，进入本手册后，都可以有所收获。\n> 我们需要的学习资料面向java、c++、go的基础方面，又或是面试经验、算法、项目架构的思维技术方面。\n\n如果有好的文章，或者对本手册有意见，都可以联系我们，或者直接通过该手册的github仓库提issue、pr进行修改。\n\n\n# 申请友情链接\n\n对于已经建站或者不方便搬运的作者，可以通过申请友情链接的方式将自己的站点链接整合到该站中。\n申请方式：联系我们\n样例：站点链接-xxx 站点简介-xxx 站点作者-xxx",charsets:{cjk:!0},lastUpdated:"2024/04/28, 17:23:46",lastUpdatedTimestamp:1714325026e3},{title:"微服务介绍",frontmatter:{title:"微服务介绍",date:"2024-05-02T21:31:06.000Z",author:"ethandu",permalink:"/pages/771792/"},regularPath:"/07.%E5%85%AB%E8%82%A1%E6%96%87/01.%E5%BE%AE%E6%9C%8D%E5%8A%A1/01.%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%8B%E7%BB%8D.html",relativePath:"07.八股文/01.微服务/01.微服务介绍.md",key:"v-8ecbdc78",path:"/pages/771792/",headers:[{level:2,title:"什么是微服务",slug:"什么是微服务",normalizedTitle:"什么是微服务",charIndex:87},{level:2,title:"微服务架构演变",slug:"微服务架构演变",normalizedTitle:"微服务架构演变",charIndex:116},{level:2,title:"微服务结构对比",slug:"微服务结构对比",normalizedTitle:"微服务结构对比",charIndex:472},{level:2,title:"SpringCloud",slug:"springcloud",normalizedTitle:"springcloud",charIndex:512},{level:2,title:"服务远程调用",slug:"服务远程调用",normalizedTitle:"服务远程调用",charIndex:695},{level:2,title:"提供者与消费者",slug:"提供者与消费者",normalizedTitle:"提供者与消费者",charIndex:863}],headersStr:"什么是微服务 微服务架构演变 微服务结构对比 SpringCloud 服务远程调用 提供者与消费者",content:"视频地址：https://www.bilibili.com/video/BV1LQ4y127n4?spm_id_from=333.999.0.0\n\n\n# 认识微服务\n\n\n# 什么是微服务\n\n> 微服务技术栈\n\n\n\n\n\n\n\n\n\n\n# 微服务架构演变\n\n单体架构\n\n单体架构：将业务的所有功能集中在一个项目中开发，打包成一个包部署\n\n优点：\n\n * 架构简单\n * 部署成本低\n\n缺点：\n\n * 耦合度高\n\n\n\n分布式架构\n\n分布式架构：根据业务功能能对系统进行拆分，每个业务模块作为独立项目开发，成为一个服务。\n\n优点：\n\n * 降低服务耦合\n * 有利于服务升级拓展\n\n\n\n服务治理\n\n\n\n微服务\n\n微服务是一种经过良好架构设计的分布式架构方案，微服务架构特征：\n\n * 单一职责：微服务拆分粒度更小，每一个服务对应唯一的业务能力，做到单一职责，避免重复业务开发\n * 面向服务：微服务对外暴露业务接口\n * 自治：团队独立，技术独立，数据独立，部署独立\n * 隔离性强：服务调用做好隔离，容错，降级，避免出现级联问题\n\n\n\n总结\n\n\n\n\n# 微服务结构对比\n\n微服务结构\n\n\n\n微服务技术对比\n\n\n\n企业需求\n\n\n\n\n# SpringCloud\n\nSpringCloud\n\n\n\nSpringcloud与SpringBoot版本兼容关系\n\n\n\n\n# 服务拆分及远程调用\n\n服务拆分注意事项\n\n1、不同微服务，不要重复开发相关业务\n\n2、微服务数据独立，不要访问其它微服务的数据库\n\n3、微服务可以将自己的业务暴露为接口，供其它微服务调用\n\n\n\n导入服务拆分Demo\n\n\n\n总结\n\n\n\n\n# 服务远程调用\n\n订单模块只能查订单，用户模块只能查用户\n\n需求却是订单查询同时把用户信息也查询出来\n\n那么我们不是订单模块直接查用户数据库而是发起请求用户模块获取再对数据进行整合\n\n\n\n> 远程调用方式分析\n\n\n\n问题变成了如何在java代码中发http请求\n\n\n\n\n\n告诉getForObject方法返回的类型和请求的url\n\n\n# 提供者与消费者\n\n\n\n服务既可以是提供者也可是消费者\n\n总结：\n\n",normalizedContent:"视频地址：https://www.bilibili.com/video/bv1lq4y127n4?spm_id_from=333.999.0.0\n\n\n# 认识微服务\n\n\n# 什么是微服务\n\n> 微服务技术栈\n\n\n\n\n\n\n\n\n\n\n# 微服务架构演变\n\n单体架构\n\n单体架构：将业务的所有功能集中在一个项目中开发，打包成一个包部署\n\n优点：\n\n * 架构简单\n * 部署成本低\n\n缺点：\n\n * 耦合度高\n\n\n\n分布式架构\n\n分布式架构：根据业务功能能对系统进行拆分，每个业务模块作为独立项目开发，成为一个服务。\n\n优点：\n\n * 降低服务耦合\n * 有利于服务升级拓展\n\n\n\n服务治理\n\n\n\n微服务\n\n微服务是一种经过良好架构设计的分布式架构方案，微服务架构特征：\n\n * 单一职责：微服务拆分粒度更小，每一个服务对应唯一的业务能力，做到单一职责，避免重复业务开发\n * 面向服务：微服务对外暴露业务接口\n * 自治：团队独立，技术独立，数据独立，部署独立\n * 隔离性强：服务调用做好隔离，容错，降级，避免出现级联问题\n\n\n\n总结\n\n\n\n\n# 微服务结构对比\n\n微服务结构\n\n\n\n微服务技术对比\n\n\n\n企业需求\n\n\n\n\n# springcloud\n\nspringcloud\n\n\n\nspringcloud与springboot版本兼容关系\n\n\n\n\n# 服务拆分及远程调用\n\n服务拆分注意事项\n\n1、不同微服务，不要重复开发相关业务\n\n2、微服务数据独立，不要访问其它微服务的数据库\n\n3、微服务可以将自己的业务暴露为接口，供其它微服务调用\n\n\n\n导入服务拆分demo\n\n\n\n总结\n\n\n\n\n# 服务远程调用\n\n订单模块只能查订单，用户模块只能查用户\n\n需求却是订单查询同时把用户信息也查询出来\n\n那么我们不是订单模块直接查用户数据库而是发起请求用户模块获取再对数据进行整合\n\n\n\n> 远程调用方式分析\n\n\n\n问题变成了如何在java代码中发http请求\n\n\n\n\n\n告诉getforobject方法返回的类型和请求的url\n\n\n# 提供者与消费者\n\n\n\n服务既可以是提供者也可是消费者\n\n总结：\n\n",charsets:{cjk:!0},lastUpdated:"2024/05/02, 13:47:32",lastUpdatedTimestamp:1714657652e3},{title:"Ribbon负载均衡",frontmatter:{title:"Ribbon负载均衡",date:"2024-05-02T21:33:45.000Z",author:"ethandu",permalink:"/pages/c95a2f/"},regularPath:"/07.%E5%85%AB%E8%82%A1%E6%96%87/01.%E5%BE%AE%E6%9C%8D%E5%8A%A1/03.Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.html",relativePath:"07.八股文/01.微服务/03.Ribbon负载均衡.md",key:"v-740e9683",path:"/pages/c95a2f/",headers:[{level:2,title:"饥饿加载",slug:"饥饿加载",normalizedTitle:"饥饿加载",charIndex:495}],headersStr:"饥饿加载",content:"# Ribbon负载均衡\n\n负载均衡流程\n\n\n\n上面在RestTemplate上面加的@LoadBalanced注解就是标记了之后发起的请求要被Ribbon拦截和处理了。\n\n我们在代码中打断点调试\n\n\n\n这个就是整个负载均衡的流程\n\n\n\n负载均衡策略\n\nRibbon的负载均衡规则是一个叫做IRule的接口来定义的，每一个子接口都是一种规则：\n\n\n\n\n\n通过定义IRule实现可以修改负载均衡规则，有两种方式：\n\n1、代码方式：在order-service中的OrderApplication类中，定义一个新的IRule\n\n@Bean\npublic IRule randomRule(){\n\treturn new RandomRule();\n}\n\n\n2、配置文件方式：在order-service的application.yml文件中添加新的配置也可以修改规则：\n\nuserservice:\n  ribbon:\n    NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule  # 负载均衡规则\n\n\n\n# 饥饿加载\n\n发起两次请求，第一次时间很长500多ms，而第二次就只需要27ms就完成了\n\n\n\n\n\n开启后只需要300多就完成第一次加载了还是可以的\n\n\n\n总结：\n\n",normalizedContent:"# ribbon负载均衡\n\n负载均衡流程\n\n\n\n上面在resttemplate上面加的@loadbalanced注解就是标记了之后发起的请求要被ribbon拦截和处理了。\n\n我们在代码中打断点调试\n\n\n\n这个就是整个负载均衡的流程\n\n\n\n负载均衡策略\n\nribbon的负载均衡规则是一个叫做irule的接口来定义的，每一个子接口都是一种规则：\n\n\n\n\n\n通过定义irule实现可以修改负载均衡规则，有两种方式：\n\n1、代码方式：在order-service中的orderapplication类中，定义一个新的irule\n\n@bean\npublic irule randomrule(){\n\treturn new randomrule();\n}\n\n\n2、配置文件方式：在order-service的application.yml文件中添加新的配置也可以修改规则：\n\nuserservice:\n  ribbon:\n    nfloadbalancerruleclassname: com.alibaba.cloud.nacos.ribbon.nacosrule  # 负载均衡规则\n\n\n\n# 饥饿加载\n\n发起两次请求，第一次时间很长500多ms，而第二次就只需要27ms就完成了\n\n\n\n\n\n开启后只需要300多就完成第一次加载了还是可以的\n\n\n\n总结：\n\n",charsets:{cjk:!0},lastUpdated:"2024/05/02, 13:47:32",lastUpdatedTimestamp:1714657652e3},{title:"EureKa注册中心",frontmatter:{title:"EureKa注册中心",date:"2024-05-02T21:32:54.000Z",author:"ethandu",permalink:"/pages/50142d/"},regularPath:"/07.%E5%85%AB%E8%82%A1%E6%96%87/01.%E5%BE%AE%E6%9C%8D%E5%8A%A1/02.EureKa%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.html",relativePath:"07.八股文/01.微服务/02.EureKa注册中心.md",key:"v-3e8e7a28",path:"/pages/50142d/",headers:[{level:2,title:"搭建eureka服务",slug:"搭建eureka服务",normalizedTitle:"搭建eureka服务",charIndex:151}],headersStr:"搭建eureka服务",content:'# EureKa注册中心\n\n服务调用出现的问题\n\n服务的部署位置是会变化的，硬编码写着老是变动很麻烦\n\n * 服务消费者改如何获取服务提供者的地址信息？\n * 如果有多个服务提供者，消费者该如何选择？\n * 消费者如何得知服务提供者的健康状态？\n\n\n\nEureka的作用\n\n\n\n\n\n总结：\n\n\n\n\n# 搭建eureka服务\n\n\n\n> 搭建EurekaServer服务端步骤如下：\n\n1、创建项目，引入spring-cloud-starter-netflix-eureka-server的依赖\n\n\n\n2、编写启动类，添加@EnableEurekaServer注解\n\n3、添加application.yml文件，编写下面的配置\n\n\n\n启动成功这个是注册到Eureka的实例\n\n\n\n> 注册user-service\n\n将user-service服务注册到EurekaServer步骤如下\n\n1、在user-service项目引入spring-cloud-starter-netflix-eureka-client的依赖\n\n\n\n2、在application.yml文件，编写下面的配置：(服务名称&eureka的地址信息)\n\n\n\n同理注册order-service\n\n\n\n另外，我们可以将user-service多次启动，模拟多实例部署，但是为了避免端口冲突，需要修改端口设置：\n\n\n\n\n\n\n\n可以发现这里多出来了一个服务，我们也可以将它启动，这样就完成了一次启动&注册两个实例\n\n\n\n\n\n总结：\n\n\n\n> 在order-service完成服务拉取\n\n服务拉取是基于服务名称获取服务列表，然后再对服务列表做负载均衡\n\n1、修改OrderService的代码，修改访问的url路径，用服务名代替ip，端口：\n\nString url="http://userservice/user/"+ order.getUserId();\n\n\n2、在order-service项目的启动类OrderApplication中的RestTemplate添加负载均衡注解：\n\n@Bean\n@LoadBalanced\npublic RestTemplate restTemplate(){\n\treturn new RestTemplate();\n}\n\n\n这里调用服务就是采用了默认的轮询方式',normalizedContent:'# eureka注册中心\n\n服务调用出现的问题\n\n服务的部署位置是会变化的，硬编码写着老是变动很麻烦\n\n * 服务消费者改如何获取服务提供者的地址信息？\n * 如果有多个服务提供者，消费者该如何选择？\n * 消费者如何得知服务提供者的健康状态？\n\n\n\neureka的作用\n\n\n\n\n\n总结：\n\n\n\n\n# 搭建eureka服务\n\n\n\n> 搭建eurekaserver服务端步骤如下：\n\n1、创建项目，引入spring-cloud-starter-netflix-eureka-server的依赖\n\n\n\n2、编写启动类，添加@enableeurekaserver注解\n\n3、添加application.yml文件，编写下面的配置\n\n\n\n启动成功这个是注册到eureka的实例\n\n\n\n> 注册user-service\n\n将user-service服务注册到eurekaserver步骤如下\n\n1、在user-service项目引入spring-cloud-starter-netflix-eureka-client的依赖\n\n\n\n2、在application.yml文件，编写下面的配置：(服务名称&eureka的地址信息)\n\n\n\n同理注册order-service\n\n\n\n另外，我们可以将user-service多次启动，模拟多实例部署，但是为了避免端口冲突，需要修改端口设置：\n\n\n\n\n\n\n\n可以发现这里多出来了一个服务，我们也可以将它启动，这样就完成了一次启动&注册两个实例\n\n\n\n\n\n总结：\n\n\n\n> 在order-service完成服务拉取\n\n服务拉取是基于服务名称获取服务列表，然后再对服务列表做负载均衡\n\n1、修改orderservice的代码，修改访问的url路径，用服务名代替ip，端口：\n\nstring url="http://userservice/user/"+ order.getuserid();\n\n\n2、在order-service项目的启动类orderapplication中的resttemplate添加负载均衡注解：\n\n@bean\n@loadbalanced\npublic resttemplate resttemplate(){\n\treturn new resttemplate();\n}\n\n\n这里调用服务就是采用了默认的轮询方式',charsets:{cjk:!0},lastUpdated:"2024/05/02, 13:47:32",lastUpdatedTimestamp:1714657652e3},{title:"Nacos注册中心、配置中心",frontmatter:{title:"Nacos注册中心、配置中心",date:"2024-05-02T21:35:02.000Z",author:"ethandu",permalink:"/pages/c321d3/"},regularPath:"/07.%E5%85%AB%E8%82%A1%E6%96%87/01.%E5%BE%AE%E6%9C%8D%E5%8A%A1/04.Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83.html",relativePath:"07.八股文/01.微服务/04.Nacos注册中心、配置中心.md",key:"v-304996c4",path:"/pages/c321d3/",headers:[{level:2,title:"认识Nacos",slug:"认识nacos",normalizedTitle:"认识nacos",charIndex:16},{level:2,title:"安装Nacos",slug:"安装nacos",normalizedTitle:"安装nacos",charIndex:30},{level:2,title:"Nacos服务分级存储模型",slug:"nacos服务分级存储模型",normalizedTitle:"nacos服务分级存储模型",charIndex:165},{level:2,title:"服务跨集群调用问题",slug:"服务跨集群调用问题",normalizedTitle:"服务跨集群调用问题",charIndex:185},{level:2,title:"服务集群属性",slug:"服务集群属性",normalizedTitle:"服务集群属性",charIndex:201},{level:2,title:"根据权重负载均衡",slug:"根据权重负载均衡",normalizedTitle:"根据权重负载均衡",charIndex:1015},{level:2,title:"环境隔离 -namespace",slug:"环境隔离-namespace",normalizedTitle:"环境隔离 -namespace",charIndex:1384},{level:2,title:"nacos注册中心细节分析",slug:"nacos注册中心细节分析",normalizedTitle:"nacos注册中心细节分析",charIndex:2186},{level:3,title:"临时实例和非临时实例",slug:"临时实例和非临时实例",normalizedTitle:"临时实例和非临时实例",charIndex:2381},{level:2,title:"统一配置管理",slug:"统一配置管理",normalizedTitle:"统一配置管理",charIndex:2577},{level:2,title:"配置自动刷新",slug:"配置自动刷新",normalizedTitle:"配置自动刷新",charIndex:3674},{level:2,title:"多环境配置共享",slug:"多环境配置共享",normalizedTitle:"多环境配置共享",charIndex:3900},{level:2,title:"1.集群结构图",slug:"_1-集群结构图",normalizedTitle:"1.集群结构图",charIndex:4293},{level:2,title:"2.搭建集群",slug:"_2-搭建集群",normalizedTitle:"2.搭建集群",charIndex:4434},{level:3,title:"2.1.初始化数据库",slug:"_2-1-初始化数据库",normalizedTitle:"2.1.初始化数据库",charIndex:4473},{level:3,title:"2.2.下载nacos",slug:"_2-2-下载nacos",normalizedTitle:"2.2.下载nacos",charIndex:13708},{level:3,title:"2.3.配置Nacos",slug:"_2-3-配置nacos",normalizedTitle:"2.3.配置nacos",charIndex:13726},{level:3,title:"2.4.启动",slug:"_2-4-启动",normalizedTitle:"2.4.启动",charIndex:14138},{level:3,title:"2.5.nginx反向代理",slug:"_2-5-nginx反向代理",normalizedTitle:"2.5.nginx反向代理",charIndex:14349},{level:3,title:"2.6.优化",slug:"_2-6-优化",normalizedTitle:"2.6.优化",charIndex:14828}],headersStr:"认识Nacos 安装Nacos Nacos服务分级存储模型 服务跨集群调用问题 服务集群属性 根据权重负载均衡 环境隔离 -namespace nacos注册中心细节分析 临时实例和非临时实例 统一配置管理 配置自动刷新 多环境配置共享 1.集群结构图 2.搭建集群 2.1.初始化数据库 2.2.下载nacos 2.3.配置Nacos 2.4.启动 2.5.nginx反向代理 2.6.优化",content:"# Nacos注册中心\n\n\n# 认识Nacos\n\n\n\n\n# 安装Nacos\n\ngithub上下载\n\n> 启动\n\n进入bin目录\n\n然后执行命令既可：\n\n * windows命令：\n\nstartup.cmd -m standalone\n\n\n执行后的效果如图：\n\n\n\n访问8848端口，默认的账号和密码都是“nacos”\n\n\n\n\n# Nacos服务分级存储模型\n\n\n\n\n# 服务跨集群调用问题\n\n\n\n\n# 服务集群属性\n\n1、修改application.yml，添加如下内容\n\nspring:\n  cloud:\n    nacos:\n      server-addr: localhost:8848 # nacos 服务端地址\n      discovery:\n        cluster-name: HZ # 配置集群名称也就是机房位置，例如：HZ，杭州\n\n\n2、在Nacos控制台可以看到集群变化：\n\n\n\n总结：\n\n\n\n服务集群属性\n\n我们修改user-service配置，达到下面的效果\n\n\n\n1、修改order-service中的application.yml，设置集群为HZ：\n\nspring:\n  cloud:\n    nacos:\n      server-addr: localhost:8848 # nacos 服务端地址\n      discovery:\n        cluster-name: HZ # 配置集群名称，也就是机房位置\n\n\n2、然后在order-service中设置负载均衡的IRule为NacosRule，这个规则优先会寻找与自己同集群的服务：\n\nuserservice:\n  ribbon：\n    NFLoadBalanceRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule # 负载均衡规则\n\n\n这里的NacosRule是优先采用本地集群，然后在同一地位的集群中随机负载均衡\n\n3、注意将user-service的权重都设置为1\n\n关闭userservice1&userservice2 留了个在上海的userservice3\n\n\n\n可以看见杭州里面已经没有健康的集群了\n\n\n\n再次请求order-service这个时候日志中产生了跨境请求的警告，这个时候运维看到以后就启动死掉的服务就好了。\n\n\n\n总结：\n\n\n\n\n# 根据权重负载均衡\n\n实际部署中会出现这样的场景：\n\n * 服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求\n\nNacos提供了权重配置来控制访问频率，权重越大则访问频率越高\n\n1、在Nacos控制台可以设置实例的权重值，首先选中实例后面的编辑按钮\n\n\n\n2、将权重设置为0.1，测试可以发现8081被访问到的频率大大降低\n\n\n\n如果这里将权重设为0那么就不会再被访问了，这样有什么用呢？我们服务需要升级的话以前要在月黑风高的时候用户不用服务的时候升级代码重启我们的服务，这样的问题很大。但是我们这里有集群的话，将集群中一个服务的权重调为0，然后升级，然后再将权重调小一点，放一部分用户来测试，可以的话再将权重调大，这样就不知不觉的时候完成了版本的升级了,平滑升级！\n\n总结：\n\n\n\n\n# 环境隔离 -namespace\n\nNacos中服务存储和数据存储的最外层都是一个名为namespace的东西，来做最外层隔离\n\n\n\n（服务的划分是根据业务进行的划分，但是我们的环境也是会变化的，所以我们根据环境变化做隔离，namespace就是干这个事的。group是分组，将相关度比较高的服务放进一个组里面）\n\n1.新建一个dev命名空间\n\n\n\n2.然后填写一个新的命名空间信息：\n\n\n\n3.保存后会再控制台看到这个命名空间的id：\n\n\n\n4.修改order-service的application.yml，添加namespace：\n\nspring:\n  datasource:\n    url: jdbc:mysql://mysql:3306/cloud_order?useSSL=false\n    username: root\n    password: 123\n    driver-class-name: com.mysql.jdbc.Driver\n  application:\n    name: orderservice\n  cloud:\n    nacos:\n      server-addr: nacos:8848 # nacos服务地址\n      discovery:\n        cluster-name: HZ\n        namespace: 4d6ce343-9e1b-44df-a90f-2cf2b6b3d177 # dev环境\n#        ephemeral: false # 是否是临时实例\n\n\n这个时候在服务列表中的public中已经看不到orderservice了，点到旁边的dev，看到了orderservice\n\n\n\n发起访问，报错了，因为他们已经隔离了，已经事两个世界的人了！不同namespace下的服务不可见\n\n\n\n总结：\n\n\n\n\n# nacos注册中心细节分析\n\n\n\n默认情况下所有的实例都是临时实例\n\n\n\n所以我们服务提供者要发起对临时实例心跳检测到nacos。但是要是不是临时实例就是nacos主动询问，而服务提供者不检测。注意，nacos不会把非临时实例从列表中剔除，而仅仅是标记出它不健康了。\n\n\n\n服务消费，eureka做的是pull，而nacos做的事pull+push, 时效性更好，更新效率更高\n\n\n\n\n# 临时实例和非临时实例\n\n服务注册到Nacos时，可以选择注册为临时或非临时实例，通过下面的配置来设置：\n\nspring:\n  cloud:\n    nacos:\n      discovery:\n        ephemeral: false # 设置为非临时实例\n\n\n临时实例宕机时，会从nacos的服务列表中剔除，而非临时实例则不会。\n\n总结：\n\n\n\n\n# Nacos配置管理\n\n\n# 统一配置管理\n\n服务要相互调用，要完成相互调用，我们的做法是将服务注册到注册中心，然后消费者就能在注册中心发现，实现服务的获取和负载均衡，完成远程调用。\n\n随着服务多了，配置的集合管理也是问题，同时修改服务及相关服务配置需要重启在生产环境下影响是很大的。要是有一个服务的统一管理+服务的热更新就解决了上面的问题了。\n\n\n\n这里我们的注册中心和配置管理都是nacos\n\n\n\n下面展示怎么让nacos做管理。\n\n\n\n\n\n\n\n我们已经把部分配置放到了nacos服务器上，下面微服务要想办法获取这些配置\n\n原来的配置获取步骤：\n\n\n\n将来我们要将远程的nacos配置文件和本地的application.yml配置文件进行合并再创建spring容器。我们读取nacos配置文件的时候我们要知道两件事情\n\n * 从哪读取\n * 读取谁\n\n所以我们要提前知道这些信息，这些配置不能再放在原来的application.yml中了，这里springboot给我们提供了bootstrap.yml优先级比application.yml的优先级要高。\n\n现在的配置的获取步骤：\n\n\n\n与nacos地址和nacos上的配置文件有关的所有信息都应该放到bootstrap.yml中\n\n1、引入Nacos的配置管理客户端依赖：\n\n\x3c!-- nacos客户端依赖包 --\x3e\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n        </dependency>\n\n\n2、在userservice中的resource目录添加一个bootstrap.yml文件，这个文件是引导文件，优先级高于application.yml:\n\nspring:\n  application:\n    name: userservice\n  profiles:\n    active: dev # 环境\n  cloud:\n    nacos:\n      server-addr: localhost:8848 # nacos地址\n      config:\n        file-extension: yaml # 文件后缀名\n\n\n我们在user-service中将pattern.dateformat这个属性注入到UserController中做测试：\n\n\n\n总结：\n\n\n\n\n# 配置自动刷新\n\n\n\n\n\n这里我们还缺少东西所以没能实现热更新\n\nNacos中的配置文件热更新实现方式:\n\n * 方式一：在@Value注入的变量所在类上添加注解@RefreshScope\n\n\n\n\n\n这里我们出现了大量的日志 这个就是因为我们修改了配置文件导致的\n\n * 方式二：使用@ConfigurationPorperties注解（推荐）\n\n\n\n\n\n将配置注入到对象中然后直接使用(这里的@RefreshScope已注释掉)\n\n总结：\n\n\n\n\n# 多环境配置共享\n\n微服务启动时会从nacos读取多个配置文件：\n\n\n\n这里我们的userservice是在dev环境所以我们能读到userservice.yaml 和 userservice-dev.yaml\n\n\n\n这里我们将一个服务实例给修改环境为test 这里是一种不用改代码的方法\n\n\n\n\n\n现在它读不到userservice-dev.yaml的属性了\n\n * dev环境\n\n\n\n\n\n * test环境\n\n\n\n\n\n> 测试本地配置和nacos配置的优先级问题\n\napplication.yaml添加\n\n\n\nPatternProperties中添加这个属性\n\n\n\n在userservice.yaml中添加这个属性\n\n\n\n测试发现远端nacos的优先级高\n\n\n\n总结：\n\n\n\n\n# Nacos集群搭建\n\n\n\n之前我们一直使用的是单点的nacos还不是集群 和企业需求没对接上\n\n\n# 1.集群结构图\n\n\n\nn台nacos首先要实现数据共享，我们整一个mysql集群，让多台nacos都来在这个集群里面做数据读写这样数据就共享了，而后用户请求进入以后，我们还要让它能分发到不同的nacos节点，这个就是负载均衡。这里使用Nginx来搞负载均衡和反向代理。\n\n\n\n\n# 2.搭建集群\n\n\n\n这里搞MySQL主从高可用集群搭建还是比较麻烦的\n\n\n# 2.1.初始化数据库\n\n\n\nCREATE TABLE `config_info` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',\n  `data_id` varchar(255) NOT NULL COMMENT 'data_id',\n  `group_id` varchar(255) DEFAULT NULL,\n  `content` longtext NOT NULL COMMENT 'content',\n  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',\n  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',\n  `src_user` text COMMENT 'source user',\n  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',\n  `app_name` varchar(128) DEFAULT NULL,\n  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',\n  `c_desc` varchar(256) DEFAULT NULL,\n  `c_use` varchar(64) DEFAULT NULL,\n  `effect` varchar(64) DEFAULT NULL,\n  `type` varchar(64) DEFAULT NULL,\n  `c_schema` text,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info';\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = config_info_aggr   */\n/******************************************/\nCREATE TABLE `config_info_aggr` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',\n  `data_id` varchar(255) NOT NULL COMMENT 'data_id',\n  `group_id` varchar(255) NOT NULL COMMENT 'group_id',\n  `datum_id` varchar(255) NOT NULL COMMENT 'datum_id',\n  `content` longtext NOT NULL COMMENT '内容',\n  `gmt_modified` datetime NOT NULL COMMENT '修改时间',\n  `app_name` varchar(128) DEFAULT NULL,\n  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='增加租户字段';\n\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = config_info_beta   */\n/******************************************/\nCREATE TABLE `config_info_beta` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',\n  `data_id` varchar(255) NOT NULL COMMENT 'data_id',\n  `group_id` varchar(128) NOT NULL COMMENT 'group_id',\n  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',\n  `content` longtext NOT NULL COMMENT 'content',\n  `beta_ips` varchar(1024) DEFAULT NULL COMMENT 'betaIps',\n  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',\n  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',\n  `src_user` text COMMENT 'source user',\n  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',\n  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_beta';\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = config_info_tag   */\n/******************************************/\nCREATE TABLE `config_info_tag` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',\n  `data_id` varchar(255) NOT NULL COMMENT 'data_id',\n  `group_id` varchar(128) NOT NULL COMMENT 'group_id',\n  `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id',\n  `tag_id` varchar(128) NOT NULL COMMENT 'tag_id',\n  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',\n  `content` longtext NOT NULL COMMENT 'content',\n  `md5` varchar(32) DEFAULT NULL COMMENT 'md5',\n  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',\n  `src_user` text COMMENT 'source user',\n  `src_ip` varchar(50) DEFAULT NULL COMMENT 'source ip',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_tag';\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = config_tags_relation   */\n/******************************************/\nCREATE TABLE `config_tags_relation` (\n  `id` bigint(20) NOT NULL COMMENT 'id',\n  `tag_name` varchar(128) NOT NULL COMMENT 'tag_name',\n  `tag_type` varchar(64) DEFAULT NULL COMMENT 'tag_type',\n  `data_id` varchar(255) NOT NULL COMMENT 'data_id',\n  `group_id` varchar(128) NOT NULL COMMENT 'group_id',\n  `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id',\n  `nid` bigint(20) NOT NULL AUTO_INCREMENT,\n  PRIMARY KEY (`nid`),\n  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),\n  KEY `idx_tenant_id` (`tenant_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_tag_relation';\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = group_capacity   */\n/******************************************/\nCREATE TABLE `group_capacity` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',\n  `group_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',\n  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',\n  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',\n  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',\n  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值',\n  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',\n  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',\n  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_group_id` (`group_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='集群、各Group容量信息表';\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = his_config_info   */\n/******************************************/\nCREATE TABLE `his_config_info` (\n  `id` bigint(64) unsigned NOT NULL,\n  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n  `data_id` varchar(255) NOT NULL,\n  `group_id` varchar(128) NOT NULL,\n  `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',\n  `content` longtext NOT NULL,\n  `md5` varchar(32) DEFAULT NULL,\n  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  `src_user` text,\n  `src_ip` varchar(50) DEFAULT NULL,\n  `op_type` char(10) DEFAULT NULL,\n  `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',\n  PRIMARY KEY (`nid`),\n  KEY `idx_gmt_create` (`gmt_create`),\n  KEY `idx_gmt_modified` (`gmt_modified`),\n  KEY `idx_did` (`data_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='多租户改造';\n\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = tenant_capacity   */\n/******************************************/\nCREATE TABLE `tenant_capacity` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',\n  `tenant_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Tenant ID',\n  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',\n  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',\n  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',\n  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数',\n  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',\n  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',\n  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_tenant_id` (`tenant_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='租户容量信息表';\n\n\nCREATE TABLE `tenant_info` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',\n  `kp` varchar(128) NOT NULL COMMENT 'kp',\n  `tenant_id` varchar(128) default '' COMMENT 'tenant_id',\n  `tenant_name` varchar(128) default '' COMMENT 'tenant_name',\n  `tenant_desc` varchar(256) DEFAULT NULL COMMENT 'tenant_desc',\n  `create_source` varchar(32) DEFAULT NULL COMMENT 'create_source',\n  `gmt_create` bigint(20) NOT NULL COMMENT '创建时间',\n  `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),\n  KEY `idx_tenant_id` (`tenant_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='tenant_info';\n\nCREATE TABLE `users` (\n\t`username` varchar(50) NOT NULL PRIMARY KEY,\n\t`password` varchar(500) NOT NULL,\n\t`enabled` boolean NOT NULL\n);\n\nCREATE TABLE `roles` (\n\t`username` varchar(50) NOT NULL,\n\t`role` varchar(50) NOT NULL,\n\tUNIQUE INDEX `idx_user_role` (`username` ASC, `role` ASC) USING BTREE\n);\n\nCREATE TABLE `permissions` (\n    `role` varchar(50) NOT NULL,\n    `resource` varchar(255) NOT NULL,\n    `action` varchar(8) NOT NULL,\n    UNIQUE INDEX `uk_role_permission` (`role`,`resource`,`action`) USING BTREE\n);\n\nINSERT INTO users (username, password, enabled) VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', TRUE);\n\nINSERT INTO roles (username, role) VALUES ('nacos', 'ROLE_ADMIN');\n\n\n\n\n总之搭建完成\n\n\n# 2.2.下载nacos\n\n\n\n\n# 2.3.配置Nacos\n\n\n\n\n\n然后添加内容：\n\n127.0.0.1:8845\n127.0.0.1:8846\n127.0.0.1:8847\n\n\n然后修改application.properties文件，添加数据库配置\n\nspring.datasource.platform=mysql\n\ndb.num=1\n\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=UTC\ndb.user.0=root\ndb.password.0=123\n\n\n首先路径不要有中文，其次这里我的还需要将ip指定成127.0.0.1否则每次都会走默认ip\n\n\n# 2.4.启动\n\n将nacos文件夹复制三份，分别命名为：nacos1、nacos2、nacos3\n\n\n\n然后分别修改三个文件夹中的application.properties，\n\nnacos1:\n\nserver.port=8845\n\n\nnacos2:\n\nserver.port=8846\n\n\nnacos3:\n\nserver.port=8847\n\n\n然后分别启动三个nacos节点：\n\nstartup.cmd\n\n\n\n\n\n# 2.5.nginx反向代理\n\n找到课前资料提供的nginx安装包：\n\n\n\n解压到任意非中文目录下：\n\n\n\n修改conf/nginx.conf文件，配置如下：\n\nupstream nacos-cluster {\n    server 127.0.0.1:8845;\n\tserver 127.0.0.1:8846;\n\tserver 127.0.0.1:8847;\n}\n\nserver {\n    listen       80;\n    server_name  localhost;\n\n    location /nacos {\n        proxy_pass http://nacos-cluster;\n    }\n}\n\n\n而后在浏览器访问：http://localhost/nacos即可。\n\n\n\n这里的访问会在这三个nacos里面做反向代理\n\n代码中application.yml文件配置如下：\n\nspring:\n  cloud:\n    nacos:\n      server-addr: localhost:80 # Nacos地址\n\n\n\n# 2.6.优化\n\n * 实际部署时，需要给做反向代理的nginx服务器设置一个域名，这样后续如果有服务器迁移nacos的客户端也无需更改配置.\n\n * Nacos的各个节点应该部署到多个不同服务器，做好容灾和隔离\n\n总结：\n\n",normalizedContent:"# nacos注册中心\n\n\n# 认识nacos\n\n\n\n\n# 安装nacos\n\ngithub上下载\n\n> 启动\n\n进入bin目录\n\n然后执行命令既可：\n\n * windows命令：\n\nstartup.cmd -m standalone\n\n\n执行后的效果如图：\n\n\n\n访问8848端口，默认的账号和密码都是“nacos”\n\n\n\n\n# nacos服务分级存储模型\n\n\n\n\n# 服务跨集群调用问题\n\n\n\n\n# 服务集群属性\n\n1、修改application.yml，添加如下内容\n\nspring:\n  cloud:\n    nacos:\n      server-addr: localhost:8848 # nacos 服务端地址\n      discovery:\n        cluster-name: hz # 配置集群名称也就是机房位置，例如：hz，杭州\n\n\n2、在nacos控制台可以看到集群变化：\n\n\n\n总结：\n\n\n\n服务集群属性\n\n我们修改user-service配置，达到下面的效果\n\n\n\n1、修改order-service中的application.yml，设置集群为hz：\n\nspring:\n  cloud:\n    nacos:\n      server-addr: localhost:8848 # nacos 服务端地址\n      discovery:\n        cluster-name: hz # 配置集群名称，也就是机房位置\n\n\n2、然后在order-service中设置负载均衡的irule为nacosrule，这个规则优先会寻找与自己同集群的服务：\n\nuserservice:\n  ribbon：\n    nfloadbalanceruleclassname: com.alibaba.cloud.nacos.ribbon.nacosrule # 负载均衡规则\n\n\n这里的nacosrule是优先采用本地集群，然后在同一地位的集群中随机负载均衡\n\n3、注意将user-service的权重都设置为1\n\n关闭userservice1&userservice2 留了个在上海的userservice3\n\n\n\n可以看见杭州里面已经没有健康的集群了\n\n\n\n再次请求order-service这个时候日志中产生了跨境请求的警告，这个时候运维看到以后就启动死掉的服务就好了。\n\n\n\n总结：\n\n\n\n\n# 根据权重负载均衡\n\n实际部署中会出现这样的场景：\n\n * 服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求\n\nnacos提供了权重配置来控制访问频率，权重越大则访问频率越高\n\n1、在nacos控制台可以设置实例的权重值，首先选中实例后面的编辑按钮\n\n\n\n2、将权重设置为0.1，测试可以发现8081被访问到的频率大大降低\n\n\n\n如果这里将权重设为0那么就不会再被访问了，这样有什么用呢？我们服务需要升级的话以前要在月黑风高的时候用户不用服务的时候升级代码重启我们的服务，这样的问题很大。但是我们这里有集群的话，将集群中一个服务的权重调为0，然后升级，然后再将权重调小一点，放一部分用户来测试，可以的话再将权重调大，这样就不知不觉的时候完成了版本的升级了,平滑升级！\n\n总结：\n\n\n\n\n# 环境隔离 -namespace\n\nnacos中服务存储和数据存储的最外层都是一个名为namespace的东西，来做最外层隔离\n\n\n\n（服务的划分是根据业务进行的划分，但是我们的环境也是会变化的，所以我们根据环境变化做隔离，namespace就是干这个事的。group是分组，将相关度比较高的服务放进一个组里面）\n\n1.新建一个dev命名空间\n\n\n\n2.然后填写一个新的命名空间信息：\n\n\n\n3.保存后会再控制台看到这个命名空间的id：\n\n\n\n4.修改order-service的application.yml，添加namespace：\n\nspring:\n  datasource:\n    url: jdbc:mysql://mysql:3306/cloud_order?usessl=false\n    username: root\n    password: 123\n    driver-class-name: com.mysql.jdbc.driver\n  application:\n    name: orderservice\n  cloud:\n    nacos:\n      server-addr: nacos:8848 # nacos服务地址\n      discovery:\n        cluster-name: hz\n        namespace: 4d6ce343-9e1b-44df-a90f-2cf2b6b3d177 # dev环境\n#        ephemeral: false # 是否是临时实例\n\n\n这个时候在服务列表中的public中已经看不到orderservice了，点到旁边的dev，看到了orderservice\n\n\n\n发起访问，报错了，因为他们已经隔离了，已经事两个世界的人了！不同namespace下的服务不可见\n\n\n\n总结：\n\n\n\n\n# nacos注册中心细节分析\n\n\n\n默认情况下所有的实例都是临时实例\n\n\n\n所以我们服务提供者要发起对临时实例心跳检测到nacos。但是要是不是临时实例就是nacos主动询问，而服务提供者不检测。注意，nacos不会把非临时实例从列表中剔除，而仅仅是标记出它不健康了。\n\n\n\n服务消费，eureka做的是pull，而nacos做的事pull+push, 时效性更好，更新效率更高\n\n\n\n\n# 临时实例和非临时实例\n\n服务注册到nacos时，可以选择注册为临时或非临时实例，通过下面的配置来设置：\n\nspring:\n  cloud:\n    nacos:\n      discovery:\n        ephemeral: false # 设置为非临时实例\n\n\n临时实例宕机时，会从nacos的服务列表中剔除，而非临时实例则不会。\n\n总结：\n\n\n\n\n# nacos配置管理\n\n\n# 统一配置管理\n\n服务要相互调用，要完成相互调用，我们的做法是将服务注册到注册中心，然后消费者就能在注册中心发现，实现服务的获取和负载均衡，完成远程调用。\n\n随着服务多了，配置的集合管理也是问题，同时修改服务及相关服务配置需要重启在生产环境下影响是很大的。要是有一个服务的统一管理+服务的热更新就解决了上面的问题了。\n\n\n\n这里我们的注册中心和配置管理都是nacos\n\n\n\n下面展示怎么让nacos做管理。\n\n\n\n\n\n\n\n我们已经把部分配置放到了nacos服务器上，下面微服务要想办法获取这些配置\n\n原来的配置获取步骤：\n\n\n\n将来我们要将远程的nacos配置文件和本地的application.yml配置文件进行合并再创建spring容器。我们读取nacos配置文件的时候我们要知道两件事情\n\n * 从哪读取\n * 读取谁\n\n所以我们要提前知道这些信息，这些配置不能再放在原来的application.yml中了，这里springboot给我们提供了bootstrap.yml优先级比application.yml的优先级要高。\n\n现在的配置的获取步骤：\n\n\n\n与nacos地址和nacos上的配置文件有关的所有信息都应该放到bootstrap.yml中\n\n1、引入nacos的配置管理客户端依赖：\n\n\x3c!-- nacos客户端依赖包 --\x3e\n        <dependency>\n            <groupid>com.alibaba.cloud</groupid>\n            <artifactid>spring-cloud-starter-alibaba-nacos-discovery</artifactid>\n        </dependency>\n\n\n2、在userservice中的resource目录添加一个bootstrap.yml文件，这个文件是引导文件，优先级高于application.yml:\n\nspring:\n  application:\n    name: userservice\n  profiles:\n    active: dev # 环境\n  cloud:\n    nacos:\n      server-addr: localhost:8848 # nacos地址\n      config:\n        file-extension: yaml # 文件后缀名\n\n\n我们在user-service中将pattern.dateformat这个属性注入到usercontroller中做测试：\n\n\n\n总结：\n\n\n\n\n# 配置自动刷新\n\n\n\n\n\n这里我们还缺少东西所以没能实现热更新\n\nnacos中的配置文件热更新实现方式:\n\n * 方式一：在@value注入的变量所在类上添加注解@refreshscope\n\n\n\n\n\n这里我们出现了大量的日志 这个就是因为我们修改了配置文件导致的\n\n * 方式二：使用@configurationporperties注解（推荐）\n\n\n\n\n\n将配置注入到对象中然后直接使用(这里的@refreshscope已注释掉)\n\n总结：\n\n\n\n\n# 多环境配置共享\n\n微服务启动时会从nacos读取多个配置文件：\n\n\n\n这里我们的userservice是在dev环境所以我们能读到userservice.yaml 和 userservice-dev.yaml\n\n\n\n这里我们将一个服务实例给修改环境为test 这里是一种不用改代码的方法\n\n\n\n\n\n现在它读不到userservice-dev.yaml的属性了\n\n * dev环境\n\n\n\n\n\n * test环境\n\n\n\n\n\n> 测试本地配置和nacos配置的优先级问题\n\napplication.yaml添加\n\n\n\npatternproperties中添加这个属性\n\n\n\n在userservice.yaml中添加这个属性\n\n\n\n测试发现远端nacos的优先级高\n\n\n\n总结：\n\n\n\n\n# nacos集群搭建\n\n\n\n之前我们一直使用的是单点的nacos还不是集群 和企业需求没对接上\n\n\n# 1.集群结构图\n\n\n\nn台nacos首先要实现数据共享，我们整一个mysql集群，让多台nacos都来在这个集群里面做数据读写这样数据就共享了，而后用户请求进入以后，我们还要让它能分发到不同的nacos节点，这个就是负载均衡。这里使用nginx来搞负载均衡和反向代理。\n\n\n\n\n# 2.搭建集群\n\n\n\n这里搞mysql主从高可用集群搭建还是比较麻烦的\n\n\n# 2.1.初始化数据库\n\n\n\ncreate table `config_info` (\n  `id` bigint(20) not null auto_increment comment 'id',\n  `data_id` varchar(255) not null comment 'data_id',\n  `group_id` varchar(255) default null,\n  `content` longtext not null comment 'content',\n  `md5` varchar(32) default null comment 'md5',\n  `gmt_create` datetime not null default current_timestamp comment '创建时间',\n  `gmt_modified` datetime not null default current_timestamp comment '修改时间',\n  `src_user` text comment 'source user',\n  `src_ip` varchar(50) default null comment 'source ip',\n  `app_name` varchar(128) default null,\n  `tenant_id` varchar(128) default '' comment '租户字段',\n  `c_desc` varchar(256) default null,\n  `c_use` varchar(64) default null,\n  `effect` varchar(64) default null,\n  `type` varchar(64) default null,\n  `c_schema` text,\n  primary key (`id`),\n  unique key `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)\n) engine=innodb default charset=utf8 collate=utf8_bin comment='config_info';\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = config_info_aggr   */\n/******************************************/\ncreate table `config_info_aggr` (\n  `id` bigint(20) not null auto_increment comment 'id',\n  `data_id` varchar(255) not null comment 'data_id',\n  `group_id` varchar(255) not null comment 'group_id',\n  `datum_id` varchar(255) not null comment 'datum_id',\n  `content` longtext not null comment '内容',\n  `gmt_modified` datetime not null comment '修改时间',\n  `app_name` varchar(128) default null,\n  `tenant_id` varchar(128) default '' comment '租户字段',\n  primary key (`id`),\n  unique key `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)\n) engine=innodb default charset=utf8 collate=utf8_bin comment='增加租户字段';\n\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = config_info_beta   */\n/******************************************/\ncreate table `config_info_beta` (\n  `id` bigint(20) not null auto_increment comment 'id',\n  `data_id` varchar(255) not null comment 'data_id',\n  `group_id` varchar(128) not null comment 'group_id',\n  `app_name` varchar(128) default null comment 'app_name',\n  `content` longtext not null comment 'content',\n  `beta_ips` varchar(1024) default null comment 'betaips',\n  `md5` varchar(32) default null comment 'md5',\n  `gmt_create` datetime not null default current_timestamp comment '创建时间',\n  `gmt_modified` datetime not null default current_timestamp comment '修改时间',\n  `src_user` text comment 'source user',\n  `src_ip` varchar(50) default null comment 'source ip',\n  `tenant_id` varchar(128) default '' comment '租户字段',\n  primary key (`id`),\n  unique key `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)\n) engine=innodb default charset=utf8 collate=utf8_bin comment='config_info_beta';\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = config_info_tag   */\n/******************************************/\ncreate table `config_info_tag` (\n  `id` bigint(20) not null auto_increment comment 'id',\n  `data_id` varchar(255) not null comment 'data_id',\n  `group_id` varchar(128) not null comment 'group_id',\n  `tenant_id` varchar(128) default '' comment 'tenant_id',\n  `tag_id` varchar(128) not null comment 'tag_id',\n  `app_name` varchar(128) default null comment 'app_name',\n  `content` longtext not null comment 'content',\n  `md5` varchar(32) default null comment 'md5',\n  `gmt_create` datetime not null default current_timestamp comment '创建时间',\n  `gmt_modified` datetime not null default current_timestamp comment '修改时间',\n  `src_user` text comment 'source user',\n  `src_ip` varchar(50) default null comment 'source ip',\n  primary key (`id`),\n  unique key `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)\n) engine=innodb default charset=utf8 collate=utf8_bin comment='config_info_tag';\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = config_tags_relation   */\n/******************************************/\ncreate table `config_tags_relation` (\n  `id` bigint(20) not null comment 'id',\n  `tag_name` varchar(128) not null comment 'tag_name',\n  `tag_type` varchar(64) default null comment 'tag_type',\n  `data_id` varchar(255) not null comment 'data_id',\n  `group_id` varchar(128) not null comment 'group_id',\n  `tenant_id` varchar(128) default '' comment 'tenant_id',\n  `nid` bigint(20) not null auto_increment,\n  primary key (`nid`),\n  unique key `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),\n  key `idx_tenant_id` (`tenant_id`)\n) engine=innodb default charset=utf8 collate=utf8_bin comment='config_tag_relation';\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = group_capacity   */\n/******************************************/\ncreate table `group_capacity` (\n  `id` bigint(20) unsigned not null auto_increment comment '主键id',\n  `group_id` varchar(128) not null default '' comment 'group id，空字符表示整个集群',\n  `quota` int(10) unsigned not null default '0' comment '配额，0表示使用默认值',\n  `usage` int(10) unsigned not null default '0' comment '使用量',\n  `max_size` int(10) unsigned not null default '0' comment '单个配置大小上限，单位为字节，0表示使用默认值',\n  `max_aggr_count` int(10) unsigned not null default '0' comment '聚合子配置最大个数，，0表示使用默认值',\n  `max_aggr_size` int(10) unsigned not null default '0' comment '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',\n  `max_history_count` int(10) unsigned not null default '0' comment '最大变更历史数量',\n  `gmt_create` datetime not null default current_timestamp comment '创建时间',\n  `gmt_modified` datetime not null default current_timestamp comment '修改时间',\n  primary key (`id`),\n  unique key `uk_group_id` (`group_id`)\n) engine=innodb default charset=utf8 collate=utf8_bin comment='集群、各group容量信息表';\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = his_config_info   */\n/******************************************/\ncreate table `his_config_info` (\n  `id` bigint(64) unsigned not null,\n  `nid` bigint(20) unsigned not null auto_increment,\n  `data_id` varchar(255) not null,\n  `group_id` varchar(128) not null,\n  `app_name` varchar(128) default null comment 'app_name',\n  `content` longtext not null,\n  `md5` varchar(32) default null,\n  `gmt_create` datetime not null default current_timestamp,\n  `gmt_modified` datetime not null default current_timestamp,\n  `src_user` text,\n  `src_ip` varchar(50) default null,\n  `op_type` char(10) default null,\n  `tenant_id` varchar(128) default '' comment '租户字段',\n  primary key (`nid`),\n  key `idx_gmt_create` (`gmt_create`),\n  key `idx_gmt_modified` (`gmt_modified`),\n  key `idx_did` (`data_id`)\n) engine=innodb default charset=utf8 collate=utf8_bin comment='多租户改造';\n\n\n/******************************************/\n/*   数据库全名 = nacos_config   */\n/*   表名称 = tenant_capacity   */\n/******************************************/\ncreate table `tenant_capacity` (\n  `id` bigint(20) unsigned not null auto_increment comment '主键id',\n  `tenant_id` varchar(128) not null default '' comment 'tenant id',\n  `quota` int(10) unsigned not null default '0' comment '配额，0表示使用默认值',\n  `usage` int(10) unsigned not null default '0' comment '使用量',\n  `max_size` int(10) unsigned not null default '0' comment '单个配置大小上限，单位为字节，0表示使用默认值',\n  `max_aggr_count` int(10) unsigned not null default '0' comment '聚合子配置最大个数',\n  `max_aggr_size` int(10) unsigned not null default '0' comment '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',\n  `max_history_count` int(10) unsigned not null default '0' comment '最大变更历史数量',\n  `gmt_create` datetime not null default current_timestamp comment '创建时间',\n  `gmt_modified` datetime not null default current_timestamp comment '修改时间',\n  primary key (`id`),\n  unique key `uk_tenant_id` (`tenant_id`)\n) engine=innodb default charset=utf8 collate=utf8_bin comment='租户容量信息表';\n\n\ncreate table `tenant_info` (\n  `id` bigint(20) not null auto_increment comment 'id',\n  `kp` varchar(128) not null comment 'kp',\n  `tenant_id` varchar(128) default '' comment 'tenant_id',\n  `tenant_name` varchar(128) default '' comment 'tenant_name',\n  `tenant_desc` varchar(256) default null comment 'tenant_desc',\n  `create_source` varchar(32) default null comment 'create_source',\n  `gmt_create` bigint(20) not null comment '创建时间',\n  `gmt_modified` bigint(20) not null comment '修改时间',\n  primary key (`id`),\n  unique key `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),\n  key `idx_tenant_id` (`tenant_id`)\n) engine=innodb default charset=utf8 collate=utf8_bin comment='tenant_info';\n\ncreate table `users` (\n\t`username` varchar(50) not null primary key,\n\t`password` varchar(500) not null,\n\t`enabled` boolean not null\n);\n\ncreate table `roles` (\n\t`username` varchar(50) not null,\n\t`role` varchar(50) not null,\n\tunique index `idx_user_role` (`username` asc, `role` asc) using btree\n);\n\ncreate table `permissions` (\n    `role` varchar(50) not null,\n    `resource` varchar(255) not null,\n    `action` varchar(8) not null,\n    unique index `uk_role_permission` (`role`,`resource`,`action`) using btree\n);\n\ninsert into users (username, password, enabled) values ('nacos', '$2a$10$euwpzhzz32djn7jexm34moeyirddfazm2kuwj7veojhhzkdrxfvuu', true);\n\ninsert into roles (username, role) values ('nacos', 'role_admin');\n\n\n\n\n总之搭建完成\n\n\n# 2.2.下载nacos\n\n\n\n\n# 2.3.配置nacos\n\n\n\n\n\n然后添加内容：\n\n127.0.0.1:8845\n127.0.0.1:8846\n127.0.0.1:8847\n\n\n然后修改application.properties文件，添加数据库配置\n\nspring.datasource.platform=mysql\n\ndb.num=1\n\ndb.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterencoding=utf8&connecttimeout=1000&sockettimeout=3000&autoreconnect=true&useunicode=true&usessl=false&servertimezone=utc\ndb.user.0=root\ndb.password.0=123\n\n\n首先路径不要有中文，其次这里我的还需要将ip指定成127.0.0.1否则每次都会走默认ip\n\n\n# 2.4.启动\n\n将nacos文件夹复制三份，分别命名为：nacos1、nacos2、nacos3\n\n\n\n然后分别修改三个文件夹中的application.properties，\n\nnacos1:\n\nserver.port=8845\n\n\nnacos2:\n\nserver.port=8846\n\n\nnacos3:\n\nserver.port=8847\n\n\n然后分别启动三个nacos节点：\n\nstartup.cmd\n\n\n\n\n\n# 2.5.nginx反向代理\n\n找到课前资料提供的nginx安装包：\n\n\n\n解压到任意非中文目录下：\n\n\n\n修改conf/nginx.conf文件，配置如下：\n\nupstream nacos-cluster {\n    server 127.0.0.1:8845;\n\tserver 127.0.0.1:8846;\n\tserver 127.0.0.1:8847;\n}\n\nserver {\n    listen       80;\n    server_name  localhost;\n\n    location /nacos {\n        proxy_pass http://nacos-cluster;\n    }\n}\n\n\n而后在浏览器访问：http://localhost/nacos即可。\n\n\n\n这里的访问会在这三个nacos里面做反向代理\n\n代码中application.yml文件配置如下：\n\nspring:\n  cloud:\n    nacos:\n      server-addr: localhost:80 # nacos地址\n\n\n\n# 2.6.优化\n\n * 实际部署时，需要给做反向代理的nginx服务器设置一个域名，这样后续如果有服务器迁移nacos的客户端也无需更改配置.\n\n * nacos的各个节点应该部署到多个不同服务器，做好容灾和隔离\n\n总结：\n\n",charsets:{cjk:!0},lastUpdated:"2024/05/02, 13:47:32",lastUpdatedTimestamp:1714657652e3},{title:"OpenFeign远程调用",frontmatter:{title:"OpenFeign远程调用",date:"2024-05-02T21:35:32.000Z",author:"ethandu",permalink:"/pages/00990d/"},regularPath:"/07.%E5%85%AB%E8%82%A1%E6%96%87/01.%E5%BE%AE%E6%9C%8D%E5%8A%A1/05.OpenFeign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8.html",relativePath:"07.八股文/01.微服务/05.OpenFeign远程调用.md",key:"v-dca86fba",path:"/pages/00990d/",headers:[{level:2,title:"Feign的介绍",slug:"feign的介绍",normalizedTitle:"feign的介绍",charIndex:45},{level:2,title:"自定义Feign的配置",slug:"自定义feign的配置",normalizedTitle:"自定义feign的配置",charIndex:219},{level:2,title:"Feign的性能优化",slug:"feign的性能优化",normalizedTitle:"feign的性能优化",charIndex:372},{level:3,title:"连接池配置",slug:"连接池配置",normalizedTitle:"连接池配置",charIndex:389},{level:2,title:"Feign的最佳实践（踩坑后的比较好的实现方式）",slug:"feign的最佳实践-踩坑后的比较好的实现方式",normalizedTitle:"feign的最佳实践（踩坑后的比较好的实现方式）",charIndex:426},{level:2,title:"抽取FeignClient",slug:"抽取feignclient",normalizedTitle:"抽取feignclient",charIndex:1001}],headersStr:"Feign的介绍 自定义Feign的配置 Feign的性能优化 连接池配置 Feign的最佳实践（踩坑后的比较好的实现方式） 抽取FeignClient",content:"# http客户端Feigin\n\nRestTemplate方式调用存在的问题\n\n\n\n\n# Feign的介绍\n\n\n\n定义和使用Feign客户端\n\n\n\n这个里面的注解甚至用的是springmvc里面的注解\n\n\n\nFeign是声明式http客户端 上面这段代码将http请求所需要的所有东西feign通过声明客户端的方式弄好了\n\nFeign非常强大 里面已经包含了负载均衡功能了(核心依赖里面已经集成了Ribbon)\n\n\n\n总结：\n\n\n\n\n# 自定义Feign的配置\n\n\n\n失败重试：可能是服务宕机或网络原因 Ribbon就不会等了 它会做重试去试试另一个服务能不能访问\n\n配置Feign日志的两种方式:\n\n * 方式一：配置文件方式\n\n\n\n\n\n * 配置Feign日志的方式二：java代码方式，需要先声明一个Bean：\n\n\n\n总结：\n\n\n\n\n# Feign的性能优化\n\n\n\n\n# 连接池配置\n\n\n\n真实情况需要根据压测结果进行调节\n\n总结：\n\n\n\n\n# Feign的最佳实践（踩坑后的比较好的实现方式）\n\n * 方式一（继承）：给消费者的FeignClient和提供者的controller定义统一的父接口作为标准\n\n原来：\n\n\n\n这里的userservice的接口和orderservice里面的Feign客户端写的接口实际上是一样的\n\n\n\n现在：（给两个地方定义统一的标准约束了两边怎么去做）\n\n\n\n==但是官方并不推荐去共享接口在服务端和客户端之间，因为会造成紧耦合 两个服务在API上都一样了 并且这里在springmvc中是不会生效的 因为方法参数（@PathVarible）是继承不下来的==\n\n\n\n\n\n * 方式二（抽取）：将FeignClient抽取为独立模块，并且把接口有关的POJO，默认的Feign配置都放到这个模块中，提供给所有消费者使用\n\n思考一个问题 随着服务的增多我们这个userclient也是（要用的话）每次都写这样也是重复开发了\n\n\n\n这里我们用一个feign的api 在这个项目中把这个写好 把实体类也写好 配置也写好 ==服务要用直接引依赖就好了依赖有了就直接调就好了== 这个是一个统一的抽取的方式\n\n\n\n但是它也有一个问题例如orderservice里面我只需要用里面的其中一个方法 但是我们把所有的都引进来了\n\n所以没有完美的解决方案\n\n总结：\n\n\n\n\n# 抽取FeignClient\n\n\n\n引入依赖\n\n\n\n将UserClient DefaultFeignConfiguration User实体类都放进去\n\n将OrderService中先前里面有的User UserClient DefaultFeignConfiguration全部删掉（这里之前的依赖找不到了所以会报错）\n\n\n\n在orderservice中导入feign-api包将依赖替换成feign-api里面的东西\n\n\n\n现在除了这个开启客户端已经在OrderService里面没有关于Feign的东西了\n\n\n\n但是这里启动报错了 说这个UserClient无法被注入\n\n如果熟悉Spring应该知道编译没有报错证明类有 但是无法注入说明没有创建对象 也就是在spring容器中找不到它所以注入失败 UserClient这个接口之所以以前有对象是因为\n\n\n\n这个接口以前有这个注解 spring扫描到这个注解就会给这个接口创建对象 现在没有扫描到包了 我们的orderservice默认的扫描包是启动类在的包 和feign-api里面的UserClient显然不在一个包 扫不到的 所以spring容器中没有这个bean这就无法注入了 （把orderservice扫描包改掉是显然不合适的）\n\n> 解决方案\n\n\n\n(更推荐第二种方案 只需要扫描需要的client 只加载需要的客户端)\n\n总结：\n\n",normalizedContent:"# http客户端feigin\n\nresttemplate方式调用存在的问题\n\n\n\n\n# feign的介绍\n\n\n\n定义和使用feign客户端\n\n\n\n这个里面的注解甚至用的是springmvc里面的注解\n\n\n\nfeign是声明式http客户端 上面这段代码将http请求所需要的所有东西feign通过声明客户端的方式弄好了\n\nfeign非常强大 里面已经包含了负载均衡功能了(核心依赖里面已经集成了ribbon)\n\n\n\n总结：\n\n\n\n\n# 自定义feign的配置\n\n\n\n失败重试：可能是服务宕机或网络原因 ribbon就不会等了 它会做重试去试试另一个服务能不能访问\n\n配置feign日志的两种方式:\n\n * 方式一：配置文件方式\n\n\n\n\n\n * 配置feign日志的方式二：java代码方式，需要先声明一个bean：\n\n\n\n总结：\n\n\n\n\n# feign的性能优化\n\n\n\n\n# 连接池配置\n\n\n\n真实情况需要根据压测结果进行调节\n\n总结：\n\n\n\n\n# feign的最佳实践（踩坑后的比较好的实现方式）\n\n * 方式一（继承）：给消费者的feignclient和提供者的controller定义统一的父接口作为标准\n\n原来：\n\n\n\n这里的userservice的接口和orderservice里面的feign客户端写的接口实际上是一样的\n\n\n\n现在：（给两个地方定义统一的标准约束了两边怎么去做）\n\n\n\n==但是官方并不推荐去共享接口在服务端和客户端之间，因为会造成紧耦合 两个服务在api上都一样了 并且这里在springmvc中是不会生效的 因为方法参数（@pathvarible）是继承不下来的==\n\n\n\n\n\n * 方式二（抽取）：将feignclient抽取为独立模块，并且把接口有关的pojo，默认的feign配置都放到这个模块中，提供给所有消费者使用\n\n思考一个问题 随着服务的增多我们这个userclient也是（要用的话）每次都写这样也是重复开发了\n\n\n\n这里我们用一个feign的api 在这个项目中把这个写好 把实体类也写好 配置也写好 ==服务要用直接引依赖就好了依赖有了就直接调就好了== 这个是一个统一的抽取的方式\n\n\n\n但是它也有一个问题例如orderservice里面我只需要用里面的其中一个方法 但是我们把所有的都引进来了\n\n所以没有完美的解决方案\n\n总结：\n\n\n\n\n# 抽取feignclient\n\n\n\n引入依赖\n\n\n\n将userclient defaultfeignconfiguration user实体类都放进去\n\n将orderservice中先前里面有的user userclient defaultfeignconfiguration全部删掉（这里之前的依赖找不到了所以会报错）\n\n\n\n在orderservice中导入feign-api包将依赖替换成feign-api里面的东西\n\n\n\n现在除了这个开启客户端已经在orderservice里面没有关于feign的东西了\n\n\n\n但是这里启动报错了 说这个userclient无法被注入\n\n如果熟悉spring应该知道编译没有报错证明类有 但是无法注入说明没有创建对象 也就是在spring容器中找不到它所以注入失败 userclient这个接口之所以以前有对象是因为\n\n\n\n这个接口以前有这个注解 spring扫描到这个注解就会给这个接口创建对象 现在没有扫描到包了 我们的orderservice默认的扫描包是启动类在的包 和feign-api里面的userclient显然不在一个包 扫不到的 所以spring容器中没有这个bean这就无法注入了 （把orderservice扫描包改掉是显然不合适的）\n\n> 解决方案\n\n\n\n(更推荐第二种方案 只需要扫描需要的client 只加载需要的客户端)\n\n总结：\n\n",charsets:{cjk:!0},lastUpdated:"2024/05/02, 13:47:32",lastUpdatedTimestamp:1714657652e3},{title:"Gateway统一网关",frontmatter:{title:"Gateway统一网关",date:"2024-05-02T21:35:32.000Z",author:"ethandu",permalink:"/pages/009d95/"},regularPath:"/07.%E5%85%AB%E8%82%A1%E6%96%87/01.%E5%BE%AE%E6%9C%8D%E5%8A%A1/06.Gateway%E7%BB%9F%E4%B8%80%E7%BD%91%E5%85%B3.html",relativePath:"07.八股文/01.微服务/06.Gateway统一网关.md",key:"v-0e74c264",path:"/pages/009d95/",headers:[{level:2,title:"为什么需要网关",slug:"为什么需要网关",normalizedTitle:"为什么需要网关",charIndex:19},{level:2,title:"搭建网关服务",slug:"搭建网关服务",normalizedTitle:"搭建网关服务",charIndex:158},{level:2,title:"路由断言工厂Route Predicate Factory",slug:"路由断言工厂route-predicate-factory",normalizedTitle:"路由断言工厂route predicate factory",charIndex:376},{level:2,title:"路由过滤器 GatewayFilter",slug:"路由过滤器-gatewayfilter",normalizedTitle:"路由过滤器 gatewayfilter",charIndex:497},{level:2,title:"全局过滤器 GlobalFilter",slug:"全局过滤器-globalfilter",normalizedTitle:"全局过滤器 globalfilter",charIndex:761},{level:2,title:"过滤器执行顺序",slug:"过滤器执行顺序",normalizedTitle:"过滤器执行顺序",charIndex:905},{level:2,title:"跨域问题处理",slug:"跨域问题处理",normalizedTitle:"跨域问题处理",charIndex:987}],headersStr:"为什么需要网关 搭建网关服务 路由断言工厂Route Predicate Factory 路由过滤器 GatewayFilter 全局过滤器 GlobalFilter 过滤器执行顺序 跨域问题处理",content:"# 统一网关 Gateway\n\n\n# 为什么需要网关\n\n服务内部有相互访问的话Feign进行调用 但是外部的请求就没有安全措施了 不是所有业务都是对外公开的 我们得对用户的身份进行验证 否则拦截\n\n\n\n这里网关就出现了并且带着这些功能来了\n\n\n\n网关技术实现(目前来说都会使用gateway来进行网关)\n\n\n\n\n# 搭建网关服务\n\n搭建网关服务的步骤：\n\n\n\n网关自己也是服务 需要被nacos发现\n\n2.编写路由配置及nacos地址\n\n\n\nlb:loadBalance缩写\n\n当前含义： 我要把请求路由到用户服务（userservice）\n\n需要一个路由规则（和nginx很像）predicates:(判断请求是否符合路由规则)\n\n\n\n\n\n用nginx请求会到服务上，要在服务做鉴权，网关可以先鉴权拦截，不会给服务造成太大压力\n\n总结：\n\n\n\n\n# 路由断言工厂Route Predicate Factory\n\n\n\n\n\n\n\n\n\n这里的路由规则是要求在2031年之后才可以访问, 访问的话就会报404\n\n使用Before的话就可以访问到了\n\n这个路由工厂的规则按照需求使用不用强记\n\n\n\n\n# 路由过滤器 GatewayFilter\n\n\n\n这里响应结果的返回过程也是可以被网关做操作再返回给用户的，例如：把响应头拿出来，把响应体弄一弄之类\n\n\n\n（要点：根据名字来了解过滤器工厂的功能）\n\n\n\n验证 在这个方法中添加一个参数 加上这个注解@RequestHeader 这样spring就能帮助我们获得这个请求头的这个参数，加required可以应对没有传过来的情况\n\n\n\n我们如果要在所有的微服务都实现这个功能(配置在某个路由下只对那个服务有效 配置在default过滤器下 对所有的服务有效)\n\n\n\n总结：\n\n\n\n\n# 全局过滤器 GlobalFilter\n\n\n\n\n\n(未登录的状态码是401 返回状态码为了用户体验)\n\n\n\n实现这个过滤器在上面加两个注解\n\n\n\n@Order(-1)将过滤器的位置或者说执行顺序确定\n\n或者不用这个注解 实现Ordered接口 继承它的getOrder()方法 一样可以实现过滤器执行顺序的指定\n\n\n\n测试：\n\n\n\n\n\n当然实际开发的登录拦截不会说逻辑这么简单\n\n\n\n总结：\n\n\n\n\n# 过滤器执行顺序\n\n\n\n\n\n\n\n总结：\n\n\n\n\n# 跨域问题处理\n\n所有的请求都是先经过网关再到微服务 所以跨域请求不是在每个服务处理 只需要在网关里面处理就好了\n\n\n\nCORS： 浏览器问下服务器能不能走这个跨域请求\n\n\n\n我们的ajax采用的是CORS方案 这个方案有一次询问 这个询问也是会被网关拦截的 加上 add-to-simple-url-handler-mapping: true可以解决询问被拦截的问题\n\n加上有效期maxAge的设置可以让询问不要每次都执行给服务器增加压力\n\n测试：\n\n\n\n\n\n将网关的跨域配置加上以后重启服务\n\n\n\n总结：\n\n\n\n我们现在已经学了微服务最常用的组件了",normalizedContent:"# 统一网关 gateway\n\n\n# 为什么需要网关\n\n服务内部有相互访问的话feign进行调用 但是外部的请求就没有安全措施了 不是所有业务都是对外公开的 我们得对用户的身份进行验证 否则拦截\n\n\n\n这里网关就出现了并且带着这些功能来了\n\n\n\n网关技术实现(目前来说都会使用gateway来进行网关)\n\n\n\n\n# 搭建网关服务\n\n搭建网关服务的步骤：\n\n\n\n网关自己也是服务 需要被nacos发现\n\n2.编写路由配置及nacos地址\n\n\n\nlb:loadbalance缩写\n\n当前含义： 我要把请求路由到用户服务（userservice）\n\n需要一个路由规则（和nginx很像）predicates:(判断请求是否符合路由规则)\n\n\n\n\n\n用nginx请求会到服务上，要在服务做鉴权，网关可以先鉴权拦截，不会给服务造成太大压力\n\n总结：\n\n\n\n\n# 路由断言工厂route predicate factory\n\n\n\n\n\n\n\n\n\n这里的路由规则是要求在2031年之后才可以访问, 访问的话就会报404\n\n使用before的话就可以访问到了\n\n这个路由工厂的规则按照需求使用不用强记\n\n\n\n\n# 路由过滤器 gatewayfilter\n\n\n\n这里响应结果的返回过程也是可以被网关做操作再返回给用户的，例如：把响应头拿出来，把响应体弄一弄之类\n\n\n\n（要点：根据名字来了解过滤器工厂的功能）\n\n\n\n验证 在这个方法中添加一个参数 加上这个注解@requestheader 这样spring就能帮助我们获得这个请求头的这个参数，加required可以应对没有传过来的情况\n\n\n\n我们如果要在所有的微服务都实现这个功能(配置在某个路由下只对那个服务有效 配置在default过滤器下 对所有的服务有效)\n\n\n\n总结：\n\n\n\n\n# 全局过滤器 globalfilter\n\n\n\n\n\n(未登录的状态码是401 返回状态码为了用户体验)\n\n\n\n实现这个过滤器在上面加两个注解\n\n\n\n@order(-1)将过滤器的位置或者说执行顺序确定\n\n或者不用这个注解 实现ordered接口 继承它的getorder()方法 一样可以实现过滤器执行顺序的指定\n\n\n\n测试：\n\n\n\n\n\n当然实际开发的登录拦截不会说逻辑这么简单\n\n\n\n总结：\n\n\n\n\n# 过滤器执行顺序\n\n\n\n\n\n\n\n总结：\n\n\n\n\n# 跨域问题处理\n\n所有的请求都是先经过网关再到微服务 所以跨域请求不是在每个服务处理 只需要在网关里面处理就好了\n\n\n\ncors： 浏览器问下服务器能不能走这个跨域请求\n\n\n\n我们的ajax采用的是cors方案 这个方案有一次询问 这个询问也是会被网关拦截的 加上 add-to-simple-url-handler-mapping: true可以解决询问被拦截的问题\n\n加上有效期maxage的设置可以让询问不要每次都执行给服务器增加压力\n\n测试：\n\n\n\n\n\n将网关的跨域配置加上以后重启服务\n\n\n\n总结：\n\n\n\n我们现在已经学了微服务最常用的组件了",charsets:{cjk:!0},lastUpdated:"2024/05/02, 13:47:32",lastUpdatedTimestamp:1714657652e3},{title:"Docker",frontmatter:{title:"Docker",date:"2024-05-02T21:35:32.000Z",author:"ethandu",permalink:"/pages/947d80/"},regularPath:"/07.%E5%85%AB%E8%82%A1%E6%96%87/01.%E5%BE%AE%E6%9C%8D%E5%8A%A1/07.Docker.html",relativePath:"07.八股文/01.微服务/07.Docker.md",key:"v-1182c21f",path:"/pages/947d80/",headers:[{level:2,title:"Docker与虚拟机",slug:"docker与虚拟机",normalizedTitle:"docker与虚拟机",charIndex:34},{level:2,title:"镜像和容器",slug:"镜像和容器",normalizedTitle:"镜像和容器",charIndex:356},{level:2,title:"Docker和DockerHub",slug:"docker和dockerhub",normalizedTitle:"docker和dockerhub",charIndex:368},{level:2,title:"Docker架构",slug:"docker架构",normalizedTitle:"docker架构",charIndex:391},{level:2,title:"Docker镜像操作练习",slug:"docker镜像操作练习",normalizedTitle:"docker镜像操作练习",charIndex:413},{level:2,title:"Docker基本操作-容器",slug:"docker基本操作-容器",normalizedTitle:"docker基本操作-容器",charIndex:543},{level:2,title:"数据卷",slug:"数据卷",normalizedTitle:"数据卷",charIndex:631},{level:3,title:"操作数据卷",slug:"操作数据卷",normalizedTitle:"操作数据卷",charIndex:826},{level:3,title:"挂载数据卷",slug:"挂载数据卷",normalizedTitle:"挂载数据卷",charIndex:909},{level:3,title:"宿主机目录直接挂载到容器",slug:"宿主机目录直接挂载到容器",normalizedTitle:"宿主机目录直接挂载到容器",charIndex:1066},{level:2,title:"Dockerfile自定义镜像",slug:"dockerfile自定义镜像",normalizedTitle:"dockerfile自定义镜像",charIndex:1326},{level:3,title:"镜像结构",slug:"镜像结构",normalizedTitle:"镜像结构",charIndex:1367},{level:2,title:"自定义镜像",slug:"自定义镜像",normalizedTitle:"自定义镜像",charIndex:1336},{level:3,title:"什么是Dockerfile",slug:"什么是dockerfile",normalizedTitle:"什么是dockerfile",charIndex:1446}],headersStr:"Docker与虚拟机 镜像和容器 Docker和DockerHub Docker架构 Docker镜像操作练习 Docker基本操作-容器 数据卷 操作数据卷 挂载数据卷 宿主机目录直接挂载到容器 Dockerfile自定义镜像 镜像结构 自定义镜像 什么是Dockerfile",content:'# Docker\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n总结：\n\n\n\n\n# Docker与虚拟机\n\nDocker把应用所需要的依赖，函数库甚至操作系统函数库都\n\n一并打包，当应用运行时可以直接调用本地的函数库和内核（也就是linux操作系统内核）交互，那样就不用管是什么系统应用了，这样就形成了跨系统的运行了。\n\n虚拟机：使用Hypervisor技术模拟出一个计算机的各种硬件，在模拟的计算机上安装各种操作系统，然后安装各种应用。当应用执行时，它会以为自己在一台真的电脑上，它会先调用内置的操作系统，然后操作系统和Hypervisor进行交互，然后再把信息传递给外部的操作系统，然后外部操作系统在去操作真实硬件。这样子性能和docker比是会差一点的（docker是直接调用操作系统内核的）。\n\n\n\n总结：\n\n\n\n\n# 镜像和容器\n\n\n\n\n# Docker和DockerHub\n\n\n\n\n# Docker架构\n\n\n\n总结：\n\n\n\n\n# Docker镜像操作练习\n\n\n\n\n\n\n\n\n\n将镜像保存: docker save -o redis.tar redis:latest(-o 代表输出)\n\n\n\n\n\n希望将这个镜像加载回来 先删除这个镜像\n\n\n\n\n\n用tar包加载回来\n\n\n\n\n\n又回来了\n\n\n# Docker基本操作-容器\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n一步到位 docker exec -it mr redis-cli (进入一个容器执行一个命令)\n\n\n\n\n# 数据卷\n\n\n\n我们利用docker创建了一个新的数据卷html那么docker一定会在这个指定的目录下创建一个真实目录 然后每一个数据卷都和真实目录进行映射\n\n\n\n容器在创建的时候可以使用数据卷\n\n这里通过Volumes可以实现容器中的数据和宿主机中真实位置的文件双向绑定\n\n\n\n\n\n假如容器删了 但是只要挂载的数据卷没删以后的新容器也挂载在这个数据卷上的话以前的数据就还是能用的\n\n\n# 操作数据卷\n\n\n\n案例：\n\n\n\n\n\n\n\n\n\n特别要注意的是Mountpoint(挂载点)\n\n\n\n删除数据卷\n\n\n\n\n\n\n\n指定删除\n\n\n\n\n\n\n\n总结:\n\n\n\n\n# 挂载数据卷\n\n\n\n\n\n\n\n\n\n\n\n这个时候我们想知道它挂载的目录在哪里\n\n\n\n\n\n这说明已经挂载在宿主机的这个位置上了\n\n修改index.html\n\n\n\n\n\n这样子的话我们就可以在高级编辑器里面修改了\n\n\n\n\n\n\n\n这说明启动指定数据卷的时候 不存在数据卷的时候docker也会自动创建\n\n\n\n总结：\n\n\n\n\n# 宿主机目录直接挂载到容器\n\n\n\n\n\n\n\nmkdir(-p多级创建目录)\n\n\n\n\n\n到这所有的准备工作都完成了\n\n到官网上查看一下运行容器的命令（-e是环境变量）\n\n\n\n这里官网的还差了端口和数据卷的挂载我们对它进行改造\n\n-p(容器内端口：宿主机端口) -d（后台运行）--name(容器名指定)\n\n\n\n这里我们查看官方文档再继续编辑\n\n\n\n\n\n\n\n\n\n\n\n\n\n> 数据卷挂载方式对比\n\n宿主机目录挂载优势我自己创建的所以定位很方便 但是需要自己管理\n\n容器内目录挂载优势是自动化 但是不容易定位\n\n总结：\n\n\n\n\n# Dockerfile自定义镜像\n\n我们以后写的微服务代码需要自己制作镜像\n\n\n# 镜像结构\n\n * 镜像是将应用程序及其需要的系统函数库 环境 配置 依赖打包而成。\n\n我们拿mysql镜像举例\n\n\n\n总结：\n\n\n\n\n# 自定义镜像\n\n\n# 什么是Dockerfile\n\n\n\n\n\n\n\n将课前资料上传到虚拟机里面\n\n\n\n这里我们使用dockerfile创建这个镜像\n\n-t(意思是tag) 后面的空格+"."意思是告诉Dockerfile在哪里 因为这里的Dockerfile和当前目录是同级的所以我们直接用一个"."来告知位置\n\n\n\n这里它就是在逐步的执行我们的指令了\n\n\n\n\n\n\n\n到这里就完成了\n\n但是我们发现上面这么多的部分实际上都是在安装jdk 构建我们自己的项目的步骤就下面一点点 那么我们是不是可以在一个用上面步骤创建的镜像的基础上使用dockerfile创建自己的镜像呢\n\n\n\n\n\n这里我们基于java:8-alpine来写dockerfile 这下就非常简单了\n\n\n\n\n\n\n\n总结：\n\n',normalizedContent:'# docker\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n总结：\n\n\n\n\n# docker与虚拟机\n\ndocker把应用所需要的依赖，函数库甚至操作系统函数库都\n\n一并打包，当应用运行时可以直接调用本地的函数库和内核（也就是linux操作系统内核）交互，那样就不用管是什么系统应用了，这样就形成了跨系统的运行了。\n\n虚拟机：使用hypervisor技术模拟出一个计算机的各种硬件，在模拟的计算机上安装各种操作系统，然后安装各种应用。当应用执行时，它会以为自己在一台真的电脑上，它会先调用内置的操作系统，然后操作系统和hypervisor进行交互，然后再把信息传递给外部的操作系统，然后外部操作系统在去操作真实硬件。这样子性能和docker比是会差一点的（docker是直接调用操作系统内核的）。\n\n\n\n总结：\n\n\n\n\n# 镜像和容器\n\n\n\n\n# docker和dockerhub\n\n\n\n\n# docker架构\n\n\n\n总结：\n\n\n\n\n# docker镜像操作练习\n\n\n\n\n\n\n\n\n\n将镜像保存: docker save -o redis.tar redis:latest(-o 代表输出)\n\n\n\n\n\n希望将这个镜像加载回来 先删除这个镜像\n\n\n\n\n\n用tar包加载回来\n\n\n\n\n\n又回来了\n\n\n# docker基本操作-容器\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n一步到位 docker exec -it mr redis-cli (进入一个容器执行一个命令)\n\n\n\n\n# 数据卷\n\n\n\n我们利用docker创建了一个新的数据卷html那么docker一定会在这个指定的目录下创建一个真实目录 然后每一个数据卷都和真实目录进行映射\n\n\n\n容器在创建的时候可以使用数据卷\n\n这里通过volumes可以实现容器中的数据和宿主机中真实位置的文件双向绑定\n\n\n\n\n\n假如容器删了 但是只要挂载的数据卷没删以后的新容器也挂载在这个数据卷上的话以前的数据就还是能用的\n\n\n# 操作数据卷\n\n\n\n案例：\n\n\n\n\n\n\n\n\n\n特别要注意的是mountpoint(挂载点)\n\n\n\n删除数据卷\n\n\n\n\n\n\n\n指定删除\n\n\n\n\n\n\n\n总结:\n\n\n\n\n# 挂载数据卷\n\n\n\n\n\n\n\n\n\n\n\n这个时候我们想知道它挂载的目录在哪里\n\n\n\n\n\n这说明已经挂载在宿主机的这个位置上了\n\n修改index.html\n\n\n\n\n\n这样子的话我们就可以在高级编辑器里面修改了\n\n\n\n\n\n\n\n这说明启动指定数据卷的时候 不存在数据卷的时候docker也会自动创建\n\n\n\n总结：\n\n\n\n\n# 宿主机目录直接挂载到容器\n\n\n\n\n\n\n\nmkdir(-p多级创建目录)\n\n\n\n\n\n到这所有的准备工作都完成了\n\n到官网上查看一下运行容器的命令（-e是环境变量）\n\n\n\n这里官网的还差了端口和数据卷的挂载我们对它进行改造\n\n-p(容器内端口：宿主机端口) -d（后台运行）--name(容器名指定)\n\n\n\n这里我们查看官方文档再继续编辑\n\n\n\n\n\n\n\n\n\n\n\n\n\n> 数据卷挂载方式对比\n\n宿主机目录挂载优势我自己创建的所以定位很方便 但是需要自己管理\n\n容器内目录挂载优势是自动化 但是不容易定位\n\n总结：\n\n\n\n\n# dockerfile自定义镜像\n\n我们以后写的微服务代码需要自己制作镜像\n\n\n# 镜像结构\n\n * 镜像是将应用程序及其需要的系统函数库 环境 配置 依赖打包而成。\n\n我们拿mysql镜像举例\n\n\n\n总结：\n\n\n\n\n# 自定义镜像\n\n\n# 什么是dockerfile\n\n\n\n\n\n\n\n将课前资料上传到虚拟机里面\n\n\n\n这里我们使用dockerfile创建这个镜像\n\n-t(意思是tag) 后面的空格+"."意思是告诉dockerfile在哪里 因为这里的dockerfile和当前目录是同级的所以我们直接用一个"."来告知位置\n\n\n\n这里它就是在逐步的执行我们的指令了\n\n\n\n\n\n\n\n到这里就完成了\n\n但是我们发现上面这么多的部分实际上都是在安装jdk 构建我们自己的项目的步骤就下面一点点 那么我们是不是可以在一个用上面步骤创建的镜像的基础上使用dockerfile创建自己的镜像呢\n\n\n\n\n\n这里我们基于java:8-alpine来写dockerfile 这下就非常简单了\n\n\n\n\n\n\n\n总结：\n\n',charsets:{cjk:!0},lastUpdated:"2024/05/02, 13:47:32",lastUpdatedTimestamp:1714657652e3},{title:"DockerCompose",frontmatter:{title:"DockerCompose",date:"2024-05-02T21:35:32.000Z",author:"ethandu",permalink:"/pages/s87jds/"},regularPath:"/07.%E5%85%AB%E8%82%A1%E6%96%87/01.%E5%BE%AE%E6%9C%8D%E5%8A%A1/08.DockerCompose.html",relativePath:"07.八股文/01.微服务/08.DockerCompose.md",key:"v-3e2df355",path:"/pages/s87jds/",headers:[{level:2,title:"什么是DockerCompose",slug:"什么是dockercompose",normalizedTitle:"什么是dockercompose",charIndex:82},{level:2,title:"安装DockerCompose",slug:"安装dockercompose",normalizedTitle:"安装dockercompose",charIndex:154},{level:3,title:"修改文件权限",slug:"修改文件权限",normalizedTitle:"修改文件权限",charIndex:215},{level:3,title:"Base自动补全命令",slug:"base自动补全命令",normalizedTitle:"base自动补全命令",charIndex:297},{level:2,title:"DockerCompose-部署微服务",slug:"dockercompose-部署微服务",normalizedTitle:"dockercompose-部署微服务",charIndex:827},{level:2,title:"Docker镜像仓库",slug:"docker镜像仓库",normalizedTitle:"docker镜像仓库",charIndex:1131},{level:3,title:"常见镜像仓库服务",slug:"常见镜像仓库服务",normalizedTitle:"常见镜像仓库服务",charIndex:1155},{level:3,title:"私有镜像仓库",slug:"私有镜像仓库",normalizedTitle:"私有镜像仓库",charIndex:1170},{level:4,title:"简化版镜像仓库",slug:"简化版镜像仓库",normalizedTitle:"简化版镜像仓库",charIndex:1261},{level:4,title:"带有图形化界面版本",slug:"带有图形化界面版本",normalizedTitle:"带有图形化界面版本",charIndex:1611},{level:4,title:"配置Docker信任地址",slug:"配置docker信任地址",normalizedTitle:"配置docker信任地址",charIndex:1984},{level:4,title:"在私有镜像仓库推送或拉取镜像",slug:"在私有镜像仓库推送或拉取镜像",normalizedTitle:"在私有镜像仓库推送或拉取镜像",charIndex:2222}],headersStr:"什么是DockerCompose 安装DockerCompose 修改文件权限 Base自动补全命令 DockerCompose-部署微服务 Docker镜像仓库 常见镜像仓库服务 私有镜像仓库 简化版镜像仓库 带有图形化界面版本 配置Docker信任地址 在私有镜像仓库推送或拉取镜像",content:'# DockerCompose\n\n实际生产环境下微服务成百上千个我们一个个构建实在太慢了 我们必须有一个集群构建的方式这里就是DockerCompose了\n\n\n# 什么是DockerCompose\n\n\n\n实际上就是把docker run里面的参数都转换成compose里面的语法来实现了\n\n\n\n\n\n\n\n\n# 安装DockerCompose\n\n将docker-compose文件上传到/usr/local/bin/目录\n\n\n\n\n# 修改文件权限\n\n\n\n\n\n上面没有x的文件是没有执行权的 现在的docker-compose拥有了执行权\n\nFinal Shell里面更加直观直接变绿了\n\n\n\n\n# Base自动补全命令\n\n# 补全命令\ncurl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose > /etc/bash_completion.d/docker-compose\n\n\n如果这里出现错误，需要修改自己的hosts文件：\n\necho "199.232.68.133 raw.githubusercontent.com" >> /etc/hosts\n\n\n\n\n这里用老师的方案不行 删掉之前在/etc/hosts里面的修改然后使用官网的方法\n\nhttps://docs.docker.com/compose/completion/\n\n# 使用官网的命令安装\nsudo curl \\\n    -L https://raw.githubusercontent.com/docker/compose/1.29.2/contrib/completion/bash/docker-compose \\\n    -o /etc/bash_completion.d/docker-compose\n\n\n\n\n总结:\n\n\n\n\n# DockerCompose-部署微服务\n\n\n\n\n\n但是我们这里的jar包都没有 需要我们把这些jar放到这里的同级目录里面\n\n\n\n我们希望的是把数据卷给挂载到提前写好的/mysql/data和/mysql/conf下的\n\n$PWD的写法意思是在当前目录下开始找（这样防止切换环境文件就找不到了）\n\n再后面这些由于它们的dockerfile都在对应的目录里面所以build就这样告知就好了\n\n\n\n\n\n使用dockercompose部署时我们直接使用服务名就可以访问了（将localhost之类的服务改名成服务名）\n\n打包最后的项目名称\n\n\n\n\n\n然后将app.jar全部导到对应的子目录中\n\n\n\n\n\n\n\n\n# Docker镜像仓库\n\n管理镜像的地方\n\n\n# 常见镜像仓库服务\n\n\n\n\n# 私有镜像仓库\n\n搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现。\n\n官网地址：https://hub.docker.com/_/registry\n\n# 简化版镜像仓库\n\nDocker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。\n\n搭建方式比较简单，命令如下：\n\ndocker run -d \\\n    --restart=always \\\n    --name registry\t\\\n    -p 5000:5000 \\\n    -v registry-data:/var/lib/registry \\\n    registry\n\n\n命令中挂载了一个数据卷registry-data到容器内的/var/lib/registry 目录，这是私有镜像库存放数据的目录。\n\n访问http://YourIp:5000/v2/_catalog 可以查看当前私有镜像服务中包含的镜像\n\n# 带有图形化界面版本\n\n使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：\n\nversion: \'3.0\'\nservices:\n  registry:\n    image: registry\n    volumes:\n      - ./registry-data:/var/lib/registry\n  ui:\n    image: joxit/docker-registry-ui:static\n    ports:\n      - 8080:80\n    environment:\n      - REGISTRY_TITLE=传智教育私有仓库\n      - REGISTRY_URL=http://registry:5000\n    depends_on:\n      - registry\n\n\n# 配置Docker信任地址\n\n我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：\n\n# 打开要修改的文件\nvi /etc/docker/daemon.json\n# 添加内容：\n"insecure-registries":["http://192.168.150.101:8080"]# 改成自己的ip\n# 重加载\nsystemctl daemon-reload\n# 重启docker\nsystemctl restart docker\n\n\n\n\n\n\n# 在私有镜像仓库推送或拉取镜像\n\n\n\n要想推送私有镜像一定要重命名\n\n\n\n\n\n\n\n总结：\n\n',normalizedContent:'# dockercompose\n\n实际生产环境下微服务成百上千个我们一个个构建实在太慢了 我们必须有一个集群构建的方式这里就是dockercompose了\n\n\n# 什么是dockercompose\n\n\n\n实际上就是把docker run里面的参数都转换成compose里面的语法来实现了\n\n\n\n\n\n\n\n\n# 安装dockercompose\n\n将docker-compose文件上传到/usr/local/bin/目录\n\n\n\n\n# 修改文件权限\n\n\n\n\n\n上面没有x的文件是没有执行权的 现在的docker-compose拥有了执行权\n\nfinal shell里面更加直观直接变绿了\n\n\n\n\n# base自动补全命令\n\n# 补全命令\ncurl -l https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose > /etc/bash_completion.d/docker-compose\n\n\n如果这里出现错误，需要修改自己的hosts文件：\n\necho "199.232.68.133 raw.githubusercontent.com" >> /etc/hosts\n\n\n\n\n这里用老师的方案不行 删掉之前在/etc/hosts里面的修改然后使用官网的方法\n\nhttps://docs.docker.com/compose/completion/\n\n# 使用官网的命令安装\nsudo curl \\\n    -l https://raw.githubusercontent.com/docker/compose/1.29.2/contrib/completion/bash/docker-compose \\\n    -o /etc/bash_completion.d/docker-compose\n\n\n\n\n总结:\n\n\n\n\n# dockercompose-部署微服务\n\n\n\n\n\n但是我们这里的jar包都没有 需要我们把这些jar放到这里的同级目录里面\n\n\n\n我们希望的是把数据卷给挂载到提前写好的/mysql/data和/mysql/conf下的\n\n$pwd的写法意思是在当前目录下开始找（这样防止切换环境文件就找不到了）\n\n再后面这些由于它们的dockerfile都在对应的目录里面所以build就这样告知就好了\n\n\n\n\n\n使用dockercompose部署时我们直接使用服务名就可以访问了（将localhost之类的服务改名成服务名）\n\n打包最后的项目名称\n\n\n\n\n\n然后将app.jar全部导到对应的子目录中\n\n\n\n\n\n\n\n\n# docker镜像仓库\n\n管理镜像的地方\n\n\n# 常见镜像仓库服务\n\n\n\n\n# 私有镜像仓库\n\n搭建镜像仓库可以基于docker官方提供的dockerregistry来实现。\n\n官网地址：https://hub.docker.com/_/registry\n\n# 简化版镜像仓库\n\ndocker官方的docker registry是一个基础版本的docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。\n\n搭建方式比较简单，命令如下：\n\ndocker run -d \\\n    --restart=always \\\n    --name registry\t\\\n    -p 5000:5000 \\\n    -v registry-data:/var/lib/registry \\\n    registry\n\n\n命令中挂载了一个数据卷registry-data到容器内的/var/lib/registry 目录，这是私有镜像库存放数据的目录。\n\n访问http://yourip:5000/v2/_catalog 可以查看当前私有镜像服务中包含的镜像\n\n# 带有图形化界面版本\n\n使用dockercompose部署带有图象界面的dockerregistry，命令如下：\n\nversion: \'3.0\'\nservices:\n  registry:\n    image: registry\n    volumes:\n      - ./registry-data:/var/lib/registry\n  ui:\n    image: joxit/docker-registry-ui:static\n    ports:\n      - 8080:80\n    environment:\n      - registry_title=传智教育私有仓库\n      - registry_url=http://registry:5000\n    depends_on:\n      - registry\n\n\n# 配置docker信任地址\n\n我们的私服采用的是http协议，默认不被docker信任，所以需要做一个配置：\n\n# 打开要修改的文件\nvi /etc/docker/daemon.json\n# 添加内容：\n"insecure-registries":["http://192.168.150.101:8080"]# 改成自己的ip\n# 重加载\nsystemctl daemon-reload\n# 重启docker\nsystemctl restart docker\n\n\n\n\n\n\n# 在私有镜像仓库推送或拉取镜像\n\n\n\n要想推送私有镜像一定要重命名\n\n\n\n\n\n\n\n总结：\n\n',charsets:{cjk:!0},lastUpdated:"2024/05/02, 13:47:32",lastUpdatedTimestamp:1714657652e3},{title:"RabbitMQ",frontmatter:{title:"RabbitMQ",date:"2024-04-27T16:28:57.000Z",author:"ethandu",permalink:"/pages/940163/"},regularPath:"/07.%E5%85%AB%E8%82%A1%E6%96%87/01.%E5%BE%AE%E6%9C%8D%E5%8A%A1/09.RabbitMQ.html",relativePath:"07.八股文/01.微服务/09.RabbitMQ.md",key:"v-d3e353c2",path:"/pages/940163/",headers:[{level:2,title:"同步通讯和异步通讯",slug:"同步通讯和异步通讯",normalizedTitle:"同步通讯和异步通讯",charIndex:11},{level:3,title:"同步调用的问题",slug:"同步调用的问题",normalizedTitle:"同步调用的问题",charIndex:27},{level:3,title:"异步调用方案",slug:"异步调用方案",normalizedTitle:"异步调用方案",charIndex:165},{level:3,title:"我的理解",slug:"我的理解",normalizedTitle:"我的理解",charIndex:350},{level:2,title:"什么是MQ",slug:"什么是mq",normalizedTitle:"什么是mq",charIndex:549},{level:2,title:"RabbitMQ概述",slug:"rabbitmq概述",normalizedTitle:"rabbitmq概述",charIndex:561},{level:2,title:"常见消息模型",slug:"常见消息模型",normalizedTitle:"常见消息模型",charIndex:647},{level:2,title:"SpringAMQP(大大简化api)",slug:"springamqp-大大简化api",normalizedTitle:"springamqp(大大简化api)",charIndex:1091},{level:2,title:"WorkQueue 工作队列(模型)",slug:"workqueue-工作队列-模型",normalizedTitle:"workqueue 工作队列(模型)",charIndex:1344},{level:2,title:"发布订阅模型介绍",slug:"发布订阅模型介绍",normalizedTitle:"发布订阅模型介绍",charIndex:3192},{level:3,title:"发布订阅-Fanout Exchange",slug:"发布订阅-fanout-exchange",normalizedTitle:"发布订阅-fanout exchange",charIndex:3592},{level:3,title:"发布订阅-DirectExchange",slug:"发布订阅-directexchange",normalizedTitle:"发布订阅-directexchange",charIndex:3921},{level:3,title:"发布订阅-TopicExchange",slug:"发布订阅-topicexchange",normalizedTitle:"发布订阅-topicexchange",charIndex:4667},{level:2,title:"消息转换器",slug:"消息转换器",normalizedTitle:"消息转换器",charIndex:5087}],headersStr:"同步通讯和异步通讯 同步调用的问题 异步调用方案 我的理解 什么是MQ RabbitMQ概述 常见消息模型 SpringAMQP(大大简化api) WorkQueue 工作队列(模型) 发布订阅模型介绍 发布订阅-Fanout Exchange 发布订阅-DirectExchange 发布订阅-TopicExchange 消息转换器",content:'# 初识MQ\n\n\n# 同步通讯和异步通讯\n\n\n\n\n# 同步调用的问题\n\n\n\n\n\n每加一次需求代码都需要修改\n\n再加上是同步调用 用户必须等待订单服务完成才能执行仓储服务执行完才能执行短信服务 总耗时500ms很恐怖 性能太差\n\n在整个过程中有很多资源的浪费 要是卡住在仓储服务支付服务就渐渐被耗尽了\n\n\n\n\n\n总结：\n\n\n\n\n# 异步调用方案\n\n\n\n优势一：服务解耦\n\n现在加需求就不需要再修改支付服务里面的代码 例如添加了优惠卷服务 因为我们呢现在支付服务不负责调用服务了 而是发消息 那么后面添加服务就只需要订阅事件就好了\n\n解除服务的话我们也就取消订阅就ok了\n\n优势二：性能提升，吞吐量提高\n\n\n\n优势三：服务没有强依赖，不担心级联失败问题\n\n\n\n优势四：流量消峰\n\n\n\n总结：\n\n\n\n\n# 我的理解\n\n传统的微服务调用用的是openFeign之类的通信手段，这个实际上在不对代码做处理的时候是同步的。\n\n但是我们的消息队列是可以声明“监听器”，监听到消息队列中有消息就执行业务逻辑的。这个实际上就是一种响应式的架构。不需要我们主动的去通信等待另一个微服务执行完毕，而是发个消息给消息队列，而微服务自己监听到消息就执行逻辑。\n\n这种响应式的架构实际上就是异步的，非阻塞的。快速的。\n\n\n# 什么是MQ\n\n\n\n\n# RabbitMQ概述\n\n\n\n\n\n一般来说我创建一个用户他有自己的虚拟主机 然后我再创建一个用户他还是有一个虚拟主机 虚拟主机之间是相互隔离的互不干扰\n\n总结：\n\n\n\n\n# 常见消息模型\n\n\n\n\n\n\n\n要向mq发送消息必须要和它先建立连接 用到连接工厂\n\n\n\n这边有itcast的虚拟主机的访问权\n\n\n\n创建通道\n\n\n\n\n\n有了通道可以向队列里面发送消息了\n\n那么我们需要的是创建一个队列\n\n\n\n\n\n生产者向队列里面发送消息\n\n\n\n\n\n\n\n这个时候我们的发送者已经任务结束了 连接都断开了， 这样就解除耦合了 变成异步了\n\n\n\n接收消息的是Consumer\n\n同样的是先创建连接\n\n\n\n创建通道 创建队列(这里创建的原因是因为 我们的生产者和消费者启动的顺序是不确定的 万一消费者先启动找不到队列 )\n\n\n\n然后就是接收消息了 里面的匿名内部类的对象的方法是我们的处理操作(handleDelivery) 我们把这个行为给挂在了队列上 一旦有消息它就会进行操作处理 最后一个参数byte[] body就是消息体\n\n\n\n这是一个异步的机制，这行代码（接收到消息）在等待接收消息后面打印 该处理消息处理消息 我还是继续去执行我后面的业务去了\n\n\n\n总结\n\n\n\n\n# SpringAMQP(大大简化api)\n\n大大的简化我们的api\n\n\n\nAMQP: 是消息队列的规范\n\nSpringAMQP：是Spring对AMQP的实现（就像是redis里面spring提供的模板）\n\n官网讲的特征：\n\n\n\nSpringAMQP实现HelloWorld种的基础消息队列功能\n\n流程如下:\n\n\n\n\n\n\n\n总结\n\n\n\n子啊Consumer中编写消费逻辑，监听simple.queue 接收的是String类型的消息 将来都是Spring帮助我们完成任务 十分的优雅\n\n\n\n总结\n\n\n\n\n# WorkQueue 工作队列(模型)\n\n\n\n队列后面跟了两个消费者，消息将来给谁？\n\nrabbitmq中消息是阅后即焚\n\n消息一旦让消费者1消费了消费者2就肯定是拿不到了。\n\n两个消费者实际上是合作关系，共同处理。\n\n假设只有一个消费者，它的处理速度是：40条消息/s，但是发布者却每s发布了50条。这个就暂时是搞不定了，每s有10条消息多出来没人处理，就只能堆积在队列当中，队列在内存中是有存储上限的，这样下去一定会把队列给堆满，这样再有消息就进不去了。如果进不去，消息就会被丢弃，这样就出问题了。两个消费者，每s都处理40条消息的话之前的情况就是可以轻松应对了。\n\n所以WorkQueue实际上就还是普通的消息队列，只是挂了两个消费者。可以提高消息处理速度，避免队列消息堆积。\n\n\n\n\n\n消费者1消费的快，消费者2消费的慢，就少消费一点，毕竟能者多劳，但是我们现在是平均分布。这个并不是我们想要的。\n\n这个就是我们的消息预取机制。什么叫做消息预取？当我们大量的消息到达队列的时候队列会将消息进行投递，consumer1和consumer2的通道（channel）会把消息先拿过来，这个叫做消息预取。管他能不能处理，先拿过来再说，\n\n\n\n这下就两边各自处理了50条消息了，于是两个人就平均分配了所有的消息，每个人25条，但是消费者1处理的快，很快搞定了，消费者2处理的慢，就花了很长时间才搞定\n\n消费预取限制：\n\n\n\n我们这里就是预取1条消息，消费完成以后再去拿，不至于一下预取一大堆结果处理不完。\n\n\n\n这个就起到了一个能者多劳的效果了。\n\n最后我们做一个总结：\n\n\n\n这个模式可以提高整个队列的速度。\n\n这里我们发现在代码中创建队列或者交换机之类的也是非常简单(包括这些绑定交换机到队列之类的操作，都是可以在一个config类中解决的，只要将amqp包中的对象给注册到SpringIOC容器中就好了)\n\n\n@Configuration\npublic class FanoutConfig {\n    // itcast.fanout\n    @Bean\n    public FanoutExchange fanoutExchange(){\n        return new FanoutExchange("itcast.fanout");\n    }\n\n    // fanout.queue1\n    @Bean\n    public Queue fanoutQueue1(){\n        return new Queue("fanout.queue1");\n    }\n\n    // 绑定队列1到交换机\n    @Bean\n    public Binding fanoutBinding1(Queue fanoutQueue1, FanoutExchange fanoutExchange){\n        return BindingBuilder\n                .bind(fanoutQueue1)\n                .to(fanoutExchange);\n    }\n\n    // fanout.queue2\n    @Bean\n    public Queue fanoutQueue2(){\n        return new Queue("fanout.queue2");\n    }\n\n    // 绑定队列2到交换机\n    @Bean\n    public Binding fanoutBinding2(Queue fanoutQueue2, FanoutExchange fanoutExchange){\n        return BindingBuilder\n                .bind(fanoutQueue2)\n                .to(fanoutExchange);\n    }\n\n    @Bean\n    public Queue objectQueue(){\n        return new Queue("object.queue");\n    }\n\n    @Bean\n    public Queue simpleQueue(){\n        return new Queue("simple.queue");\n    }\n\n}\n\n\n\n\n\n# 发布订阅模型介绍\n\n刚才我们的消息都是阅后即焚的（一旦消费完就会从队列中删除），这个就无法达到给多个消费者消费了。\n\n这个就无法满足我们课程开始时提出的需求：当用户支付完成了，你得去通知订单服务，仓储服务，短信服务。让这些服务各自去完成自己的业务。\n\n现在的消息要被3个服务都收到。\n\n那么就需要用到发布订阅模型了。实现方式实际上就是加上了一个交换机（exchange）。这个模型和计算机网络实际上是一样的。\n\n\n\n这个模型我们不关心消费者怎么绑定。我们关心的是消息如何从发布者到达队列。\n\n消息发布到交换机，然后交换机将消息转发到队列当中。消息发布者不需要知道投递到队列的细节，这些都是交换机决定的，交换机转发消息给多个队列，这个就实现了我们的一份消息多个消费者消费的需求了！\n\n到底交换机是发送给一个还是多个呢？\n\n\n\nexchange只负责转发，不管消息是否丢失，只有队列是存消息的。\n\n\n# 发布订阅-Fanout Exchange\n\n\n\n\n\nSpringAMQP提供了声明交换机，队列，绑定关系的API，例如：\n\n\n\n\n\n连绑定都是需要声明的，利用BindingBuilder这个提供给我们的工厂。（绑定它（队列）到它（交换机））\n\n\n\n这里我们是通过声明Bean的方式去写的。\n\n将来它读取到这些Bean以后就会帮我们，向rabbitmq去声明队列，交换机，绑定关系。全部都由Spring帮我们去做。\n\n\n\n\n\n交换机点到这个里面来，看到这个bindings\n\n\n\n\n\n队列就已经绑定上了。\n\n\n\n这里以前是发送到队列，现在是发送到交换机。\n\n\n\n然后发送消息，两个队列都收到了，这个就是fanout exchange\n\n\n\n总结：\n\n\n\n\n# 发布订阅-DirectExchange\n\n\n\n会将消息根据路由规则路由到指定的Queue\n\n这个也就被称为路由模式（routes）\n\n\n\n我们现在两个队列都有自己的bindingkey了，将来发布者发送消息的时候也要指定一个RoutingKey\n\n这个时候Exchange将消息路由到队列的时候要比对bindingkey了。\n\n\n\n这里要是我们发送的消息是bindingkey是red的话就和我们之前的fanoutexchange一样了，就都是广播了。\n\n所以我们可以用DirectExchange来模拟FanoutExchange，它比FanoutExchange更加灵活。这种灵活性也是有代价的，不要忘了在消息中加上bindingkey。\n\n这里我们不再使用Bean的方式来声明，毕竟需要声明这么多东西。\n\n\n\n接下来就是基于@RabbitListener注解来声明这些组件。\n\n之前我们写的所有消费者当中都有这个注解。但是这个注解上可以同时完成队列和交换机的声明。不用再创建Bean了。\n\n（消费者实际上才是在代码中指定组件逻辑的，发布者只需要知道往哪个交换机or队列中发送消息就ok了）\n\n\n\n这里我们原来在主键中写的是queues=...\n\n而这里我们是写bindings=@QueueBinding(...)\n\n\n\n这样我们就完成了绑定的声明了，并且还声明了bindingkeys。\n\n\n\n同样的代码copy一份来声明queue2到交换机的绑定。key为red,yellow\n\n这里多了一个exchange叫做itcast.direct，然后进去看到queue1绑定了什么，queue2绑定了什么key。\n\n\n\n接着是消息发送的方法。\n\n\n\n这下就blue就收到了。\n\n\n\n\n# 发布订阅-TopicExchange\n\n\n\n这个模式和DirectExchange很像，但是routingkey必须是多个单词的列表，并且用.分割\n\n\n\n左下角我们看到这个routingkey的逻辑实际上和话题的非常像\n\n那么我们去订阅的话，比如我想关系下新闻，中国的，日本的，那么我们得绑定两个key（在Direct中）。\n\n而在TopicExchange中我们支持通配符\n\n\n\n\n\n于是我们只要写china.#就可以收到所有的中国相关的话题。而我们写#.news就可以收到所有和新闻相关的话题。\n\n这个实际上就是简化了bindingkey的写法，原来用多个key的，现在只需要用一个key就可以了。\n\n\n\n这下就写完成了\n\n\n\nitcast.exchange\n\n\n\n这里我们就可以测试这里的服务了。\n\n\n\n这个变化也没有很大\n\n总结：\n\n这个bindingkey可以支持通配符。然后routingkey需要用.来分割单词列表。\n\n\n# 消息转换器\n\n我们在使用rabbitTemplate的时候消息这边接收的类一直是Object，这个说明我们可以发送任意的对象。\n\n先在config里面声明一个队列\n\n\n\n然后我们测试发送一个对象\n\n@Test\n    public void testSendObjectQueue(){\n        Map<String,Object> msg=new HashMap<>();\n        msg.put("name","pixel-revolve");\n        msg.put("age",20);\n\n        rabbitTemplate.convertAndSend("object.queue",msg);\n\n    }\n\n\n去到rabbitmq里面，我们看到消息，还有消息类型是java序列化类型。\n\n\n\n它只支持字节。这种原生的序列化方式并不是那么好，性能差，安全性有问题，数据长度太长了，消息体越大，传输的效率也就越慢，而且还占用额外的内存空间。所以我们非常不推荐这种方式。\n\nSpring的消息对象处理使用MessageConverter来处理的。\n\n\n\n我们使用jackson的方式来实现是比较喜欢的。\n\n同样的我们在consumer中引入jackson的依赖，并且定义一样的MessageConverter\n\n\n\n这里我们就接收到了，这个方式就是比较方便的\n\n\n\n总结：\n\n',normalizedContent:'# 初识mq\n\n\n# 同步通讯和异步通讯\n\n\n\n\n# 同步调用的问题\n\n\n\n\n\n每加一次需求代码都需要修改\n\n再加上是同步调用 用户必须等待订单服务完成才能执行仓储服务执行完才能执行短信服务 总耗时500ms很恐怖 性能太差\n\n在整个过程中有很多资源的浪费 要是卡住在仓储服务支付服务就渐渐被耗尽了\n\n\n\n\n\n总结：\n\n\n\n\n# 异步调用方案\n\n\n\n优势一：服务解耦\n\n现在加需求就不需要再修改支付服务里面的代码 例如添加了优惠卷服务 因为我们呢现在支付服务不负责调用服务了 而是发消息 那么后面添加服务就只需要订阅事件就好了\n\n解除服务的话我们也就取消订阅就ok了\n\n优势二：性能提升，吞吐量提高\n\n\n\n优势三：服务没有强依赖，不担心级联失败问题\n\n\n\n优势四：流量消峰\n\n\n\n总结：\n\n\n\n\n# 我的理解\n\n传统的微服务调用用的是openfeign之类的通信手段，这个实际上在不对代码做处理的时候是同步的。\n\n但是我们的消息队列是可以声明“监听器”，监听到消息队列中有消息就执行业务逻辑的。这个实际上就是一种响应式的架构。不需要我们主动的去通信等待另一个微服务执行完毕，而是发个消息给消息队列，而微服务自己监听到消息就执行逻辑。\n\n这种响应式的架构实际上就是异步的，非阻塞的。快速的。\n\n\n# 什么是mq\n\n\n\n\n# rabbitmq概述\n\n\n\n\n\n一般来说我创建一个用户他有自己的虚拟主机 然后我再创建一个用户他还是有一个虚拟主机 虚拟主机之间是相互隔离的互不干扰\n\n总结：\n\n\n\n\n# 常见消息模型\n\n\n\n\n\n\n\n要向mq发送消息必须要和它先建立连接 用到连接工厂\n\n\n\n这边有itcast的虚拟主机的访问权\n\n\n\n创建通道\n\n\n\n\n\n有了通道可以向队列里面发送消息了\n\n那么我们需要的是创建一个队列\n\n\n\n\n\n生产者向队列里面发送消息\n\n\n\n\n\n\n\n这个时候我们的发送者已经任务结束了 连接都断开了， 这样就解除耦合了 变成异步了\n\n\n\n接收消息的是consumer\n\n同样的是先创建连接\n\n\n\n创建通道 创建队列(这里创建的原因是因为 我们的生产者和消费者启动的顺序是不确定的 万一消费者先启动找不到队列 )\n\n\n\n然后就是接收消息了 里面的匿名内部类的对象的方法是我们的处理操作(handledelivery) 我们把这个行为给挂在了队列上 一旦有消息它就会进行操作处理 最后一个参数byte[] body就是消息体\n\n\n\n这是一个异步的机制，这行代码（接收到消息）在等待接收消息后面打印 该处理消息处理消息 我还是继续去执行我后面的业务去了\n\n\n\n总结\n\n\n\n\n# springamqp(大大简化api)\n\n大大的简化我们的api\n\n\n\namqp: 是消息队列的规范\n\nspringamqp：是spring对amqp的实现（就像是redis里面spring提供的模板）\n\n官网讲的特征：\n\n\n\nspringamqp实现helloworld种的基础消息队列功能\n\n流程如下:\n\n\n\n\n\n\n\n总结\n\n\n\n子啊consumer中编写消费逻辑，监听simple.queue 接收的是string类型的消息 将来都是spring帮助我们完成任务 十分的优雅\n\n\n\n总结\n\n\n\n\n# workqueue 工作队列(模型)\n\n\n\n队列后面跟了两个消费者，消息将来给谁？\n\nrabbitmq中消息是阅后即焚\n\n消息一旦让消费者1消费了消费者2就肯定是拿不到了。\n\n两个消费者实际上是合作关系，共同处理。\n\n假设只有一个消费者，它的处理速度是：40条消息/s，但是发布者却每s发布了50条。这个就暂时是搞不定了，每s有10条消息多出来没人处理，就只能堆积在队列当中，队列在内存中是有存储上限的，这样下去一定会把队列给堆满，这样再有消息就进不去了。如果进不去，消息就会被丢弃，这样就出问题了。两个消费者，每s都处理40条消息的话之前的情况就是可以轻松应对了。\n\n所以workqueue实际上就还是普通的消息队列，只是挂了两个消费者。可以提高消息处理速度，避免队列消息堆积。\n\n\n\n\n\n消费者1消费的快，消费者2消费的慢，就少消费一点，毕竟能者多劳，但是我们现在是平均分布。这个并不是我们想要的。\n\n这个就是我们的消息预取机制。什么叫做消息预取？当我们大量的消息到达队列的时候队列会将消息进行投递，consumer1和consumer2的通道（channel）会把消息先拿过来，这个叫做消息预取。管他能不能处理，先拿过来再说，\n\n\n\n这下就两边各自处理了50条消息了，于是两个人就平均分配了所有的消息，每个人25条，但是消费者1处理的快，很快搞定了，消费者2处理的慢，就花了很长时间才搞定\n\n消费预取限制：\n\n\n\n我们这里就是预取1条消息，消费完成以后再去拿，不至于一下预取一大堆结果处理不完。\n\n\n\n这个就起到了一个能者多劳的效果了。\n\n最后我们做一个总结：\n\n\n\n这个模式可以提高整个队列的速度。\n\n这里我们发现在代码中创建队列或者交换机之类的也是非常简单(包括这些绑定交换机到队列之类的操作，都是可以在一个config类中解决的，只要将amqp包中的对象给注册到springioc容器中就好了)\n\n\n@configuration\npublic class fanoutconfig {\n    // itcast.fanout\n    @bean\n    public fanoutexchange fanoutexchange(){\n        return new fanoutexchange("itcast.fanout");\n    }\n\n    // fanout.queue1\n    @bean\n    public queue fanoutqueue1(){\n        return new queue("fanout.queue1");\n    }\n\n    // 绑定队列1到交换机\n    @bean\n    public binding fanoutbinding1(queue fanoutqueue1, fanoutexchange fanoutexchange){\n        return bindingbuilder\n                .bind(fanoutqueue1)\n                .to(fanoutexchange);\n    }\n\n    // fanout.queue2\n    @bean\n    public queue fanoutqueue2(){\n        return new queue("fanout.queue2");\n    }\n\n    // 绑定队列2到交换机\n    @bean\n    public binding fanoutbinding2(queue fanoutqueue2, fanoutexchange fanoutexchange){\n        return bindingbuilder\n                .bind(fanoutqueue2)\n                .to(fanoutexchange);\n    }\n\n    @bean\n    public queue objectqueue(){\n        return new queue("object.queue");\n    }\n\n    @bean\n    public queue simplequeue(){\n        return new queue("simple.queue");\n    }\n\n}\n\n\n\n\n\n# 发布订阅模型介绍\n\n刚才我们的消息都是阅后即焚的（一旦消费完就会从队列中删除），这个就无法达到给多个消费者消费了。\n\n这个就无法满足我们课程开始时提出的需求：当用户支付完成了，你得去通知订单服务，仓储服务，短信服务。让这些服务各自去完成自己的业务。\n\n现在的消息要被3个服务都收到。\n\n那么就需要用到发布订阅模型了。实现方式实际上就是加上了一个交换机（exchange）。这个模型和计算机网络实际上是一样的。\n\n\n\n这个模型我们不关心消费者怎么绑定。我们关心的是消息如何从发布者到达队列。\n\n消息发布到交换机，然后交换机将消息转发到队列当中。消息发布者不需要知道投递到队列的细节，这些都是交换机决定的，交换机转发消息给多个队列，这个就实现了我们的一份消息多个消费者消费的需求了！\n\n到底交换机是发送给一个还是多个呢？\n\n\n\nexchange只负责转发，不管消息是否丢失，只有队列是存消息的。\n\n\n# 发布订阅-fanout exchange\n\n\n\n\n\nspringamqp提供了声明交换机，队列，绑定关系的api，例如：\n\n\n\n\n\n连绑定都是需要声明的，利用bindingbuilder这个提供给我们的工厂。（绑定它（队列）到它（交换机））\n\n\n\n这里我们是通过声明bean的方式去写的。\n\n将来它读取到这些bean以后就会帮我们，向rabbitmq去声明队列，交换机，绑定关系。全部都由spring帮我们去做。\n\n\n\n\n\n交换机点到这个里面来，看到这个bindings\n\n\n\n\n\n队列就已经绑定上了。\n\n\n\n这里以前是发送到队列，现在是发送到交换机。\n\n\n\n然后发送消息，两个队列都收到了，这个就是fanout exchange\n\n\n\n总结：\n\n\n\n\n# 发布订阅-directexchange\n\n\n\n会将消息根据路由规则路由到指定的queue\n\n这个也就被称为路由模式（routes）\n\n\n\n我们现在两个队列都有自己的bindingkey了，将来发布者发送消息的时候也要指定一个routingkey\n\n这个时候exchange将消息路由到队列的时候要比对bindingkey了。\n\n\n\n这里要是我们发送的消息是bindingkey是red的话就和我们之前的fanoutexchange一样了，就都是广播了。\n\n所以我们可以用directexchange来模拟fanoutexchange，它比fanoutexchange更加灵活。这种灵活性也是有代价的，不要忘了在消息中加上bindingkey。\n\n这里我们不再使用bean的方式来声明，毕竟需要声明这么多东西。\n\n\n\n接下来就是基于@rabbitlistener注解来声明这些组件。\n\n之前我们写的所有消费者当中都有这个注解。但是这个注解上可以同时完成队列和交换机的声明。不用再创建bean了。\n\n（消费者实际上才是在代码中指定组件逻辑的，发布者只需要知道往哪个交换机or队列中发送消息就ok了）\n\n\n\n这里我们原来在主键中写的是queues=...\n\n而这里我们是写bindings=@queuebinding(...)\n\n\n\n这样我们就完成了绑定的声明了，并且还声明了bindingkeys。\n\n\n\n同样的代码copy一份来声明queue2到交换机的绑定。key为red,yellow\n\n这里多了一个exchange叫做itcast.direct，然后进去看到queue1绑定了什么，queue2绑定了什么key。\n\n\n\n接着是消息发送的方法。\n\n\n\n这下就blue就收到了。\n\n\n\n\n# 发布订阅-topicexchange\n\n\n\n这个模式和directexchange很像，但是routingkey必须是多个单词的列表，并且用.分割\n\n\n\n左下角我们看到这个routingkey的逻辑实际上和话题的非常像\n\n那么我们去订阅的话，比如我想关系下新闻，中国的，日本的，那么我们得绑定两个key（在direct中）。\n\n而在topicexchange中我们支持通配符\n\n\n\n\n\n于是我们只要写china.#就可以收到所有的中国相关的话题。而我们写#.news就可以收到所有和新闻相关的话题。\n\n这个实际上就是简化了bindingkey的写法，原来用多个key的，现在只需要用一个key就可以了。\n\n\n\n这下就写完成了\n\n\n\nitcast.exchange\n\n\n\n这里我们就可以测试这里的服务了。\n\n\n\n这个变化也没有很大\n\n总结：\n\n这个bindingkey可以支持通配符。然后routingkey需要用.来分割单词列表。\n\n\n# 消息转换器\n\n我们在使用rabbittemplate的时候消息这边接收的类一直是object，这个说明我们可以发送任意的对象。\n\n先在config里面声明一个队列\n\n\n\n然后我们测试发送一个对象\n\n@test\n    public void testsendobjectqueue(){\n        map<string,object> msg=new hashmap<>();\n        msg.put("name","pixel-revolve");\n        msg.put("age",20);\n\n        rabbittemplate.convertandsend("object.queue",msg);\n\n    }\n\n\n去到rabbitmq里面，我们看到消息，还有消息类型是java序列化类型。\n\n\n\n它只支持字节。这种原生的序列化方式并不是那么好，性能差，安全性有问题，数据长度太长了，消息体越大，传输的效率也就越慢，而且还占用额外的内存空间。所以我们非常不推荐这种方式。\n\nspring的消息对象处理使用messageconverter来处理的。\n\n\n\n我们使用jackson的方式来实现是比较喜欢的。\n\n同样的我们在consumer中引入jackson的依赖，并且定义一样的messageconverter\n\n\n\n这里我们就接收到了，这个方式就是比较方便的\n\n\n\n总结：\n\n',charsets:{cjk:!0},lastUpdated:"2024/05/02, 13:47:32",lastUpdatedTimestamp:1714657652e3},{title:"Sentinel微服务保护",frontmatter:{title:"Sentinel微服务保护",date:"2024-04-27T16:28:57.000Z",author:"ethandu",permalink:"/pages/384910/"},regularPath:"/07.%E5%85%AB%E8%82%A1%E6%96%87/01.%E5%BE%AE%E6%9C%8D%E5%8A%A1/10.Sentinel%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4.html",relativePath:"07.八股文/01.微服务/10.Sentinel微服务保护.md",key:"v-257d5e0b",path:"/pages/384910/",headers:[{level:2,title:"初识Sentinel",slug:"初识sentinel",normalizedTitle:"初识sentinel",charIndex:12},{level:3,title:"雪崩问题",slug:"雪崩问题",normalizedTitle:"雪崩问题",charIndex:27},{level:4,title:"什么是雪崩问题",slug:"什么是雪崩问题",normalizedTitle:"什么是雪崩问题",charIndex:35},{level:4,title:"解决雪崩问题",slug:"解决雪崩问题",normalizedTitle:"解决雪崩问题",charIndex:89},{level:3,title:"服务保护技术对比",slug:"服务保护技术对比",normalizedTitle:"服务保护技术对比",charIndex:346},{level:3,title:"安装Sentinel控制台",slug:"安装sentinel控制台",normalizedTitle:"安装sentinel控制台",charIndex:430},{level:3,title:"整合Sentinel和微服务",slug:"整合sentinel和微服务",normalizedTitle:"整合sentinel和微服务",charIndex:702},{level:2,title:"限流规则",slug:"限流规则",normalizedTitle:"限流规则",charIndex:1221},{level:3,title:"流控模式",slug:"流控模式",normalizedTitle:"流控模式",charIndex:1705},{level:3,title:"流控效果",slug:"流控效果",normalizedTitle:"流控效果",charIndex:3400},{level:3,title:"热点参数限流",slug:"热点参数限流",normalizedTitle:"热点参数限流",charIndex:4454},{level:2,title:"隔离和降级",slug:"隔离和降级",normalizedTitle:"隔离和降级",charIndex:5131},{level:3,title:"Feign整合Sentinel",slug:"feign整合sentinel",normalizedTitle:"feign整合sentinel",charIndex:5243},{level:3,title:"线程隔离",slug:"线程隔离",normalizedTitle:"线程隔离",charIndex:201},{level:3,title:"熔断降级",slug:"熔断降级",normalizedTitle:"熔断降级",charIndex:211},{level:3,title:"授权规则",slug:"授权规则",normalizedTitle:"授权规则",charIndex:7762},{level:3,title:"自定义异常结果",slug:"自定义异常结果",normalizedTitle:"自定义异常结果",charIndex:8140},{level:3,title:"规则持久化",slug:"规则持久化",normalizedTitle:"规则持久化",charIndex:8342}],headersStr:"初识Sentinel 雪崩问题 什么是雪崩问题 解决雪崩问题 服务保护技术对比 安装Sentinel控制台 整合Sentinel和微服务 限流规则 流控模式 流控效果 热点参数限流 隔离和降级 Feign整合Sentinel 线程隔离 熔断降级 授权规则 自定义异常结果 规则持久化",content:'# 微服务保护\n\n\n# 初识Sentinel\n\n\n# 雪崩问题\n\n# 什么是雪崩问题\n\n微服务之间互相调用，因为调用链中的一个服务故障，引起整个链路都无法访问的情况。\n\n\n\n# 解决雪崩问题\n\n解决雪崩问题的常见方式有四种：\n\n * 超时处理：设定超时时间，请求超过一定时间美誉相应就返回错误信息，不会无休止等待。\n\n * 舱壁模式：限定每个业务能使用的线程数，避免耗尽整个tomcat的资源，因此也叫线程隔离。\n\n * 熔断降级：由断路器统计业务执行的一场比例，如果超出阈值则会熔断该业务，拦截访问该业务的一切请求。\n\n * 流量控制：限制业务访问的QPS（每秒钟处理请求的数量）。避免服务因流量的徒增而故障。\n   \n   \n\n> 流量控制是预防雪崩，前面三种是已经出现问题了。\n\n\n# 服务保护技术对比\n\n\n\n> Hystrix现在不维护了\n\nSentinel是alibaba开源的一款微服务流量控制组件。\n\nSentinel具有以下特征：\n\n\n\n\n# 安装Sentinel控制台\n\n去下载最新的jar包。\n\nhttps://github.com/alibaba/Sentinel\n\n\n\n执行命令：\n\njava -jar sentinel-dashboard-1.8.5.jar\n\n\n然后访问：localhost:8080 即可看到控制台界面，默认账户密码都是sentinel。\n\n\n\n如果要修改Sentinel的默认端口，账户，密码 可以通过下列配置：\n\n\n\n举例：\n\njava -jar sentinel-dashboard-1.8.5.jar -Dserver.port=8090\n\n\n\n# 整合Sentinel和微服务\n\n> 引入cloud-demo，项目结构如下：\n\n\n\n> 微服务整合Sentinel\n\n我们在order-service中整合Sentinel，并且链接Sentinel的控制台，步骤如下：\n\n 1. 引入sentinel依赖：\n    \n    <dependency>\n    \t<groupId>com.alibaba.cloud</groupId>\n    \t<artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\n    </dependency>\n    \n\n 2. 配置控制台地址：\n    \n    spring:\n      cloud:\n        sentinel:\n          transport:\n            dashboard: localhost:8080\n    \n\n 3. 访问微服务的任意端点（endpoint，我们Spring MVC的任意一个Controller的接口都是一个端点），触发sentinel监控\n\n访问过一次接口之后再看我们的控制台，就出现结果了。\n\n\n\n\n# 限流规则\n\n> 首先我们需要知道一个概念：\n\n> 簇点链路\n\n簇点链路:就是项目内的调用链路，链路中被监控的每个接口就是一个资源。默认情况下sentinel会监控Spring MVC的每一个端点(Endpoint) ，因此Spring MVC的每一 个端 点(Endpoint)就是调用链路中的一个资源。\n\n流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则:\n\n\n\n如果我们点击资源/order/{orderId}后面的流控按钮，就可以弹出表单。表单中可以添加流控规则。\n\n\n\n其含义是限制/order/{orderId}这个资源的单机QPS为1，即每秒值允许1次请求，超出的请求会被拦截并报错。\n\n * > 案例\n   > \n   > 需求:给/order/{orderld}这个资源设置流控规则，QPS不能超过5。然后利用jemeter测试。\n   \n   \n   \n   创建完成规则后我们使用Jemeter进行测试\n   \n   \n   \n   接着看结果，限流的控制生效了！\n   \n   \n   \n   \n\n\n# 流控模式\n\n在添加限流规则时，点击高级选项，可以选择三种流控模式:\n\n * 直接:统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式\n * 关联:统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流\n * 链路:统计从指定链路访问到本资源的请求,触发阈值时,对指定链路限流\n\n\n\n * > 流控模式 - 关联\n   \n   * 关联模式:统计与当前资源相关的另一个资源，触发阈值时,对当前资源限流\n   * 使用场景:比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。 业务需求是有限支付和更新订单的业务，因此当修改订单业务触发阈值时,需要对查询订单业务限流。\n   \n   \n   \n   当/write资源访问量触发阈值时，就会对/read资源限流，避免影响/write资源。\n   \n   * > 案例\n     > \n     > 需求:\n     > \n     >  * 在OrderController新建 两个端点/order/query和/order/update, 无需实现业务\n     >  * 配置流控规则，当/order/ update资源被访问的QPS超过5时，对/order/ query请求限流\n     \n     \n     \n     我们对用Jemeter对/order/update进行QPS大于5的请求，查看结果：\n     \n     \n   \n   * > 什么时候使用关联模式？\n     \n     * 两个有竞争关系的资源\n     * 一个优先级高，一个优先级低\n\n * > 流控模式 - 链路\n   \n   链路模式:只针对从指定链路访问到本资源的请求做统计,判断是否超过阈值。 例如有两条请求链路:\n   \n   * /test1→/common\n   * /test2 →/common\n   \n   如果只希望统计从/test2进入到/common的请求，则可以这样配置:\n   \n   \n   \n   * > 案例\n     > \n     > 需求:有查询订单和创建订单业务,两者都需要查询商品。针对从查询订单进入到查询商品的请求统计,并设置限流。\n     \n     1. 在OrderService中添加一个queryGoods方法,不用实现业务\n     2. 在OrderController中 ，改造/order/query端点，调用OrderService中的queryGoods方法\n     3. 在OrderController中 添加一个/order/save的端 点，调用OrderService的queryGoods方法\n     4. 给queryGoods设 置限流规则，从/order/query进 入queryGoods的方法限制QPS必须小于2\n     \n     设定规则\n     \n     \n     \n     用Jemeter请求，我们的save不受任何影响。\n   \n   * > Sentinel默认只标记Controller中的方法为资源，如果要标记其他方法，需要利用@SentinelResource注解\n     \n     @SentinelResource("goods")\n     public void queryGoods(){\n     \tSystem.err.println("查询商品");\n     }\n     \n     \n     Sentinel默认会将Controller方法做context整合，导致链路模式的流控失效，需要修改application.yml，添加配置：\n     \n     spring:\n       cloud:\n         sentinel:\n           web-context-unify: false # 关闭context整合\n     \n     \n     这样之后即便是Service层也可以被监控了。\n\n\n# 流控效果\n\n流控效果是指请求达到流控阈值时应该采取的措施，包括三种:\n\n * 快速失败: 达到阈值后,新的请求会被立即拒绝并抛出FlowException异常。是默认的处理方式。\n * warm up:预热模式，对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化,从一个较小值逐渐增 加到最大阈值。\n * 排队等待:让所有的请求按照先后次序排队执行,两个请求的间隔不能小于指定时长\n\n\n\n * > 流控效果 - warm up\n   > \n   > 在服务刚启动的时候不能就把QPS给打满了\n   \n   warm up也叫预热模式，是应对服务冷启动的一种方案。请求阈值初始值是threshold / coldFactor,持续指定时长后,逐渐提高到threshold值。而coldFactor的默认值是3.\n   \n   例如，我设置QPS的threshold为10，预热时间为5秒,那么初始阈值就是10/3,也就是3,然后在5秒后逐渐增长到10.\n   \n   \n   \n   * > 案例\n     > \n     > 需求:给/order/{orderld}这个资源设置限流，最大QPS为10, 利用warm up效果,预热时长为5秒\n     \n     \n     \n     QPS是波动变化的\n     \n     \n     \n     \n\n * > 流控效果 - 排队等待\n   \n   当请求超过QPS阈值时，快速失败和warm up会拒绝新的请求并抛出异常。而排队等待则是让所有请求进入- -个队列中,然后按照阈值允许的时间间隔依次执行。后来的请求必须等待前面执行完成，如果请求预期的等待时间超出最大时长,则会被拒绝。 例如: QPS=5,意味着每200ms处理一个队列中的请求; timeout = 2000,意味着预期等待超过2000ms的请求会被拒绝并抛出异常\n   \n   \n   \n   \n   \n   * > 案例\n     > \n     > 流控效果 - 排队等待\n     > \n     > 需求:给/order/{orderld}这 个资源设置限流，最大QPS为10,利用排队的流控效果，超时时长设置为5s\n     \n     \n     \n     \n     \n     我们的发送QPS是15，然后多出来的都进入到队列里面去了。\n     \n     \n     \n     最终呈现出来的是非常平稳的QPS，形成了对微服务的保护。\n\n\n# 热点参数限流\n\n> 前面的都是常见的，这个是特殊的。\n\n之前的限流是统计访问某个资源的所有请求,判断是否超过QPS阈值。而热点参数限流是分别统计参数值相同的请求,判断是否超过QPS阈值。\n\n\n\n * > 配置示例：\n   \n   \n   \n   代表的含义是:对hot这个资源的0号参数(第一个参数)做统计,每1秒相同参数值的请求数不能超过5\n\n> 商品是有热点商品的，所以限流阈值不应该是一样的\n\n在热点参数限流的高级选项中，可以对部分参数设置例外配置：\n\n\n\n结合上一个配置,这里的含义是对0号的long类型参数限流,每1秒相同参数的QPS不能超过5,有两个例外:\n\n * 如果参数值是100,则每1秒允许的QPS为10\n\n * 如果参数值是101,则每1秒允许的QPS为15\n\n * > 案例\n   > \n   > 给/order/{orderld}这个资源添加热点参数限流，规则如下:\n   > \n   >  * 默认的热点参数规则是每1秒请求量不超过2\n   >  * 给102这 个参数设置例外:每1秒请求量不超过4\n   >  * 给103这个参数设置例外:每1秒请求量不超过10\n   \n   > 注意：\n   > \n   > 热点参数限流对默认的SpringMVC资源无效\n   \n   我们将它覆盖成Sentinel资源\n   \n   \n   \n   \n   \n   \n   \n   添加完规则，进行Jemeter测试\n   \n   \n   \n   ==不同的参数，限流的上限是不一样的。热点参数限流是一种更细粒度的限流==\n\n\n# 隔离和降级\n\n> \n\n虽然限流可以尽量避免因高并发而引起的服务故障,但服务还会因为其它原因而故障。而要将这些故障控制在一定范围，避免雪崩,就要靠线程隔离(舱壁模式)和熔断降级手段了。\n\n线程隔离：\n\n\n\n熔断：\n\n\n\n\n# Feign整合Sentinel\n\n> 不管是线程隔离还是熔断降级，都是对客户端（调用方）的保护\n> \n> 而调用方是Feign，于是实际上是对Feign的保护。\n\n * > Feign整合Sentinel\n   \n   SpringCloud中，微服务调用都是通过Feign来实现的，因此做客户端必须整合Feign和Sentinel\n   \n   首先的准备：\n   \n   1. 修改OrderService的application.yml文件，开启Feign的Sentinel功能\n      \n      feign:\n        sentinel:\n          enable: true # 开启Feign的Sentinel功能\n      \n   \n   2. 给FeignClient编写失败后的降级逻辑\n      \n      * 方式一：FallbackClass，无法对远程调用的异常做处理\n      * 方式二：FallbackFactory，可以对远程调用的异常做处理，我们选择这种\n   \n   步骤一：在feign-api项目中定义类，实现FallbackFactory:\n   \n   \n   \n   > create方法返回的就是UserClient对象，实现方法的过程中就是在编写备用的方案。记录日志，返回友好提示啊之类的。这个就是一个失败降级的业务逻辑了。\n   \n   步骤二:在feing- api项目中的DefaultFeignConfiguration类中将UserClientFallbackFactory注册为一个Bean:\n   \n   \n   \n   步骤三:在feing-api项目中的UserClient接口中使用UserClientFallbackFactory:\n   \n   \n   \n   最后我们访问一下接口，这下链路就出来了。其中出现了Feign的请求接口，这下，我们就完成了Feign和Sentinel的整合了。\n   \n   \n\n\n# 线程隔离\n\n> \n\n> 线程隔离有两种方式实现:\n\n * 线程池隔离\n   \n   * > 优点\n     \n     * 支持主动超时\n     * 支持异步调用\n   \n   * > 缺点\n     \n     * 线程的额外开销比较大\n   \n   * > 场景\n     \n     * 低扇出\n\n * 信号量隔离(Sentinel默认采用)\n\n * > 优点\n   \n   * 轻量级，无额外开销\n\n * > 缺点\n   \n   * 不支持主动超时\n   * 不支持异步调用\n\n * > 场景\n   \n   * 高频调用\n   * 高扇出（网关就是这样的场景）\n\n * > 线程池隔离（左），信号量隔离（右）\n\n\n\n * > Sentinel如何实现线程隔离？\n   \n   在添加限流规则时，可以选择两种阈值类型:\n   \n   \n   \n   * QPS: 就是每秒的请求数，在快速入门中已经演示过。\n   * 线程数：是改资源能够使用的tomcat线程数的最大值。也就是通过限制线程数量，实现舱壁模式。\n\n * > 案例：\n   > \n   > 需求:给UserClient的查询用户接口设置流控规则，线程数不能超过2。然后利用jemeter测试。\n   \n   \n   \n   \n   \n   \n   \n   前面的请求实际上都是正常的，后面多于2的请求就降级了。这个就实现了信号量的隔离。\n\n\n# 熔断降级\n\n> \n\n熔断降级是解决雪崩问题的重要手段。其思路是由断路器统计服务调用的异常比例、慢请求比例，如果超出阈值则会熔断该服务。即拦截访问该服务的一切请求;而当服务恢复时，断路器会放行访问该服务的请求。\n\n> 它是使用状态机来实现的。\n\n> Sentinel里面断路器的3个状态，以及切换的流程和作用\n\n\n\n> 熔断策略-慢调用\n\n断路器熔断策略有三种:慢调用、异常比例、异常数\n\n * 慢调用:业务的响应时长(RT)大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的 最小数量，慢调用比例大于设定的阈值，则触发熔断。例如:\n   \n   \n   \n   > 解读: RT超过500ms的调用是慢调用，统计最近10000ms内的请求,如果请求量超过10次，并且慢调用比例不低于0.5 则触发熔断，熔断时长为5秒。然后进入half-open状态,放行一次请求做测试。\n\n * > 案例：\n   > \n   > 需求:给UserClient的查询用户接口设置降级规则，慢调用的RT阈值为50ms,统计时间为1秒,最小请求数量为5,失败阈值比例为0.4,熔断时长为5 提示:为了触发慢调用规则，我们需要修改UserService中的业务,增加业务耗时:\n   \n   \n   \n   \n   \n   我们先刷5次/order/1，然后再看/order/2\n   \n   \n   \n   发现已经熔断了。这个就是慢比例熔断了。\n\n> 熔断策略-异常比例、异常数\n\n断路器熔断策略有三种:慢调用、异常比例或异常数\n\n * 异常比例或异常数:统计指定时间内的调用，如果调用次数超过指定请求数,并且出现异常的比例达到设定的比例阈 值(或超过指定异常数) ,则触发熔断。例如:\n   \n   \n   \n   > 解读:统计最近1000ms内的请求,如果请求量超过10次,并且异常比例不低于0.5,则触发熔断,熔断时长为5秒。然后进入half-open状态，放行一-次请 求做测试。\n\n * > 案例：\n   > \n   > 需求:给UserClient的查询用户接口设置降级规则，统计时间为1秒,最小请求数量为5,失败阈值比例为0.4,熔断时长为5s\n   > \n   > 提示:为了触发异常统计,我们需要修改UserService中的业务,抛出异常:\n   \n   \n   \n   \n   \n   我们刷了5次异常的102，再访问103。出发了异常比例降级。\n   \n   \n\n\n# 授权规则\n\n> 对请求者身份的判断\n\n授权规则可以对调用方的来源做控制，有白名单和黑名单两种方式。\n\n * 白名单:来源(origin)在白名单内的调用者允许访问\n\n * 黑名单:来源(origin) 在黑名单内的调用者不允许访问\n\n\n\n例如，我们只限定允许从网关来的请求访问order-service，那么流控应用中就填写网关的名称\n\n\n\nSentinel是通过RequestOriginParser这个接口的parseOrigin来获取请求的来源的。\n\n\n\n我们需要自己编写这个业务逻辑。\n\n例如，我们尝试从request中获取一个名为origin的请娘娘球头，作为origin的值：\n\n\n\n我们还需要在gateway服务中，利用网关的过滤器添加名为gateway的origin头：\n\n\n\n给/order/{orderId}配置授权规则：\n\n\n\n\n# 自定义异常结果\n\n> \n\n默认情况下，发生限流、降级、授权拦截时，都会抛出异常到调用方。如果要自定义异常时的返回结果，需要实现BlockExceptionHandler接口：\n\n\n\n而BlockException包含很多个子类，分别对应不同的场景:\n\n\n\n我们在order-service中定义类，实现BlockExceptionHandler接口：\n\n\n\n测试：\n\n\n\n可以看到被限流了：\n\n\n\n\n# 规则持久化\n\n> \n\n> 这章学习如何让Sentinel的规则持久化\n\nSentinel的控制台规则管理有三种模式：\n\n * 原始模式（不支持持久化）\n   \n   Sentinel的默认模式，将规则保存在内存，重启服务会丢失\n\n * pull模式(存在处理一致性问题)\n   \n   pull模式:控制台将配置的规则推送到Sentinel客户端，而客户端会将配置规则保存在本地文件或数据库中。以后会定时去本地文件或数据库中查询，更新本地规则。\n   \n   \n\n * push模式（我们最推荐的）\n   \n   push模式:控制台将配置规则推送到远程配置中心，例如Nacos。 Sentinel客 户端监听Nacos,获取配置变更的推送消息，完成本地配置更新。\n   \n   \n   \n   > 实现push模式\n   \n   push模式实现最为复杂，依赖于nacos, 并且需要修改Sentinel控制台源码。\n   \n   \n   \n   我们需要修改OrderService，让其监听Nacos中的sentinel规则配置。\n   \n   具体步骤如下：\n   \n   * 一、修改order-service服务\n     \n     1. 引入依赖\n        \n        在order-service中引入sentinel监听nacos的依赖：\n        \n        \n     \n     2. 配置nacos地址\n        \n        在order-service中的application.yml文件配置nacos地址及监听的配置信息:\n        \n        \n   \n   * 二、修改sentinel-dashboard源码\n     \n     SentinelDashboard默认不支持nacos的持久化，需要修改源码\n     \n     1. 解压并打开项目\n        \n        \n     \n     2. 修改nacos依赖\n        \n        在sentinel-dashboard源码的pom文件中，nacos的依赖默认的scope是test，只能在测试时使用，这里要去除：\n        \n        \n        \n        将sentinel-datasource-nacos依赖的scope去掉：\n        \n        \n     \n     3. 添加nacos支持\n        \n        在sentinel-dashboard的test包下，已经编写了对nacos的支持，我们需要将其拷贝到main下。\n        \n        \n     \n     4. 修改nacos地址\n        \n        然后，还需要修改测试代码中的NacosConfig类：\n        \n        \n        \n        修改其中的nacos地址，让其读取application.properties中的配置：\n        \n        \n        \n        在sentinel-dashboard的application.properties中添加nacos地址配置：\n        \n        nacos.addr=localhost:8848\n        \n     \n     5. 配置nacos数据源\n        \n        另外，还需要修改com.alibaba.csp.sentinel.dashboard.controller.v2包下的FlowControllerV2类。\n        \n        \n        \n        让我们添加的Nacos数据源生效：\n        \n        \n     \n     6. 修改前端页面\n        \n        接下来，还需要修改前端页面，添加一个支持nacos的菜单\n        \n        修改src/amin/webapp/resources/app/scripts/directives/sidebar/目录下的sidebar.html文件：\n        \n        \n        \n        将其中的这部分注释打开：\n        \n        \n        \n        修改其中的文本：\n        \n        \n     \n     7. 重新编译、打包项目\n        \n        运行IDEA中的maven插件，编译和打包修改好的Sentinel-Dashboard：\n        \n        \n        \n        在sentinel中新增限流规则：\n        \n        \n     \n     在nacos中寻找一下：\n     \n     \n     \n     重启发现已经实现了持久化。',normalizedContent:'# 微服务保护\n\n\n# 初识sentinel\n\n\n# 雪崩问题\n\n# 什么是雪崩问题\n\n微服务之间互相调用，因为调用链中的一个服务故障，引起整个链路都无法访问的情况。\n\n\n\n# 解决雪崩问题\n\n解决雪崩问题的常见方式有四种：\n\n * 超时处理：设定超时时间，请求超过一定时间美誉相应就返回错误信息，不会无休止等待。\n\n * 舱壁模式：限定每个业务能使用的线程数，避免耗尽整个tomcat的资源，因此也叫线程隔离。\n\n * 熔断降级：由断路器统计业务执行的一场比例，如果超出阈值则会熔断该业务，拦截访问该业务的一切请求。\n\n * 流量控制：限制业务访问的qps（每秒钟处理请求的数量）。避免服务因流量的徒增而故障。\n   \n   \n\n> 流量控制是预防雪崩，前面三种是已经出现问题了。\n\n\n# 服务保护技术对比\n\n\n\n> hystrix现在不维护了\n\nsentinel是alibaba开源的一款微服务流量控制组件。\n\nsentinel具有以下特征：\n\n\n\n\n# 安装sentinel控制台\n\n去下载最新的jar包。\n\nhttps://github.com/alibaba/sentinel\n\n\n\n执行命令：\n\njava -jar sentinel-dashboard-1.8.5.jar\n\n\n然后访问：localhost:8080 即可看到控制台界面，默认账户密码都是sentinel。\n\n\n\n如果要修改sentinel的默认端口，账户，密码 可以通过下列配置：\n\n\n\n举例：\n\njava -jar sentinel-dashboard-1.8.5.jar -dserver.port=8090\n\n\n\n# 整合sentinel和微服务\n\n> 引入cloud-demo，项目结构如下：\n\n\n\n> 微服务整合sentinel\n\n我们在order-service中整合sentinel，并且链接sentinel的控制台，步骤如下：\n\n 1. 引入sentinel依赖：\n    \n    <dependency>\n    \t<groupid>com.alibaba.cloud</groupid>\n    \t<artifactid>spring-cloud-starter-alibaba-sentinel</artifactid>\n    </dependency>\n    \n\n 2. 配置控制台地址：\n    \n    spring:\n      cloud:\n        sentinel:\n          transport:\n            dashboard: localhost:8080\n    \n\n 3. 访问微服务的任意端点（endpoint，我们spring mvc的任意一个controller的接口都是一个端点），触发sentinel监控\n\n访问过一次接口之后再看我们的控制台，就出现结果了。\n\n\n\n\n# 限流规则\n\n> 首先我们需要知道一个概念：\n\n> 簇点链路\n\n簇点链路:就是项目内的调用链路，链路中被监控的每个接口就是一个资源。默认情况下sentinel会监控spring mvc的每一个端点(endpoint) ，因此spring mvc的每一 个端 点(endpoint)就是调用链路中的一个资源。\n\n流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则:\n\n\n\n如果我们点击资源/order/{orderid}后面的流控按钮，就可以弹出表单。表单中可以添加流控规则。\n\n\n\n其含义是限制/order/{orderid}这个资源的单机qps为1，即每秒值允许1次请求，超出的请求会被拦截并报错。\n\n * > 案例\n   > \n   > 需求:给/order/{orderld}这个资源设置流控规则，qps不能超过5。然后利用jemeter测试。\n   \n   \n   \n   创建完成规则后我们使用jemeter进行测试\n   \n   \n   \n   接着看结果，限流的控制生效了！\n   \n   \n   \n   \n\n\n# 流控模式\n\n在添加限流规则时，点击高级选项，可以选择三种流控模式:\n\n * 直接:统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式\n * 关联:统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流\n * 链路:统计从指定链路访问到本资源的请求,触发阈值时,对指定链路限流\n\n\n\n * > 流控模式 - 关联\n   \n   * 关联模式:统计与当前资源相关的另一个资源，触发阈值时,对当前资源限流\n   * 使用场景:比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。 业务需求是有限支付和更新订单的业务，因此当修改订单业务触发阈值时,需要对查询订单业务限流。\n   \n   \n   \n   当/write资源访问量触发阈值时，就会对/read资源限流，避免影响/write资源。\n   \n   * > 案例\n     > \n     > 需求:\n     > \n     >  * 在ordercontroller新建 两个端点/order/query和/order/update, 无需实现业务\n     >  * 配置流控规则，当/order/ update资源被访问的qps超过5时，对/order/ query请求限流\n     \n     \n     \n     我们对用jemeter对/order/update进行qps大于5的请求，查看结果：\n     \n     \n   \n   * > 什么时候使用关联模式？\n     \n     * 两个有竞争关系的资源\n     * 一个优先级高，一个优先级低\n\n * > 流控模式 - 链路\n   \n   链路模式:只针对从指定链路访问到本资源的请求做统计,判断是否超过阈值。 例如有两条请求链路:\n   \n   * /test1→/common\n   * /test2 →/common\n   \n   如果只希望统计从/test2进入到/common的请求，则可以这样配置:\n   \n   \n   \n   * > 案例\n     > \n     > 需求:有查询订单和创建订单业务,两者都需要查询商品。针对从查询订单进入到查询商品的请求统计,并设置限流。\n     \n     1. 在orderservice中添加一个querygoods方法,不用实现业务\n     2. 在ordercontroller中 ，改造/order/query端点，调用orderservice中的querygoods方法\n     3. 在ordercontroller中 添加一个/order/save的端 点，调用orderservice的querygoods方法\n     4. 给querygoods设 置限流规则，从/order/query进 入querygoods的方法限制qps必须小于2\n     \n     设定规则\n     \n     \n     \n     用jemeter请求，我们的save不受任何影响。\n   \n   * > sentinel默认只标记controller中的方法为资源，如果要标记其他方法，需要利用@sentinelresource注解\n     \n     @sentinelresource("goods")\n     public void querygoods(){\n     \tsystem.err.println("查询商品");\n     }\n     \n     \n     sentinel默认会将controller方法做context整合，导致链路模式的流控失效，需要修改application.yml，添加配置：\n     \n     spring:\n       cloud:\n         sentinel:\n           web-context-unify: false # 关闭context整合\n     \n     \n     这样之后即便是service层也可以被监控了。\n\n\n# 流控效果\n\n流控效果是指请求达到流控阈值时应该采取的措施，包括三种:\n\n * 快速失败: 达到阈值后,新的请求会被立即拒绝并抛出flowexception异常。是默认的处理方式。\n * warm up:预热模式，对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化,从一个较小值逐渐增 加到最大阈值。\n * 排队等待:让所有的请求按照先后次序排队执行,两个请求的间隔不能小于指定时长\n\n\n\n * > 流控效果 - warm up\n   > \n   > 在服务刚启动的时候不能就把qps给打满了\n   \n   warm up也叫预热模式，是应对服务冷启动的一种方案。请求阈值初始值是threshold / coldfactor,持续指定时长后,逐渐提高到threshold值。而coldfactor的默认值是3.\n   \n   例如，我设置qps的threshold为10，预热时间为5秒,那么初始阈值就是10/3,也就是3,然后在5秒后逐渐增长到10.\n   \n   \n   \n   * > 案例\n     > \n     > 需求:给/order/{orderld}这个资源设置限流，最大qps为10, 利用warm up效果,预热时长为5秒\n     \n     \n     \n     qps是波动变化的\n     \n     \n     \n     \n\n * > 流控效果 - 排队等待\n   \n   当请求超过qps阈值时，快速失败和warm up会拒绝新的请求并抛出异常。而排队等待则是让所有请求进入- -个队列中,然后按照阈值允许的时间间隔依次执行。后来的请求必须等待前面执行完成，如果请求预期的等待时间超出最大时长,则会被拒绝。 例如: qps=5,意味着每200ms处理一个队列中的请求; timeout = 2000,意味着预期等待超过2000ms的请求会被拒绝并抛出异常\n   \n   \n   \n   \n   \n   * > 案例\n     > \n     > 流控效果 - 排队等待\n     > \n     > 需求:给/order/{orderld}这 个资源设置限流，最大qps为10,利用排队的流控效果，超时时长设置为5s\n     \n     \n     \n     \n     \n     我们的发送qps是15，然后多出来的都进入到队列里面去了。\n     \n     \n     \n     最终呈现出来的是非常平稳的qps，形成了对微服务的保护。\n\n\n# 热点参数限流\n\n> 前面的都是常见的，这个是特殊的。\n\n之前的限流是统计访问某个资源的所有请求,判断是否超过qps阈值。而热点参数限流是分别统计参数值相同的请求,判断是否超过qps阈值。\n\n\n\n * > 配置示例：\n   \n   \n   \n   代表的含义是:对hot这个资源的0号参数(第一个参数)做统计,每1秒相同参数值的请求数不能超过5\n\n> 商品是有热点商品的，所以限流阈值不应该是一样的\n\n在热点参数限流的高级选项中，可以对部分参数设置例外配置：\n\n\n\n结合上一个配置,这里的含义是对0号的long类型参数限流,每1秒相同参数的qps不能超过5,有两个例外:\n\n * 如果参数值是100,则每1秒允许的qps为10\n\n * 如果参数值是101,则每1秒允许的qps为15\n\n * > 案例\n   > \n   > 给/order/{orderld}这个资源添加热点参数限流，规则如下:\n   > \n   >  * 默认的热点参数规则是每1秒请求量不超过2\n   >  * 给102这 个参数设置例外:每1秒请求量不超过4\n   >  * 给103这个参数设置例外:每1秒请求量不超过10\n   \n   > 注意：\n   > \n   > 热点参数限流对默认的springmvc资源无效\n   \n   我们将它覆盖成sentinel资源\n   \n   \n   \n   \n   \n   \n   \n   添加完规则，进行jemeter测试\n   \n   \n   \n   ==不同的参数，限流的上限是不一样的。热点参数限流是一种更细粒度的限流==\n\n\n# 隔离和降级\n\n> \n\n虽然限流可以尽量避免因高并发而引起的服务故障,但服务还会因为其它原因而故障。而要将这些故障控制在一定范围，避免雪崩,就要靠线程隔离(舱壁模式)和熔断降级手段了。\n\n线程隔离：\n\n\n\n熔断：\n\n\n\n\n# feign整合sentinel\n\n> 不管是线程隔离还是熔断降级，都是对客户端（调用方）的保护\n> \n> 而调用方是feign，于是实际上是对feign的保护。\n\n * > feign整合sentinel\n   \n   springcloud中，微服务调用都是通过feign来实现的，因此做客户端必须整合feign和sentinel\n   \n   首先的准备：\n   \n   1. 修改orderservice的application.yml文件，开启feign的sentinel功能\n      \n      feign:\n        sentinel:\n          enable: true # 开启feign的sentinel功能\n      \n   \n   2. 给feignclient编写失败后的降级逻辑\n      \n      * 方式一：fallbackclass，无法对远程调用的异常做处理\n      * 方式二：fallbackfactory，可以对远程调用的异常做处理，我们选择这种\n   \n   步骤一：在feign-api项目中定义类，实现fallbackfactory:\n   \n   \n   \n   > create方法返回的就是userclient对象，实现方法的过程中就是在编写备用的方案。记录日志，返回友好提示啊之类的。这个就是一个失败降级的业务逻辑了。\n   \n   步骤二:在feing- api项目中的defaultfeignconfiguration类中将userclientfallbackfactory注册为一个bean:\n   \n   \n   \n   步骤三:在feing-api项目中的userclient接口中使用userclientfallbackfactory:\n   \n   \n   \n   最后我们访问一下接口，这下链路就出来了。其中出现了feign的请求接口，这下，我们就完成了feign和sentinel的整合了。\n   \n   \n\n\n# 线程隔离\n\n> \n\n> 线程隔离有两种方式实现:\n\n * 线程池隔离\n   \n   * > 优点\n     \n     * 支持主动超时\n     * 支持异步调用\n   \n   * > 缺点\n     \n     * 线程的额外开销比较大\n   \n   * > 场景\n     \n     * 低扇出\n\n * 信号量隔离(sentinel默认采用)\n\n * > 优点\n   \n   * 轻量级，无额外开销\n\n * > 缺点\n   \n   * 不支持主动超时\n   * 不支持异步调用\n\n * > 场景\n   \n   * 高频调用\n   * 高扇出（网关就是这样的场景）\n\n * > 线程池隔离（左），信号量隔离（右）\n\n\n\n * > sentinel如何实现线程隔离？\n   \n   在添加限流规则时，可以选择两种阈值类型:\n   \n   \n   \n   * qps: 就是每秒的请求数，在快速入门中已经演示过。\n   * 线程数：是改资源能够使用的tomcat线程数的最大值。也就是通过限制线程数量，实现舱壁模式。\n\n * > 案例：\n   > \n   > 需求:给userclient的查询用户接口设置流控规则，线程数不能超过2。然后利用jemeter测试。\n   \n   \n   \n   \n   \n   \n   \n   前面的请求实际上都是正常的，后面多于2的请求就降级了。这个就实现了信号量的隔离。\n\n\n# 熔断降级\n\n> \n\n熔断降级是解决雪崩问题的重要手段。其思路是由断路器统计服务调用的异常比例、慢请求比例，如果超出阈值则会熔断该服务。即拦截访问该服务的一切请求;而当服务恢复时，断路器会放行访问该服务的请求。\n\n> 它是使用状态机来实现的。\n\n> sentinel里面断路器的3个状态，以及切换的流程和作用\n\n\n\n> 熔断策略-慢调用\n\n断路器熔断策略有三种:慢调用、异常比例、异常数\n\n * 慢调用:业务的响应时长(rt)大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的 最小数量，慢调用比例大于设定的阈值，则触发熔断。例如:\n   \n   \n   \n   > 解读: rt超过500ms的调用是慢调用，统计最近10000ms内的请求,如果请求量超过10次，并且慢调用比例不低于0.5 则触发熔断，熔断时长为5秒。然后进入half-open状态,放行一次请求做测试。\n\n * > 案例：\n   > \n   > 需求:给userclient的查询用户接口设置降级规则，慢调用的rt阈值为50ms,统计时间为1秒,最小请求数量为5,失败阈值比例为0.4,熔断时长为5 提示:为了触发慢调用规则，我们需要修改userservice中的业务,增加业务耗时:\n   \n   \n   \n   \n   \n   我们先刷5次/order/1，然后再看/order/2\n   \n   \n   \n   发现已经熔断了。这个就是慢比例熔断了。\n\n> 熔断策略-异常比例、异常数\n\n断路器熔断策略有三种:慢调用、异常比例或异常数\n\n * 异常比例或异常数:统计指定时间内的调用，如果调用次数超过指定请求数,并且出现异常的比例达到设定的比例阈 值(或超过指定异常数) ,则触发熔断。例如:\n   \n   \n   \n   > 解读:统计最近1000ms内的请求,如果请求量超过10次,并且异常比例不低于0.5,则触发熔断,熔断时长为5秒。然后进入half-open状态，放行一-次请 求做测试。\n\n * > 案例：\n   > \n   > 需求:给userclient的查询用户接口设置降级规则，统计时间为1秒,最小请求数量为5,失败阈值比例为0.4,熔断时长为5s\n   > \n   > 提示:为了触发异常统计,我们需要修改userservice中的业务,抛出异常:\n   \n   \n   \n   \n   \n   我们刷了5次异常的102，再访问103。出发了异常比例降级。\n   \n   \n\n\n# 授权规则\n\n> 对请求者身份的判断\n\n授权规则可以对调用方的来源做控制，有白名单和黑名单两种方式。\n\n * 白名单:来源(origin)在白名单内的调用者允许访问\n\n * 黑名单:来源(origin) 在黑名单内的调用者不允许访问\n\n\n\n例如，我们只限定允许从网关来的请求访问order-service，那么流控应用中就填写网关的名称\n\n\n\nsentinel是通过requestoriginparser这个接口的parseorigin来获取请求的来源的。\n\n\n\n我们需要自己编写这个业务逻辑。\n\n例如，我们尝试从request中获取一个名为origin的请娘娘球头，作为origin的值：\n\n\n\n我们还需要在gateway服务中，利用网关的过滤器添加名为gateway的origin头：\n\n\n\n给/order/{orderid}配置授权规则：\n\n\n\n\n# 自定义异常结果\n\n> \n\n默认情况下，发生限流、降级、授权拦截时，都会抛出异常到调用方。如果要自定义异常时的返回结果，需要实现blockexceptionhandler接口：\n\n\n\n而blockexception包含很多个子类，分别对应不同的场景:\n\n\n\n我们在order-service中定义类，实现blockexceptionhandler接口：\n\n\n\n测试：\n\n\n\n可以看到被限流了：\n\n\n\n\n# 规则持久化\n\n> \n\n> 这章学习如何让sentinel的规则持久化\n\nsentinel的控制台规则管理有三种模式：\n\n * 原始模式（不支持持久化）\n   \n   sentinel的默认模式，将规则保存在内存，重启服务会丢失\n\n * pull模式(存在处理一致性问题)\n   \n   pull模式:控制台将配置的规则推送到sentinel客户端，而客户端会将配置规则保存在本地文件或数据库中。以后会定时去本地文件或数据库中查询，更新本地规则。\n   \n   \n\n * push模式（我们最推荐的）\n   \n   push模式:控制台将配置规则推送到远程配置中心，例如nacos。 sentinel客 户端监听nacos,获取配置变更的推送消息，完成本地配置更新。\n   \n   \n   \n   > 实现push模式\n   \n   push模式实现最为复杂，依赖于nacos, 并且需要修改sentinel控制台源码。\n   \n   \n   \n   我们需要修改orderservice，让其监听nacos中的sentinel规则配置。\n   \n   具体步骤如下：\n   \n   * 一、修改order-service服务\n     \n     1. 引入依赖\n        \n        在order-service中引入sentinel监听nacos的依赖：\n        \n        \n     \n     2. 配置nacos地址\n        \n        在order-service中的application.yml文件配置nacos地址及监听的配置信息:\n        \n        \n   \n   * 二、修改sentinel-dashboard源码\n     \n     sentineldashboard默认不支持nacos的持久化，需要修改源码\n     \n     1. 解压并打开项目\n        \n        \n     \n     2. 修改nacos依赖\n        \n        在sentinel-dashboard源码的pom文件中，nacos的依赖默认的scope是test，只能在测试时使用，这里要去除：\n        \n        \n        \n        将sentinel-datasource-nacos依赖的scope去掉：\n        \n        \n     \n     3. 添加nacos支持\n        \n        在sentinel-dashboard的test包下，已经编写了对nacos的支持，我们需要将其拷贝到main下。\n        \n        \n     \n     4. 修改nacos地址\n        \n        然后，还需要修改测试代码中的nacosconfig类：\n        \n        \n        \n        修改其中的nacos地址，让其读取application.properties中的配置：\n        \n        \n        \n        在sentinel-dashboard的application.properties中添加nacos地址配置：\n        \n        nacos.addr=localhost:8848\n        \n     \n     5. 配置nacos数据源\n        \n        另外，还需要修改com.alibaba.csp.sentinel.dashboard.controller.v2包下的flowcontrollerv2类。\n        \n        \n        \n        让我们添加的nacos数据源生效：\n        \n        \n     \n     6. 修改前端页面\n        \n        接下来，还需要修改前端页面，添加一个支持nacos的菜单\n        \n        修改src/amin/webapp/resources/app/scripts/directives/sidebar/目录下的sidebar.html文件：\n        \n        \n        \n        将其中的这部分注释打开：\n        \n        \n        \n        修改其中的文本：\n        \n        \n     \n     7. 重新编译、打包项目\n        \n        运行idea中的maven插件，编译和打包修改好的sentinel-dashboard：\n        \n        \n        \n        在sentinel中新增限流规则：\n        \n        \n     \n     在nacos中寻找一下：\n     \n     \n     \n     重启发现已经实现了持久化。',charsets:{cjk:!0},lastUpdated:"2024/05/02, 13:47:32",lastUpdatedTimestamp:1714657652e3},{title:"博客文章",frontmatter:{archivesPage:!0,title:"博客文章",permalink:"/blog/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-00422125",path:"/blog/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2024/04/26, 07:28:44",lastUpdatedTimestamp:1714116524e3},{title:"Home",frontmatter:{home:!0,heroImage:"/img/logo.png",heroText:"开发自救手册",tagline:"🚀认知决定思维高度，从思想上以及落地场景拯救开发者",actionText:"开始使用 →",actionLink:"/pages/1ba529/",bannerBg:"none",features:[{title:"知识管理",details:"包含三种典型的知识管理形态：结构化、碎片化、体系化。轻松打造属于你自己的知识管理平台"},{title:"简洁高效",details:"以 Markdown 为中心的项目结构，内置自动化工具，以更少的配置完成更多的事。配合多维索引快速定位每个知识点"},{title:"沉浸式阅读",details:"专为阅读设计的UI，配合多种颜色模式、可关闭的侧边栏和导航栏，带给你一种沉浸式阅读体验"}],postList:"none"},regularPath:"/",relativePath:"index.md",key:"v-93146184",path:"/",headers:[{level:2,title:"🎉上新推荐",slug:"🎉上新推荐",normalizedTitle:"🎉上新推荐",charIndex:6},{level:2,title:"⚡ 反馈与交流",slug:"⚡-反馈与交流",normalizedTitle:"⚡ 反馈与交流",charIndex:140}],headersStr:"🎉上新推荐 ⚡ 反馈与交流",content:"\n\n\n\n# 🎉上新推荐\n\n * 2024-04-29 C++自救指南 本篇章由百度大佬京都小低调倾情赞助，为cpper提供技术路线以及经验分享。\n * 2024-04-29 真正的面经 本篇章由团队成员共同编写，旨在为面试经历少的同学建立一套完整的后端面试解决方案。\n\n\n\n# ⚡ 反馈与交流\n\n在使用过程中有任何问题和想法，请给我提 Issue。 你也可以在Issue查看别人提的问题和给出解决方案。\n\n或者加入我们的交流群：\n\n后端开发交流 QQ群: 961331479",normalizedContent:"\n\n\n\n# 🎉上新推荐\n\n * 2024-04-29 c++自救指南 本篇章由百度大佬京都小低调倾情赞助，为cpper提供技术路线以及经验分享。\n * 2024-04-29 真正的面经 本篇章由团队成员共同编写，旨在为面试经历少的同学建立一套完整的后端面试解决方案。\n\n\n\n# ⚡ 反馈与交流\n\n在使用过程中有任何问题和想法，请给我提 issue。 你也可以在issue查看别人提的问题和给出解决方案。\n\n或者加入我们的交流群：\n\n后端开发交流 qq群: 961331479",charsets:{cjk:!0},lastUpdated:"2024/04/28, 17:23:46",lastUpdatedTimestamp:1714325026e3}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"开发认知扩展",link:"/pages/4d70dc/",items:[{text:"Java指南",items:[{text:"手册的初衷以及适用人群",link:"/pages/1ba529/"},{text:"介绍",link:"/pages/4d70dc/"},{text:"JAVA涉及技术总览",link:"/pages/f5ef63/"}]},{text:"技术场景",link:"/pages/b3dd9c/",items:[{text:"线上代码覆盖率监控",link:"/pages/b3dd9c/"}]}]},{text:"好文分享",link:"/pages/3001d9/",items:[{text:"cpp自救指南",link:"/pages/3001d9/"},{text:"go指南",link:"/pages/771788/"}]},{text:"面经&分享",items:[{text:"真正的面经系列",link:"/pages/950801/"},{text:"经历分享"},{text:"相关文章",items:[{text:"25届实习内推",link:"/pages/88cd1f/"}]}]},{text:"八股文",items:[{text:"微服务",link:"/pages/771792/"}]},{text:"友情链接",link:"/pages/daa40c/"},{text:"参与分享",items:[{text:"团队介绍",link:"/pages/385249/"},{text:"如何加入",link:"/pages/c91501/"}]}],sidebarDepth:2,logo:"/img/logo.png",repo:"Backend-Develop-Help/Backend-Develop-Help.github.io",searchMaxSuggestions:10,lastUpdated:"上次更新",sidebar:{"/01.开发认知扩展/":[{title:"指南",collapsable:!1,children:[["01.指南/01.手册的初衷以及适用人群.md","手册的初衷以及适用人群","/pages/1ba529/"],["01.指南/03.介绍.md","介绍","/pages/4d70dc/"],["01.指南/04.JAVA技术栈总览.md","JAVA涉及技术总览","/pages/f5ef63/"]]},{title:"技术场景",collapsable:!1,children:[["04.技术场景/01.jacoco线上代码覆盖率分析.md","jacoco线上代码覆盖率分析","/pages/b3dd9c/"],["04.技术场景/02.vuepress搭建个人博客.md","vuepress搭建个人博客","/pages/6f6205/"]]}],catalogue:{},"/02.好文分享/":[{title:"cpp自救指南",collapsable:!1,children:[["01.cpp自救指南/01.C++自救指南-总览.md","C++自救指南-总览","/pages/3001d9/"],["01.cpp自救指南/02.C++自救指南-工具篇.md","C++自救指南-工具篇","/pages/fe7e63/"],["01.cpp自救指南/03.C++自救指南-学习路线篇.md","C++自救指南-学习路线篇","/pages/9133cc/"],["01.cpp自救指南/04.C++自救指南-方向梳理篇.md","C++自救指南-方向梳理篇","/pages/b217bd/"],["01.cpp自救指南/05.C++自救指南-资源分享篇.md","C++自救指南-资源分享篇","/pages/926294/"],["01.cpp自救指南/06.C++自救指南-项目实战篇.md","C++自救指南-项目实战篇","/pages/5a3138/"]]},{title:"go指南",collapsable:!1,children:[["02.go指南/01.go语言开发.md","go语言开发","/pages/771788/"]]}],"/03.面经和分享/":[{title:"真正的面经",collapsable:!1,children:[["01.真正的面经/01.真正的面经Ⅰ如何包装简历.md","真正的面经Ⅰ如何包装简历","/pages/950801/"],["01.真正的面经/02.真正的面经Ⅱ如何投递简历.md","真正的面经Ⅱ如何投递简历","/pages/6ae607/"],["01.真正的面经/03.真正的面经Ⅲ面试流程.md","真正的面经Ⅲ面试流程","/pages/527072/"],["01.真正的面经/04.真正的面经Ⅳ技术面解密.md","真正的面经Ⅳ技术面解密","/pages/8d3967/"],["01.真正的面经/05.真正的面经ⅤHr面解密.md","真正的面经ⅤHr面解密","/pages/ec2e25/"],["01.真正的面经/06.真正的面经Ⅵ练手项目怎么选.md","真正的面经Ⅵ练手项目怎么选","/pages/6c697d/"],["01.真正的面经/07.真正的面经Ⅶ开源社区的意义.md","真正的面经Ⅶ开源社区的意义","/pages/914d5c/"]]},{title:"相关文章",collapsable:!1,children:[["03.相关文章/02.25届实习内推.md","25届实习内推","/pages/88cd1f/"]]}],"/05.友情链接/":[["01.友情链接.md","友情链接","/pages/daa40c/"]],"/06.参与分享/":[["01.团队介绍.md","团队介绍","/pages/385249/"],["02.如何加入我们.md","如何加入我们","/pages/c91501/"]],"/07.八股文/":[{title:"微服务",collapsable:!1,children:[["01.微服务/01.微服务介绍.md","微服务介绍","/pages/771792/"],["01.微服务/02.EureKa注册中心.md","EureKa注册中心","/pages/50142d/"],["01.微服务/03.Ribbon负载均衡.md","Ribbon负载均衡","/pages/c95a2f/"],["01.微服务/04.Nacos注册中心、配置中心.md","Nacos注册中心、配置中心","/pages/c321d3/"],["01.微服务/05.OpenFeign远程调用.md","OpenFeign远程调用","/pages/00990d/"],["01.微服务/06.Gateway统一网关.md","Gateway统一网关","/pages/009d95/"],["01.微服务/07.Docker.md","Docker","/pages/947d80/"],["01.微服务/08.DockerCompose.md","DockerCompose","/pages/s87jds/"],["01.微服务/09.RabbitMQ.md","RabbitMQ","/pages/940163/"],["01.微服务/10.Sentinel微服务保护.md","Sentinel微服务保护","/pages/384910/"]]}]},updateBar:{showToArticle:!1},pageStyle:"line",category:!1,tag:!1,author:{name:"Backend Development",href:"https://github.com/Backend-Develop-Help/Backend-Develop-Help.github.io"},social:{icons:[{iconClass:"icon-github",title:"GitHub",link:"https://github.com/Backend-Develop-Help/Backend-Develop-Help.github.io"}]},footer:{createYear:2019,copyrightInfo:"Backend Development | MIT License"}}};t(241);var _c=t(93),wc=t(94),Ec=t(11);var Tc={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:r}}=n;return!(e||!1===t||!0===r)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(Ec.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(Ec.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(Ec.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let r=0,a=n.length;r<a;r++){const{frontmatter:{categories:a,tags:o}}=n[r];"array"===Object(Ec.n)(a)&&a.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[r]))}),"array"===Object(Ec.n)(o)&&o.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[r]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Wt.component(_c.default),Wt.component(wc.default);function Cc(n){return n.toString().padStart(2,"0")}t(244);Wt.component("Badge",()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,372))),Wt.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,93))),Wt.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,94)));t(245);var Ac=[{},({Vue:n,options:e,router:t,siteData:r})=>{r.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${Cc(n.getUTCMonth()+1)}-${Cc(n.getUTCDate())} ${Cc(n.getUTCHours())}:${Cc(n.getUTCMinutes())}:${Cc(n.getUTCSeconds())}`}(e)),t?n.author=t:r.themeConfig.author&&(n.author=r.themeConfig.author)}),n.mixin(Tc)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({router:n})=>{"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?01293bffa6c3962016c08ba685c79d78";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),n.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))}],Oc=[];class jc extends class{constructor(){this.store=new Wt({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Wt.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(jc.prototype,{getPageAsyncComponent:ss,getLayoutAsyncComponent:cs,getAsyncComponent:ls,getVueComponent:us});var Sc={install(n){const e=new jc;n.$vuepress=e,n.prototype.$vuepress=e}};function Pc(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var Ic={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return ds("pageKey",e),Wt.component(e)||Wt.component(e,ss(e)),Wt.component(e)?n(e):n("")}},zc={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},Lc={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Mc=(t(246),t(247),Object(bc.a)(Lc,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Nc={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Wt.config.productionTip=!1,Wt.use(Hi),Wt.use(Sc),Wt.mixin(function(n,e,t=Wt){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const r=new(n(t.$vuepress.$get("siteData"))),a=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(r)),o={};return Object.keys(a).reduce((n,e)=>(e.startsWith("$")&&(n[e]=a[e].get),n),o),{computed:o}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const r in n)"/"===r?t=n[r]:0===this.$page.path.indexOf(r)&&(e=n[r]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},xc)),Wt.component("Content",Ic),Wt.component("ContentSlotsDistributor",zc),Wt.component("OutboundLink",Mc),Wt.component("ClientOnly",Nc),Wt.component("Layout",cs("Layout")),Wt.component("NotFound",cs("NotFound")),Wt.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.9",hash:"e2495a1"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:xc.routerBase||xc.base,t=new Hi({base:e,mode:"history",fallback:!1,routes:kc,scrollBehavior:(n,e,t)=>t||(n.hash?!Wt.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,r)=>{if(Pc(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";Pc(n,t)?r(t):r()}else r();else{const t=e.path+"/",a=e.path+".html";Pc(n,a)?r(a):Pc(n,t)?r(t):r()}})}(t);const r={};try{await Promise.all(Ac.filter(n=>"function"==typeof n).map(e=>e({Vue:Wt,options:r,router:t,siteData:xc,isServer:n})))}catch(n){console.error(n)}return{app:new Wt(Object.assign(r,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},Oc.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);